answer,score,correct,cleaned_text,tokens,stemmed_tokens,lemmatized_tokens
High risk problems are address in the prototype program to make sure that the program is feasible. A prototype may also be used to show a company that the software can be possibly programmed.,3.5,0.0,high risk problems are address in the prototype program to make sure that the program is feasible a prototype may also be used to show a company that the software can be possibly programmed,"['high', 'risk', 'problems', 'address', 'prototype', 'program', 'make', 'sure', 'program', 'feasible', 'prototype', 'may', 'also', 'used', 'show', 'company', 'software', 'possibly', 'programmed']",high risk problem address prototyp program make sure program feasibl prototyp may also use show compani softwar possibl program,high risk problem address prototype program make sure program feasible prototype may also used show company software possibly programmed
To simulate portions of the desired final product with a quick and easy program that does a small specific job. It is a way to help see what the problem is and how you may solve it in the final project.,5.0,1.0,to simulate portions of the desired final product with a quick and easy program that does a small specific job it is a way to help see what the problem is and how you may solve it in the final project,"['simulate', 'portions', 'desired', 'final', 'product', 'quick', 'easy', 'program', 'small', 'specific', 'job', 'way', 'help', 'see', 'problem', 'may', 'solve', 'final', 'project']",simul portion desir final product quick easi program small specif job way help see problem may solv final project,simulate portion desired final product quick easy program small specific job way help see problem may solve final project
A prototype program simulates the behaviors of portions of the desired software product to allow for error checking.,4.0,1.0,a prototype program simulates the behaviors of portions of the desired software product to allow for error checking,"['prototype', 'program', 'simulates', 'behaviors', 'portions', 'desired', 'software', 'product', 'allow', 'error', 'checking']",prototyp program simul behavior portion desir softwar product allow error check,prototype program simulates behavior portion desired software product allow error checking
"Defined in the Specification phase a prototype stimulates the behavior of portions of the desired software product. Meaning, the role of a prototype is a temporary solution until the program itself is refined to be used extensively in problem solving.",5.0,1.0,defined in the specification phase a prototype stimulates the behavior of portions of the desired software product meaning the role of a prototype is a temporary solution until the program itself is refined to be used extensively in problem solving,"['defined', 'specification', 'phase', 'prototype', 'stimulates', 'behavior', 'portions', 'desired', 'software', 'product', 'meaning', 'role', 'prototype', 'temporary', 'solution', 'program', 'refined', 'used', 'extensively', 'problem', 'solving']",defin specif phase prototyp stimul behavior portion desir softwar product mean role prototyp temporari solut program refin use extens problem solv,defined specification phase prototype stimulates behavior portion desired software product meaning role prototype temporary solution program refined used extensively problem solving
It is used to let the users have a first idea of the completed program and allow the clients to evaluate the program. This can generate much feedback including software specifications and project estimations of the total project.,3.0,0.0,it is used to let the users have a first idea of the completed program and allow the clients to evaluate the program this can generate much feedback including software specifications and project estimations of the total project,"['used', 'let', 'users', 'first', 'idea', 'completed', 'program', 'allow', 'clients', 'evaluate', 'program', 'generate', 'much', 'feedback', 'including', 'software', 'specifications', 'project', 'estimations', 'total', 'project']",use let user first idea complet program allow client evalu program gener much feedback includ softwar specif project estim total project,used let user first idea completed program allow client evaluate program generate much feedback including software specification project estimation total project
To find problem and errors in a program before it is finalized,2.0,0.0,to find problem and errors in a program before it is finalized,"['find', 'problem', 'errors', 'program', 'finalized']",find problem error program final,find problem error program finalized
"To address major issues in the creation of the program. There is no way to account for all possible bugs in the program, but it is possible to prove the program is tangible.",2.5,0.0,to address major issues in the creation of the program there is no way to account for all possible bugs in the program but it is possible to prove the program is tangible,"['address', 'major', 'issues', 'creation', 'program', 'way', 'account', 'possible', 'bugs', 'program', 'possible', 'prove', 'program', 'tangible']",address major issu creation program way account possibl bug program possibl prove program tangibl,address major issue creation program way account possible bug program possible prove program tangible
you can break the whole program into prototype programs to simulate parts of the final program,5.0,1.0,you can break the whole program into prototype programs to simulate parts of the final program,"['break', 'whole', 'program', 'prototype', 'programs', 'simulate', 'parts', 'final', 'program']",break whole program prototyp program simul part final program,break whole program prototype program simulate part final program
To provide an example or model of how the finished program should perfom. Provides forsight of some of the challanges that would be encountered. Provides opportunity To introduce changes To the finished program.,3.5,0.0,to provide an example or model of how the finished program should perfom provides forsight of some of the challanges that would be encountered provides opportunity to introduce changes to the finished program,"['provide', 'example', 'model', 'finished', 'program', 'perfom', 'provides', 'forsight', 'challanges', 'would', 'encountered', 'provides', 'opportunity', 'introduce', 'changes', 'finished', 'program']",provid exampl model finish program perfom provid forsight challang would encount provid opportun introduc chang finish program,provide example model finished program perfom provides forsight challanges would encountered provides opportunity introduce change finished program
Simulating the behavior of only a portion of the desired software product.,5.0,1.0,simulating the behavior of only a portion of the desired software product,"['simulating', 'behavior', 'portion', 'desired', 'software', 'product']",simul behavior portion desir softwar product,simulating behavior portion desired software product
A program that stimulates the behavior of portions of the desired software product.,5.0,1.0,a program that stimulates the behavior of portions of the desired software product,"['program', 'stimulates', 'behavior', 'portions', 'desired', 'software', 'product']",program stimul behavior portion desir softwar product,program stimulates behavior portion desired software product
A program that simulates the behavior of portions of the desired software product.,5.0,1.0,a program that simulates the behavior of portions of the desired software product,"['program', 'simulates', 'behavior', 'portions', 'desired', 'software', 'product']",program simul behavior portion desir softwar product,program simulates behavior portion desired software product
To lay out the basics and give you a starting point in the actual problem solving.,2.0,0.0,to lay out the basics and give you a starting point in the actual problem solving,"['lay', 'basics', 'give', 'starting', 'point', 'actual', 'problem', 'solving']",lay basic give start point actual problem solv,lay basic give starting point actual problem solving
To simulate problem solving for parts of the problem,4.5,1.0,to simulate problem solving for parts of the problem,"['simulate', 'problem', 'solving', 'parts', 'problem']",simul problem solv part problem,simulate problem solving part problem
A prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem.,2.0,0.0,a prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem,"['prototype', 'program', 'provides', 'basic', 'groundwork', 'enhance', 'improve', 'solution', 'problem']",prototyp program provid basic groundwork enhanc improv solut problem,prototype program provides basic groundwork enhance improve solution problem
"A prototype program is a part of the Specification phase of Software Problem Solvin. It is employed to illustrate how the key problem or problems will be solved in a program, and sometimes serves as a base program to expand upon.",4.5,1.0,a prototype program is a part of the specification phase of software problem solvin it is employed to illustrate how the key problem or problems will be solved in a program and sometimes serves as a base program to expand upon,"['prototype', 'program', 'part', 'specification', 'phase', 'software', 'problem', 'solvin', 'employed', 'illustrate', 'key', 'problem', 'problems', 'solved', 'program', 'sometimes', 'serves', 'base', 'program', 'expand', 'upon']",prototyp program part specif phase softwar problem solvin employ illustr key problem problem solv program sometim serv base program expand upon,prototype program part specification phase software problem solvin employed illustrate key problem problem solved program sometimes serf base program expand upon
Program that simulates the behavior of portions of the desired software product,5.0,1.0,program that simulates the behavior of portions of the desired software product,"['program', 'simulates', 'behavior', 'portions', 'desired', 'software', 'product']",program simul behavior portion desir softwar product,program simulates behavior portion desired software product
it provides a limited proof of concept to verify with the client before actually programming the whole application.,2.0,0.0,it provides a limited proof of concept to verify with the client before actually programming the whole application,"['provides', 'limited', 'proof', 'concept', 'verify', 'client', 'actually', 'programming', 'whole', 'application']",provid limit proof concept verifi client actual program whole applic,provides limited proof concept verify client actually programming whole application
It tests the main function of the program while leaving out the finer details.,2.0,0.0,it tests the main function of the program while leaving out the finer details,"['tests', 'main', 'function', 'program', 'leaving', 'finer', 'details']",test main function program leav finer detail,test main function program leaving finer detail
To get early feedback from users in early stages of development. To show users a first idea of what the program will do or look like. To make sure the program will meet requirements before intense programming begins.,2.5,0.0,to get early feedback from users in early stages of development to show users a first idea of what the program will do or look like to make sure the program will meet requirements before intense programming begins,"['get', 'early', 'feedback', 'users', 'early', 'stages', 'development', 'show', 'users', 'first', 'idea', 'program', 'look', 'like', 'make', 'sure', 'program', 'meet', 'requirements', 'intense', 'programming', 'begins']",get earli feedback user earli stage develop show user first idea program look like make sure program meet requir intens program begin,get early feedback user early stage development show user first idea program look like make sure program meet requirement intense programming begin
it simulates the behavior of portions of the desired software product,5.0,1.0,it simulates the behavior of portions of the desired software product,"['simulates', 'behavior', 'portions', 'desired', 'software', 'product']",simul behavior portion desir softwar product,simulates behavior portion desired software product
It simulates the behavior of portions of the desired software product.,5.0,1.0,it simulates the behavior of portions of the desired software product,"['simulates', 'behavior', 'portions', 'desired', 'software', 'product']",simul behavior portion desir softwar product,simulates behavior portion desired software product
A prototype program is used in problem solving to collect data for the problem.,1.5,0.0,a prototype program is used in problem solving to collect data for the problem,"['prototype', 'program', 'used', 'problem', 'solving', 'collect', 'data', 'problem']",prototyp program use problem solv collect data problem,prototype program used problem solving collect data problem
To ease the understanding of problem under discussion and to ease the understanding of the program itself,2.5,0.0,to ease the understanding of problem under discussion and to ease the understanding of the program itself,"['ease', 'understanding', 'problem', 'discussion', 'ease', 'understanding', 'program']",eas understand problem discuss eas understand program,ease understanding problem discussion ease understanding program
it simulates the behavior of portions of the desired software product,5.0,1.0,it simulates the behavior of portions of the desired software product,"['simulates', 'behavior', 'portions', 'desired', 'software', 'product']",simul behavior portion desir softwar product,simulates behavior portion desired software product
The role of a prototype program is to help spot key problems that may arise during the actual programing.,2.0,0.0,the role of a prototype program is to help spot key problems that may arise during the actual programing,"['role', 'prototype', 'program', 'help', 'spot', 'key', 'problems', 'may', 'arise', 'actual', 'programing']",role prototyp program help spot key problem may aris actual program,role prototype program help spot key problem may arise actual programing
"the prototype program gives a general idea of what the end product will do, without the time and effort to write out the entire program.",3.0,0.0,the prototype program gives a general idea of what the end product will do without the time and effort to write out the entire program,"['prototype', 'program', 'gives', 'general', 'idea', 'end', 'product', 'without', 'time', 'effort', 'write', 'entire', 'program']",prototyp program give gener idea end product without time effort write entir program,prototype program give general idea end product without time effort write entire program
to show that a certain part of the program works as it is supposed to,3.0,0.0,to show that a certain part of the program works as it is supposed to,"['show', 'certain', 'part', 'program', 'works', 'supposed']",show certain part program work suppos,show certain part program work supposed
"Prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem. i. e. book gave an example of a costumer withdrawing money from a bank, the approach that was taking on a pseudo code level during the OOA or Design lvl before proceeding into creating a solution.",2.5,0.0,prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem i e book gave an example of a costumer withdrawing money from a bank the approach that was taking on a pseudo code level during the ooa or design lvl before proceeding into creating a solution,"['prototype', 'programming', 'approach', 'programming', 'enables', 'one', 'take', 'organized', 'approach', 'developing', 'effective', 'program', 'minimal', 'errors', 'strategic', 'pattern', 'solving', 'problem', 'e', 'book', 'gave', 'example', 'costumer', 'withdrawing', 'money', 'bank', 'approach', 'taking', 'pseudo', 'code', 'level', 'ooa', 'design', 'lvl', 'proceeding', 'creating', 'solution']",prototyp program approach program enabl one take organ approach develop effect program minim error strateg pattern solv problem e book gave exampl costum withdraw money bank approach take pseudo code level ooa design lvl proceed creat solut,prototype programming approach programming enables one take organized approach developing effective program minimal error strategic pattern solving problem e book gave example costumer withdrawing money bank approach taking pseudo code level ooa design lvl proceeding creating solution
Refining and possibly the design if the testing phase reveals problems in the design. Production can be affected if the program is unworkable in its current form which will lead to a later production time than originally estimated. Also affects coding because after testing you may need to rewrite the code for the program to remove errors.,3.5,0.0,refining and possibly the design if the testing phase reveals problems in the design production can be affected if the program is unworkable in its current form which will lead to a later production time than originally estimated also affects coding because after testing you may need to rewrite the code for the program to remove errors,"['refining', 'possibly', 'design', 'testing', 'phase', 'reveals', 'problems', 'design', 'production', 'affected', 'program', 'unworkable', 'current', 'form', 'lead', 'later', 'production', 'time', 'originally', 'estimated', 'also', 'affects', 'coding', 'testing', 'may', 'need', 'rewrite', 'code', 'program', 'remove', 'errors']",refin possibl design test phase reveal problem design product affect program unwork current form lead later product time origin estim also affect code test may need rewrit code program remov error,refining possibly design testing phase reveals problem design production affected program unworkable current form lead later production time originally estimated also affect coding testing may need rewrite code program remove error
The implementation phase and the maintenance phase are effected,4.0,1.0,the implementation phase and the maintenance phase are effected,"['implementation', 'phase', 'maintenance', 'phase', 'effected']",implement phase mainten phase effect,implementation phase maintenance phase effected
"Verification, coding, refining the solution and maintenance are all influenced by the testing stage.",4.5,1.0,verification coding refining the solution and maintenance are all influenced by the testing stage,"['verification', 'coding', 'refining', 'solution', 'maintenance', 'influenced', 'testing', 'stage']",verif code refin solut mainten influenc test stage,verification coding refining solution maintenance influenced testing stage
"In RUP the stages in the software life cycle are influenced by the testing stage is: Elaboration phase-refined progject vision, iterative devilopment of core system, development of system requirements, more accurate time and cost estimates. Construction phase-iterative development of remaining system. Transition phase-testing and deployment of the system.",3.0,0.0,in rup the stages in the software life cycle are influenced by the testing stage is elaboration phase-refined progject vision iterative devilopment of core system development of system requirements more accurate time and cost estimates construction phase-iterative development of remaining system transition phase-testing and deployment of the system,"['rup', 'stages', 'software', 'life', 'cycle', 'influenced', 'testing', 'stage', 'elaboration', 'phase-refined', 'progject', 'vision', 'iterative', 'devilopment', 'core', 'system', 'development', 'system', 'requirements', 'accurate', 'time', 'cost', 'estimates', 'construction', 'phase-iterative', 'development', 'remaining', 'system', 'transition', 'phase-testing', 'deployment', 'system']",rup stage softwar life cycl influenc test stage elabor phase-refin progject vision iter devilop core system develop system requir accur time cost estim construct phase-it develop remain system transit phase-test deploy system,rup stage software life cycle influenced testing stage elaboration phase-refined progject vision iterative devilopment core system development system requirement accurate time cost estimate construction phase-iterative development remaining system transition phase-testing deployment system
"Refining the solution, Production and Maintenance are all influenced by the Testing stage.",3.0,0.0,refining the solution production and maintenance are all influenced by the testing stage,"['refining', 'solution', 'production', 'maintenance', 'influenced', 'testing', 'stage']",refin solut product mainten influenc test stage,refining solution production maintenance influenced testing stage
"Elaboration, Construction, and Transition are all affected by testing",2.0,0.0,elaboration construction and transition are all affected by testing,"['elaboration', 'construction', 'transition', 'affected', 'testing']",elabor construct transit affect test,elaboration construction transition affected testing
"Refining, Production, Maintenance",3.5,0.0,refining production maintenance,"['refining', 'production', 'maintenance']",refin product mainten,refining production maintenance
Refining the solution,4.0,1.0,refining the solution,"['refining', 'solution']",refin solut,refining solution
Verification Debugging,2.0,0.0,verification debugging,"['verification', 'debugging']",verif debug,verification debugging
Refining and Coding,5.0,1.0,refining and coding,"['refining', 'coding']",refin code,refining coding
"The second half of the Elaboration phase, Construction phase, and the Transition phase.",2.5,0.0,the second half of the elaboration phase construction phase and the transition phase,"['second', 'half', 'elaboration', 'phase', 'construction', 'phase', 'transition', 'phase']",second half elabor phase construct phase transit phase,second half elaboration phase construction phase transition phase
"The refining step, the production step, and the maintenance stage.",3.5,0.0,the refining step the production step and the maintenance stage,"['refining', 'step', 'production', 'step', 'maintenance', 'stage']",refin step product step mainten stage,refining step production step maintenance stage
"Elaboration, Construction, Transition",2.0,0.0,elaboration construction transition,"['elaboration', 'construction', 'transition']",elabor construct transit,elaboration construction transition
Refining.,3.0,0.0,refining,['refining'],refin,refining
"The testing stage has a direct influence on the final version of a program, being as it is the debugging and finalization of a software revision.",1.5,0.0,the testing stage has a direct influence on the final version of a program being as it is the debugging and finalization of a software revision,"['testing', 'stage', 'direct', 'influence', 'final', 'version', 'program', 'debugging', 'finalization', 'software', 'revision']",test stage direct influenc final version program debug final softwar revis,testing stage direct influence final version program debugging finalization software revision
"Directly: Refining, coding. Because Refining is right before the Testing Phase and Coding is right after the Testing Phase. Indirectly: Production, Maintenance. Because Refining occurs before these last two stages in the Software Life Cycle.",5.0,1.0,directly refining coding because refining is right before the testing phase and coding is right after the testing phase indirectly production maintenance because refining occurs before these last two stages in the software life cycle,"['directly', 'refining', 'coding', 'refining', 'right', 'testing', 'phase', 'coding', 'right', 'testing', 'phase', 'indirectly', 'production', 'maintenance', 'refining', 'occurs', 'last', 'two', 'stages', 'software', 'life', 'cycle']",directli refin code refin right test phase code right test phase indirectli product mainten refin occur last two stage softwar life cycl,directly refining coding refining right testing phase coding right testing phase indirectly production maintenance refining occurs last two stage software life cycle
"Testing, refining, production, and maintenance.",3.5,0.0,testing refining production and maintenance,"['testing', 'refining', 'production', 'maintenance']",test refin product mainten,testing refining production maintenance
"Depending on how the work is done, Testing is spread throughout the process as to prevent errors from showing up later on due to lack of foresight.",1.5,0.0,depending on how the work is done testing is spread throughout the process as to prevent errors from showing up later on due to lack of foresight,"['depending', 'work', 'done', 'testing', 'spread', 'throughout', 'process', 'prevent', 'errors', 'showing', 'later', 'due', 'lack', 'foresight']",depend work done test spread throughout process prevent error show later due lack foresight,depending work done testing spread throughout process prevent error showing later due lack foresight
"Elaboration, construction, and transition.",2.5,0.0,elaboration construction and transition,"['elaboration', 'construction', 'transition']",elabor construct transit,elaboration construction transition
"All stages are influenced except setting the program requirements. If a test fails, it can change the whole design, implementation, etc of a program as well as the final outcome.",1.5,0.0,all stages are influenced except setting the program requirements if a test fails it can change the whole design implementation etc of a program as well as the final outcome,"['stages', 'influenced', 'except', 'setting', 'program', 'requirements', 'test', 'fails', 'change', 'whole', 'design', 'implementation', 'etc', 'program', 'well', 'final', 'outcome']",stage influenc except set program requir test fail chang whole design implement etc program well final outcom,stage influenced except setting program requirement test fails change whole design implementation etc program well final outcome
"Refining, production, and maintenance",3.0,0.0,refining production and maintenance,"['refining', 'production', 'maintenance']",refin product mainten,refining production maintenance
coding and refining,5.0,1.0,coding and refining,"['coding', 'refining']",code refin,coding refining
"refining, production, maintenance.",3.5,0.0,refining production maintenance,"['refining', 'production', 'maintenance']",refin product mainten,refining production maintenance
"Removing logical errors, testing for valid data, random data and actual data.",1.0,0.0,removing logical errors testing for valid data random data and actual data,"['removing', 'logical', 'errors', 'testing', 'valid', 'data', 'random', 'data', 'actual', 'data']",remov logic error test valid data random data actual data,removing logical error testing valid data random data actual data
1-specification 2-design 3-risk analysis 4-verification 5-coding 6-testing 7-refining 8-production 9-maintenance,2.5,0.0,1-specification 2-design 3-risk analysis 4-verification 5-coding 6-testing 7-refining 8-production 9-maintenance,"['1-specification', '2-design', '3-risk', 'analysis', '4-verification', '5-coding', '6-testing', '7-refining', '8-production', '9-maintenance']",1-specif 2-design 3-risk analysi 4-verif 5-code 6-test 7-refin 8-product 9-mainten,1-specification 2-design 3-risk analysis 4-verification 5-coding 6-testing 7-refining 8-production 9-maintenance
"Refining stage, Production stage, and Maintenance stage.",3.5,0.0,refining stage production stage and maintenance stage,"['refining', 'stage', 'production', 'stage', 'maintenance', 'stage']",refin stage product stage mainten stage,refining stage production stage maintenance stage
Testing could affect all parts of the life cycle; it could make you go back to specification if it does not test well.,2.0,0.0,testing could affect all parts of the life cycle it could make you go back to specification if it does not test well,"['testing', 'could', 'affect', 'parts', 'life', 'cycle', 'could', 'make', 'go', 'back', 'specification', 'test', 'well']",test could affect part life cycl could make go back specif test well,testing could affect part life cycle could make go back specification test well
coding,3.0,0.0,coding,['coding'],code,coding
"The Individual components and steps such as analysis, design, and implementing code as well as the entire system are tested for execution of the requirements identified during the analysis stage. i. e. Main output",1.5,0.0,the individual components and steps such as analysis design and implementing code as well as the entire system are tested for execution of the requirements identified during the analysis stage i e main output,"['individual', 'components', 'steps', 'analysis', 'design', 'implementing', 'code', 'well', 'entire', 'system', 'tested', 'execution', 'requirements', 'identified', 'analysis', 'stage', 'e', 'main', 'output']",individu compon step analysi design implement code well entir system test execut requir identifi analysi stage e main output,individual component step analysis design implementing code well entire system tested execution requirement identified analysis stage e main output
"Modularability, the ability to reuse parts of the program later in another program sometimes with completely different goals for the program. Also it makes it easier to debug code by dividing up the code into classes that each do a specific job and when the program fails at one job you only have one class to debug. Good for security purposes because it allows you to let someone use a program which sorts lists without having to give them access to the source code. ALso allows you to use inheritance and polymorphism.",4.5,1.0,modularability the ability to reuse parts of the program later in another program sometimes with completely different goals for the program also it makes it easier to debug code by dividing up the code into classes that each do a specific job and when the program fails at one job you only have one class to debug good for security purposes because it allows you to let someone use a program which sorts lists without having to give them access to the source code also allows you to use inheritance and polymorphism,"['modularability', 'ability', 'reuse', 'parts', 'program', 'later', 'another', 'program', 'sometimes', 'completely', 'different', 'goals', 'program', 'also', 'makes', 'easier', 'debug', 'code', 'dividing', 'code', 'classes', 'specific', 'job', 'program', 'fails', 'one', 'job', 'one', 'class', 'debug', 'good', 'security', 'purposes', 'allows', 'let', 'someone', 'use', 'program', 'sorts', 'lists', 'without', 'give', 'access', 'source', 'code', 'also', 'allows', 'use', 'inheritance', 'polymorphism']",modular abil reus part program later anoth program sometim complet differ goal program also make easier debug code divid code class specif job program fail one job one class debug good secur purpos allow let someon use program sort list without give access sourc code also allow use inherit polymorph,modularability ability reuse part program later another program sometimes completely different goal program also make easier debug code dividing code class specific job program fails one job one class debug good security purpose allows let someone use program sort list without give access source code also allows use inheritance polymorphism
"This type of programming is more flexible, making it easier to add and modify the program. It is also a type of a fail safe program, you check each individual module. This eliminates redundant code and makes the program easier to read for other programmers. When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program.",5.0,1.0,this type of programming is more flexible making it easier to add and modify the program it is also a type of a fail safe program you check each individual module this eliminates redundant code and makes the program easier to read for other programmers when debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program,"['type', 'programming', 'flexible', 'making', 'easier', 'add', 'modify', 'program', 'also', 'type', 'fail', 'safe', 'program', 'check', 'individual', 'module', 'eliminates', 'redundant', 'code', 'makes', 'program', 'easier', 'read', 'programmers', 'debugging', 'program', 'easier', 'track', 'source', 'problem', 'within', 'module', 'rather', '2', 'million', 'line', 'program']",type program flexibl make easier add modifi program also type fail safe program check individu modul elimin redund code make program easier read programm debug program easier track sourc problem within modul rather 2 million line program,type programming flexible making easier add modify program also type fail safe program check individual module eliminates redundant code make program easier read programmer debugging program easier track source problem within module rather 2 million line program
The main advantages to object-oriented programming are that existing classes can be reused and program maintenance and verification are easier.,3.5,0.0,the main advantages to object-oriented programming are that existing classes can be reused and program maintenance and verification are easier,"['main', 'advantages', 'object-oriented', 'programming', 'existing', 'classes', 'reused', 'program', 'maintenance', 'verification', 'easier']",main advantag object-ori program exist class reus program mainten verif easier,main advantage object-oriented programming existing class reused program maintenance verification easier
The advantages is that OOP allows us to build classes of objects. Three principles that make up OOP are: Encapsulation-Objects combine data and operations. Inheritance-Classes can inherit properties from other classes. Polymorphism-Objects can determine appropriate operations at execution time.,2.5,0.0,the advantages is that oop allows us to build classes of objects three principles that make up oop are encapsulation-objects combine data and operations inheritance-classes can inherit properties from other classes polymorphism-objects can determine appropriate operations at execution time,"['advantages', 'oop', 'allows', 'us', 'build', 'classes', 'objects', 'three', 'principles', 'make', 'oop', 'encapsulation-objects', 'combine', 'data', 'operations', 'inheritance-classes', 'inherit', 'properties', 'classes', 'polymorphism-objects', 'determine', 'appropriate', 'operations', 'execution', 'time']",advantag oop allow us build class object three principl make oop encapsulation-object combin data oper inheritance-class inherit properti class polymorphism-object determin appropri oper execut time,advantage oop allows u build class object three principle make oop encapsulation-objects combine data operation inheritance-classes inherit property class polymorphism-objects determine appropriate operation execution time
Some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish.,3.5,0.0,some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish,"['advantages', 'existing', 'classes', 'reused', 'program', 'maintenance', 'verification', 'easier', 'accomplish']",advantag exist class reus program mainten verif easier accomplish,advantage existing class reused program maintenance verification easier accomplish
Object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once. The classes all hold attrubutes that affect the object.,1.0,0.0,object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once the classes all hold attrubutes that affect the object,"['object', 'oriented', 'programming', 'allows', 'programmers', 'use', 'object', 'classes', 'changed', 'manipulated', 'affecting', 'entire', 'object', 'classes', 'hold', 'attrubutes', 'affect', 'object']",object orient program allow programm use object class chang manipul affect entir object class hold attrubut affect object,object oriented programming allows programmer use object class changed manipulated affecting entire object class hold attrubutes affect object
"Reusable components, Extensibility, Maintainability, it reduces large problems into smaller more manageable problems.",4.0,1.0,reusable components extensibility maintainability it reduces large problems into smaller more manageable problems,"['reusable', 'components', 'extensibility', 'maintainability', 'reduces', 'large', 'problems', 'smaller', 'manageable', 'problems']",reusabl compon extens maintain reduc larg problem smaller manag problem,reusable component extensibility maintainability reduces large problem smaller manageable problem
Encapsulation-objects combine data and operations Inheritance-classes can inherit properties from other classes Polymorphism-Objects can determine appropriate operations at execution time,2.5,0.0,encapsulation-objects combine data and operations inheritance-classes can inherit properties from other classes polymorphism-objects can determine appropriate operations at execution time,"['encapsulation-objects', 'combine', 'data', 'operations', 'inheritance-classes', 'inherit', 'properties', 'classes', 'polymorphism-objects', 'determine', 'appropriate', 'operations', 'execution', 'time']",encapsulation-object combin data oper inheritance-class inherit properti class polymorphism-object determin appropri oper execut time,encapsulation-objects combine data operation inheritance-classes inherit property class polymorphism-objects determine appropriate operation execution time
Easier to debugg Reusability,3.0,0.0,easier to debugg reusability,"['easier', 'debugg', 'reusability']",easier debugg reusabl,easier debugg reusability
Re-usability and ease of maintenance,4.0,1.0,re-usability and ease of maintenance,"['re-usability', 'ease', 'maintenance']",re-us eas mainten,re-usability ease maintenance
"One of the main advantages is you can hide inner details a technique known by encapsulation. Objects combine the data and operations but you cannot see how it works. Another advantage is you can reuse classes that have been defined earlier in the program, a method known as inheritance. Finally another advantage is objects can determine appropriate operations at execution time a technique known as polymorphism.",5.0,1.0,one of the main advantages is you can hide inner details a technique known by encapsulation objects combine the data and operations but you cannot see how it works another advantage is you can reuse classes that have been defined earlier in the program a method known as inheritance finally another advantage is objects can determine appropriate operations at execution time a technique known as polymorphism,"['one', 'main', 'advantages', 'hide', 'inner', 'details', 'technique', 'known', 'encapsulation', 'objects', 'combine', 'data', 'operations', 'see', 'works', 'another', 'advantage', 'reuse', 'classes', 'defined', 'earlier', 'program', 'method', 'known', 'inheritance', 'finally', 'another', 'advantage', 'objects', 'determine', 'appropriate', 'operations', 'execution', 'time', 'technique', 'known', 'polymorphism']",one main advantag hide inner detail techniqu known encapsul object combin data oper see work anoth advantag reus class defin earlier program method known inherit final anoth advantag object determin appropri oper execut time techniqu known polymorph,one main advantage hide inner detail technique known encapsulation object combine data operation see work another advantage reuse class defined earlier program method known inheritance finally another advantage object determine appropriate operation execution time technique known polymorphism
"Existing classes can be reused, and program maintenance and verification are easier.",3.5,0.0,existing classes can be reused and program maintenance and verification are easier,"['existing', 'classes', 'reused', 'program', 'maintenance', 'verification', 'easier']",exist class reus program mainten verif easier,existing class reused program maintenance verification easier
Using different modules allows for easier debugging,2.0,0.0,using different modules allows for easier debugging,"['using', 'different', 'modules', 'allows', 'easier', 'debugging']",use differ modul allow easier debug,using different module allows easier debugging
"Data encapsulation concept, the use of functions or methods to manipulate data.",3.5,0.0,data encapsulation concept the use of functions or methods to manipulate data,"['data', 'encapsulation', 'concept', 'use', 'functions', 'methods', 'manipulate', 'data']",data encapsul concept use function method manipul data,data encapsulation concept use function method manipulate data
"Modular, reusable code, allowing faster deployment of solutions, and a more general view of a solution.",4.5,1.0,modular reusable code allowing faster deployment of solutions and a more general view of a solution,"['modular', 'reusable', 'code', 'allowing', 'faster', 'deployment', 'solutions', 'general', 'view', 'solution']",modular reusabl code allow faster deploy solut gener view solut,modular reusable code allowing faster deployment solution general view solution
"Coding and Debugging programs are usually easier, as either the compiler will specify the object that is working incorrectly, or the function an object was assigned to will be easier to identify. The code itself also looks more organized and is easier to read and will help to avoid redundant coding. Post-programming maintenance is also easier. Also, modules can be reused several times in other programs without too much hassle. Abstraction is the art of breaking down one big problem into smaller, simpler problems and solving them. Many of the smaller problems are shared between unique complex problems, and creating modules to these solve these smaller repeated problems can save time when you encounter them again.",5.0,1.0,coding and debugging programs are usually easier as either the compiler will specify the object that is working incorrectly or the function an object was assigned to will be easier to identify the code itself also looks more organized and is easier to read and will help to avoid redundant coding post-programming maintenance is also easier also modules can be reused several times in other programs without too much hassle abstraction is the art of breaking down one big problem into smaller simpler problems and solving them many of the smaller problems are shared between unique complex problems and creating modules to these solve these smaller repeated problems can save time when you encounter them again,"['coding', 'debugging', 'programs', 'usually', 'easier', 'either', 'compiler', 'specify', 'object', 'working', 'incorrectly', 'function', 'object', 'assigned', 'easier', 'identify', 'code', 'also', 'looks', 'organized', 'easier', 'read', 'help', 'avoid', 'redundant', 'coding', 'post-programming', 'maintenance', 'also', 'easier', 'also', 'modules', 'reused', 'several', 'times', 'programs', 'without', 'much', 'hassle', 'abstraction', 'art', 'breaking', 'one', 'big', 'problem', 'smaller', 'simpler', 'problems', 'solving', 'many', 'smaller', 'problems', 'shared', 'unique', 'complex', 'problems', 'creating', 'modules', 'solve', 'smaller', 'repeated', 'problems', 'save', 'time', 'encounter']",code debug program usual easier either compil specifi object work incorrectli function object assign easier identifi code also look organ easier read help avoid redund code post-program mainten also easier also modul reus sever time program without much hassl abstract art break one big problem smaller simpler problem solv mani smaller problem share uniqu complex problem creat modul solv smaller repeat problem save time encount,coding debugging program usually easier either compiler specify object working incorrectly function object assigned easier identify code also look organized easier read help avoid redundant coding post-programming maintenance also easier also module reused several time program without much hassle abstraction art breaking one big problem smaller simpler problem solving many smaller problem shared unique complex problem creating module solve smaller repeated problem save time encounter
"Variables can remain private. The code is easily modified and reusable, as well as easily implemented. Not to mention easier to read and follow along as an observer.",4.5,1.0,variables can remain private the code is easily modified and reusable as well as easily implemented not to mention easier to read and follow along as an observer,"['variables', 'remain', 'private', 'code', 'easily', 'modified', 'reusable', 'well', 'easily', 'implemented', 'mention', 'easier', 'read', 'follow', 'along', 'observer']",variabl remain privat code easili modifi reusabl well easili implement mention easier read follow along observ,variable remain private code easily modified reusable well easily implemented mention easier read follow along observer
Data Abstraction and control ... it is possible to isolate elements from other elements a lot easier and prevent tampering of data.,3.5,0.0,data abstraction and control it is possible to isolate elements from other elements a lot easier and prevent tampering of data,"['data', 'abstraction', 'control', 'possible', 'isolate', 'elements', 'elements', 'lot', 'easier', 'prevent', 'tampering', 'data']",data abstract control possibl isol element element lot easier prevent tamper data,data abstraction control possible isolate element element lot easier prevent tampering data
Encapsulation Objects use operations without knowing how the operation works. Inheritance cuts redundancy by reusing earlier classes. Polymorphism objects select the correct operation to use in the situation.,4.0,1.0,encapsulation objects use operations without knowing how the operation works inheritance cuts redundancy by reusing earlier classes polymorphism objects select the correct operation to use in the situation,"['encapsulation', 'objects', 'use', 'operations', 'without', 'knowing', 'operation', 'works', 'inheritance', 'cuts', 'redundancy', 'reusing', 'earlier', 'classes', 'polymorphism', 'objects', 'select', 'correct', 'operation', 'use', 'situation']",encapsul object use oper without know oper work inherit cut redund reus earlier class polymorph object select correct oper use situat,encapsulation object use operation without knowing operation work inheritance cut redundancy reusing earlier class polymorphism object select correct operation use situation
"They make it easier to reuse and adapt previously written code and they separate complex programs into smaller, easier to understand classes.",4.5,1.0,they make it easier to reuse and adapt previously written code and they separate complex programs into smaller easier to understand classes,"['make', 'easier', 'reuse', 'adapt', 'previously', 'written', 'code', 'separate', 'complex', 'programs', 'smaller', 'easier', 'understand', 'classes']",make easier reus adapt previous written code separ complex program smaller easier understand class,make easier reuse adapt previously written code separate complex program smaller easier understand class
"Existing classes can be reused, Program maintenance and verification are easier",3.5,0.0,existing classes can be reused program maintenance and verification are easier,"['existing', 'classes', 'reused', 'program', 'maintenance', 'verification', 'easier']",exist class reus program mainten verif easier,existing class reused program maintenance verification easier
"Existing classes can be feused, Program maintenance and verification are easier",3.5,0.0,existing classes can be feused program maintenance and verification are easier,"['existing', 'classes', 'feused', 'program', 'maintenance', 'verification', 'easier']",exist class feus program mainten verif easier,existing class feused program maintenance verification easier
"the main advantages to object-oriented programming is data abstraction, easier maintenance, and re-usability.",5.0,1.0,the main advantages to object-oriented programming is data abstraction easier maintenance and re-usability,"['main', 'advantages', 'object-oriented', 'programming', 'data', 'abstraction', 'easier', 'maintenance', 're-usability']",main advantag object-ori program data abstract easier mainten re-us,main advantage object-oriented programming data abstraction easier maintenance re-usability
Existing classes can be reused Program maintenance and verifications are easy,4.0,1.0,existing classes can be reused program maintenance and verifications are easy,"['existing', 'classes', 'reused', 'program', 'maintenance', 'verifications', 'easy']",exist class reus program mainten verif easi,existing class reused program maintenance verification easy
1-Existing classes can be reused 2-Program maintenance and verification are easier,3.5,0.0,1-existing classes can be reused 2-program maintenance and verification are easier,"['1-existing', 'classes', 'reused', '2-program', 'maintenance', 'verification', 'easier']",1-exist class reus 2-program mainten verif easier,1-existing class reused 2-program maintenance verification easier
Information can be hidden. It is easier to debug. Programming is easier and more manageable.,3.5,0.0,information can be hidden it is easier to debug programming is easier and more manageable,"['information', 'hidden', 'easier', 'debug', 'programming', 'easier', 'manageable']",inform hidden easier debug program easier manag,information hidden easier debug programming easier manageable
"Existing classes can be reused, program maintenance and verification are easier.",3.5,0.0,existing classes can be reused program maintenance and verification are easier,"['existing', 'classes', 'reused', 'program', 'maintenance', 'verification', 'easier']",exist class reus program mainten verif easier,existing class reused program maintenance verification easier
existing classes can be reused program maintenance and verification are easier,3.5,0.0,existing classes can be reused program maintenance and verification are easier,"['existing', 'classes', 'reused', 'program', 'maintenance', 'verification', 'easier']",exist class reus program mainten verif easier,existing class reused program maintenance verification easier
"Well for one encapsulation the values of the variables inside an object are private, unless methods are written to pass info outside of the object. As well as Inheritance where each subclass inherits all variables and methods of its super class. Example in the book included obj clock and how obj alarm would still use clock from the first class.",3.5,0.0,well for one encapsulation the values of the variables inside an object are private unless methods are written to pass info outside of the object as well as inheritance where each subclass inherits all variables and methods of its super class example in the book included obj clock and how obj alarm would still use clock from the first class,"['well', 'one', 'encapsulation', 'values', 'variables', 'inside', 'object', 'private', 'unless', 'methods', 'written', 'pass', 'info', 'outside', 'object', 'well', 'inheritance', 'subclass', 'inherits', 'variables', 'methods', 'super', 'class', 'example', 'book', 'included', 'obj', 'clock', 'obj', 'alarm', 'would', 'still', 'use', 'clock', 'first', 'class']",well one encapsul valu variabl insid object privat unless method written pass info outsid object well inherit subclass inherit variabl method super class exampl book includ obj clock obj alarm would still use clock first class,well one encapsulation value variable inside object private unless method written pas info outside object well inheritance subclass inherits variable method super class example book included obj clock obj alarm would still use clock first class
At function int main,5.0,1.0,at function int main,"['function', 'int', 'main']",function int main,function int main
the Function main .,5.0,1.0,the function main,"['function', 'main']",function main,function main
c plus plus programs begin to execute in the main method.,5.0,1.0,c plus plus programs begin to execute in the main method,"['c', 'plus', 'plus', 'programs', 'begin', 'execute', 'main', 'method']",c plu plu program begin execut main method,c plus plus program begin execute main method
A C plus plus program will begin to execute at the main function.,5.0,1.0,a c plus plus program will begin to execute at the main function,"['c', 'plus', 'plus', 'program', 'begin', 'execute', 'main', 'function']",c plu plu program begin execut main function,c plus plus program begin execute main function
They begin in the main function.,5.0,1.0,they begin in the main function,"['begin', 'main', 'function']",begin main function,begin main function
Int main,5.0,1.0,int main,"['int', 'main']",int main,int main
main method,5.0,1.0,main method,"['main', 'method']",main method,main method
in the testing phase,0.0,0.0,in the testing phase,"['testing', 'phase']",test phase,testing phase
At the MAIN function,5.0,1.0,at the main function,"['main', 'function']",main function,main function
main,5.0,1.0,main,['main'],main,main
They begin to execute at the funcion main .,5.0,1.0,they begin to execute at the funcion main,"['begin', 'execute', 'funcion', 'main']",begin execut funcion main,begin execute funcion main
The main method.,5.0,1.0,the main method,"['main', 'method']",main method,main method
At the root,2.5,0.0,at the root,['root'],root,root
In the main function.,5.0,1.0,in the main function,"['main', 'function']",main function,main function
C plus plus programs begin execution at main.,5.0,1.0,c plus plus programs begin execution at main,"['c', 'plus', 'plus', 'programs', 'begin', 'execution', 'main']",c plu plu program begin execut main,c plus plus program begin execution main
In the Main function ..?,5.0,1.0,in the main function,"['main', 'function']",main function,main function
At the main  function,5.0,1.0,at the main function,"['main', 'function']",main function,main function
The main function.,5.0,1.0,the main function,"['main', 'function']",main function,main function
The function main,5.0,1.0,the function main,"['function', 'main']",function main,function main
"After loading the required include statements and libraries, the main method begins the execution.",5.0,1.0,after loading the required include statements and libraries the main method begins the execution,"['loading', 'required', 'include', 'statements', 'libraries', 'main', 'method', 'begins', 'execution']",load requir includ statement librari main method begin execut,loading required include statement library main method begin execution
main function,5.0,1.0,main function,"['main', 'function']",main function,main function
main,5.0,1.0,main,['main'],main,main
C plus plus programs begin execution at the main function.,5.0,1.0,c plus plus programs begin execution at the main function,"['c', 'plus', 'plus', 'programs', 'begin', 'execution', 'main', 'function']",c plu plu program begin execut main function,c plus plus program begin execution main function
At main,5.0,1.0,at main,['main'],main,main
they beging to excute at main,5.0,1.0,they beging to excute at main,"['beging', 'excute', 'main']",bege excut main,beging excute main
at the main function int main,5.0,1.0,at the main function int main,"['main', 'function', 'int', 'main']",main function int main,main function int main
C plus plus programs begin execution at the main function.,5.0,1.0,c plus plus programs begin execution at the main function,"['c', 'plus', 'plus', 'programs', 'begin', 'execution', 'main', 'function']",c plu plu program begin execut main function,c plus plus program begin execution main function
in the main function,5.0,1.0,in the main function,"['main', 'function']",main function,main function
Within the main function,5.0,1.0,within the main function,"['within', 'main', 'function']",within main function,within main function
Variable can be a integer or a string in a program.,2.0,0.0,variable can be a integer or a string in a program,"['variable', 'integer', 'string', 'program']",variabl integ string program,variable integer string program
"In programming, a structure that holds data and is uniquely named by the programmer. It holds the data assigned to it until a new value is assigned or the program is finished.",4.5,1.0,in programming a structure that holds data and is uniquely named by the programmer it holds the data assigned to it until a new value is assigned or the program is finished,"['programming', 'structure', 'holds', 'data', 'uniquely', 'named', 'programmer', 'holds', 'data', 'assigned', 'new', 'value', 'assigned', 'program', 'finished']",program structur hold data uniqu name programm hold data assign new valu assign program finish,programming structure hold data uniquely named programmer hold data assigned new value assigned program finished
A variable is a location in memory where a value can be stored.,5.0,1.0,a variable is a location in memory where a value can be stored,"['variable', 'location', 'memory', 'value', 'stored']",variabl locat memori valu store,variable location memory value stored
"Variable is a location in the computer 's memory, in which a value can be stored and later can retrieve that value.",5.0,1.0,variable is a location in the computer s memory in which a value can be stored and later can retrieve that value,"['variable', 'location', 'computer', 'memory', 'value', 'stored', 'later', 'retrieve', 'value']",variabl locat comput memori valu store later retriev valu,variable location computer memory value stored later retrieve value
"A variable is a location in the computer 's memory where a value can be stored for use by a program. Each variable has a name, a value, a type and a size.",5.0,1.0,a variable is a location in the computer s memory where a value can be stored for use by a program each variable has a name a value a type and a size,"['variable', 'location', 'computer', 'memory', 'value', 'stored', 'use', 'program', 'variable', 'name', 'value', 'type', 'size']",variabl locat comput memori valu store use program variabl name valu type size,variable location computer memory value stored use program variable name value type size
A named object that can hold a numerical or letter value,3.5,0.0,a named object that can hold a numerical or letter value,"['named', 'object', 'hold', 'numerical', 'letter', 'value']",name object hold numer letter valu,named object hold numerical letter value
"It is a sybol or name for a value or number. Example: a used number can stand for any given number, and the programmer can refer to that number by using the variable name.",4.0,1.0,it is a sybol or name for a value or number example a used number can stand for any given number and the programmer can refer to that number by using the variable name,"['sybol', 'name', 'value', 'number', 'example', 'used', 'number', 'stand', 'given', 'number', 'programmer', 'refer', 'number', 'using', 'variable', 'name']",sybol name valu number exampl use number stand given number programm refer number use variabl name,sybol name value number example used number stand given number programmer refer number using variable name
A variable is a location in the computers memory where a value can be stored for use by a program,5.0,1.0,a variable is a location in the computers memory where a value can be stored for use by a program,"['variable', 'location', 'computers', 'memory', 'value', 'stored', 'use', 'program']",variabl locat comput memori valu store use program,variable location computer memory value stored use program
An identifier that holds a location in memory.,4.0,1.0,an identifier that holds a location in memory,"['identifier', 'holds', 'location', 'memory']",identifi hold locat memori,identifier hold location memory
a block of memory that holds a specific type of data,5.0,1.0,a block of memory that holds a specific type of data,"['block', 'memory', 'holds', 'specific', 'type', 'data']",block memori hold specif type data,block memory hold specific type data
It is a location in the computer 's memory where it can be stored for use by a program.,5.0,1.0,it is a location in the computer s memory where it can be stored for use by a program,"['location', 'computer', 'memory', 'stored', 'use', 'program']",locat comput memori store use program,location computer memory stored use program
A location in memory where value can be stored.,5.0,1.0,a location in memory where value can be stored,"['location', 'memory', 'value', 'stored']",locat memori valu store,location memory value stored
a value or word that can assume any of a set of values,3.0,0.0,a value or word that can assume any of a set of values,"['value', 'word', 'assume', 'set', 'values']",valu word assum set valu,value word assume set value
A pointer to a location in memory.,4.0,1.0,a pointer to a location in memory,"['pointer', 'location', 'memory']",pointer locat memori,pointer location memory
"A variable is the memory address for a specific type of stored data, or from a mathematical perspective, a symbol representing a fixed definition with changing values.",5.0,1.0,a variable is the memory address for a specific type of stored data or from a mathematical perspective a symbol representing a fixed definition with changing values,"['variable', 'memory', 'address', 'specific', 'type', 'stored', 'data', 'mathematical', 'perspective', 'symbol', 'representing', 'fixed', 'definition', 'changing', 'values']",variabl memori address specif type store data mathemat perspect symbol repres fix definit chang valu,variable memory address specific type stored data mathematical perspective symbol representing fixed definition changing value
A variable is a value that is subject to change in a computer 's memory that can be used by programs. Programs can change the value of the variable and recall it later or act on it directly.,5.0,1.0,a variable is a value that is subject to change in a computer s memory that can be used by programs programs can change the value of the variable and recall it later or act on it directly,"['variable', 'value', 'subject', 'change', 'computer', 'memory', 'used', 'programs', 'programs', 'change', 'value', 'variable', 'recall', 'later', 'act', 'directly']",variabl valu subject chang comput memori use program program chang valu variabl recal later act directli,variable value subject change computer memory used program program change value variable recall later act directly
a symbol that stands in for a value that may or may not change depending on the program.,4.0,1.0,a symbol that stands in for a value that may or may not change depending on the program,"['symbol', 'stands', 'value', 'may', 'may', 'change', 'depending', 'program']",symbol stand valu may may chang depend program,symbol stand value may may change depending program
"a placeholder to hold information used in the program ... for example: int can hold: 1, 2, 3, 4, 68, 72, 256, etc. float can hold: 1.54, 55.55, 1.24, 5.657, 8.8123, et. char can hold: A, B, C, D, E, F,!, 4, 5, 6, P, etc.",4.5,1.0,a placeholder to hold information used in the program for example int can hold 1 2 3 4 68 72 256 etc float can hold 154 5555 124 5657 88123 et char can hold a b c d e f! 4 5 6 p etc,"['placeholder', 'hold', 'information', 'used', 'program', 'example', 'int', 'hold', '1', '2', '3', '4', '68', '72', '256', 'etc', 'float', 'hold', '154', '5555', '124', '5657', '88123', 'et', 'char', 'hold', 'b', 'c', 'e', 'f', '!', '4', '5', '6', 'p', 'etc']",placehold hold inform use program exampl int hold 1 2 3 4 68 72 256 etc float hold 154 5555 124 5657 88123 et char hold b c e f ! 4 5 6 p etc,placeholder hold information used program example int hold 1 2 3 4 68 72 256 etc float hold 154 5555 124 5657 88123 et char hold b c e f ! 4 5 6 p etc
a stored value used by the program,4.5,1.0,a stored value used by the program,"['stored', 'value', 'used', 'program']",store valu use program,stored value used program
"A way to store different values into the program, such as numbers, words, letters, etc.",4.5,1.0,a way to store different values into the program such as numbers words letters etc,"['way', 'store', 'different', 'values', 'program', 'numbers', 'words', 'letters', 'etc']",way store differ valu program number word letter etc,way store different value program number word letter etc
An object with a location in memory where value can be stored,3.5,0.0,an object with a location in memory where value can be stored,"['object', 'location', 'memory', 'value', 'stored']",object locat memori valu store,object location memory value stored
location in memory where a value can be stored,5.0,1.0,location in memory where a value can be stored,"['location', 'memory', 'value', 'stored']",locat memori valu store,location memory value stored
a variable is an object where data is stored.,3.5,0.0,a variable is an object where data is stored,"['variable', 'object', 'data', 'stored']",variabl object data store,variable object data stored
Location in memory where a value can be stored.,5.0,1.0,location in memory where a value can be stored,"['location', 'memory', 'value', 'stored']",locat memori valu store,location memory value stored
it is a location in memory where value can be stored,5.0,1.0,it is a location in memory where value can be stored,"['location', 'memory', 'value', 'stored']",locat memori valu store,location memory value stored
A variable is the location in a computer 's memory where a value can be stored for use by a program.,5.0,1.0,a variable is the location in a computer s memory where a value can be stored for use by a program,"['variable', 'location', 'computer', 'memory', 'value', 'stored', 'use', 'program']",variabl locat comput memori valu store use program,variable location computer memory value stored use program
A variable is a location in a computers memory where a value can be stored for use by a program.,5.0,1.0,a variable is a location in a computers memory where a value can be stored for use by a program,"['variable', 'location', 'computers', 'memory', 'value', 'stored', 'use', 'program']",variabl locat comput memori valu store use program,variable location computer memory value stored use program
a location in memory where data can be stored and retrieved,5.0,1.0,a location in memory where data can be stored and retrieved,"['location', 'memory', 'data', 'stored', 'retrieved']",locat memori data store retriev,location memory data stored retrieved
"Is a method or identifier I would say, we use to bind a data object to memory location; which is then stored in a location that can be accessed when and manipulated later when the variable name is called.",5.0,1.0,is a method or identifier i would say we use to bind a data object to memory location which is then stored in a location that can be accessed when and manipulated later when the variable name is called,"['method', 'identifier', 'would', 'say', 'use', 'bind', 'data', 'object', 'memory', 'location', 'stored', 'location', 'accessed', 'manipulated', 'later', 'variable', 'name', 'called']",method identifi would say use bind data object memori locat store locat access manipul later variabl name call,method identifier would say use bind data object memory location stored location accessed manipulated later variable name called
"They can be declared right before they are used, but it is a good practice to declare them at the beginning of the program and label what they are food.",2.0,0.0,they can be declared right before they are used but it is a good practice to declare them at the beginning of the program and label what they are food,"['declared', 'right', 'used', 'good', 'practice', 'declare', 'beginning', 'program', 'label', 'food']",declar right use good practic declar begin program label food,declared right used good practice declare beginning program label food
In the Function main before using the variable.,3.0,0.0,in the function main before using the variable,"['function', 'main', 'using', 'variable']",function main use variabl,function main using variable
"Local variables are declared inside the method or function they will be used in at the beginning of the method. Global variables are declared outside of any function or method, generally before functions are defined.",5.0,1.0,local variables are declared inside the method or function they will be used in at the beginning of the method global variables are declared outside of any function or method generally before functions are defined,"['local', 'variables', 'declared', 'inside', 'method', 'function', 'used', 'beginning', 'method', 'global', 'variables', 'declared', 'outside', 'function', 'method', 'generally', 'functions', 'defined']",local variabl declar insid method function use begin method global variabl declar outsid function method gener function defin,local variable declared inside method function used beginning method global variable declared outside function method generally function defined
Variables are declared where ever it is defined either inside a block locally or outside a block globally.,4.5,1.0,variables are declared where ever it is defined either inside a block locally or outside a block globally,"['variables', 'declared', 'ever', 'defined', 'either', 'inside', 'block', 'locally', 'outside', 'block', 'globally']",variabl declar ever defin either insid block local outsid block global,variable declared ever defined either inside block locally outside block globally
Variables are declared before they are actually used. They can be declared before main to use globally,4.0,1.0,variables are declared before they are actually used they can be declared before main to use globally,"['variables', 'declared', 'actually', 'used', 'declared', 'main', 'use', 'globally']",variabl declar actual use declar main use global,variable declared actually used declared main use globally
"For good programing practice they should be declared before main , but should at least be declared before they are used.",2.5,0.0,for good programing practice they should be declared before main but should at least be declared before they are used,"['good', 'programing', 'practice', 'declared', 'main', 'least', 'declared', 'used']",good program practic declar main least declar use,good programing practice declared main least declared used
"They can be declared globally just before the main methodbut also outside of it... or variables can be subject to only the method they are scoped within, but would still be declared at the beginning of that methodbut inside of it.",5.0,1.0,they can be declared globally just before the main methodbut also outside of it or variables can be subject to only the method they are scoped within but would still be declared at the beginning of that methodbut inside of it,"['declared', 'globally', 'main', 'methodbut', 'also', 'outside', 'variables', 'subject', 'method', 'scoped', 'within', 'would', 'still', 'declared', 'beginning', 'methodbut', 'inside']",declar global main methodbut also outsid variabl subject method scope within would still declar begin methodbut insid,declared globally main methodbut also outside variable subject method scoped within would still declared beginning methodbut inside
local variables are declared inside the method while global variables are declared in the body.,5.0,1.0,local variables are declared inside the method while global variables are declared in the body,"['local', 'variables', 'declared', 'inside', 'method', 'global', 'variables', 'declared', 'body']",local variabl declar insid method global variabl declar bodi,local variable declared inside method global variable declared body
Any where in the main function.,2.0,0.0,any where in the main function,"['main', 'function']",main function,main function
"Globally for an entire program, and locally for individual functionsincluding FOR statements",4.5,1.0,globally for an entire program and locally for individual functionsincluding for statements,"['globally', 'entire', 'program', 'locally', 'individual', 'functionsincluding', 'statements']",global entir program local individu functionsinclud statement,globally entire program locally individual functionsincluding statement
They are usually declared at the beginning before they can be used in the program. They always contain a name and a data type.,3.0,0.0,they are usually declared at the beginning before they can be used in the program they always contain a name and a data type,"['usually', 'declared', 'beginning', 'used', 'program', 'always', 'contain', 'name', 'data', 'type']",usual declar begin use program alway contain name data type,usually declared beginning used program always contain name data type
Inside the method.,2.5,0.0,inside the method,"['inside', 'method']",insid method,inside method
at the top,1.5,0.0,at the top,['top'],top,top
Global variables are declared in the body of the code. Local variables are declared in the function they are to be usedunless the function is being passed a variable. Variables should always be declared before use.,5.0,1.0,global variables are declared in the body of the code local variables are declared in the function they are to be usedunless the function is being passed a variable variables should always be declared before use,"['global', 'variables', 'declared', 'body', 'code', 'local', 'variables', 'declared', 'function', 'usedunless', 'function', 'passed', 'variable', 'variables', 'always', 'declared', 'use']",global variabl declar bodi code local variabl declar function usedunless function pass variabl variabl alway declar use,global variable declared body code local variable declared function usedunless function passed variable variable always declared use
Variables are usually declared at the beginning of a module of C plus plus code.,2.5,0.0,variables are usually declared at the beginning of a module of c plus plus code,"['variables', 'usually', 'declared', 'beginning', 'module', 'c', 'plus', 'plus', 'code']",variabl usual declar begin modul c plu plu code,variable usually declared beginning module c plus plus code
"In the main function, usually at the top of code. They can be declared almost anywhere, but must be declared before the code can use or act upon them.",3.5,0.0,in the main function usually at the top of code they can be declared almost anywhere but must be declared before the code can use or act upon them,"['main', 'function', 'usually', 'top', 'code', 'declared', 'almost', 'anywhere', 'must', 'declared', 'code', 'use', 'act', 'upon']",main function usual top code declar almost anywher must declar code use act upon,main function usually top code declared almost anywhere must declared code use act upon
in the very beginning of the program. Before the main starts.,2.0,0.0,in the very beginning of the program before the main starts,"['beginning', 'program', 'main', 'starts']",begin program main start,beginning program main start
"In the declaration of Functions, for statements, and while statements. in the body of If, For, while, do while, statements, in namespaces, headers, etcalmost anywhere.anywhere in the program, as long as it is on it is own line.",2.5,0.0,in the declaration of functions for statements and while statements in the body of if for while do while statements in namespaces headers etcalmost anywhereanywhere in the program as long as it is on it is own line,"['declaration', 'functions', 'statements', 'statements', 'body', 'statements', 'namespaces', 'headers', 'etcalmost', 'anywhereanywhere', 'program', 'long', 'line']",declar function statement statement bodi statement namespac header etcalmost anywhereanywher program long line,declaration function statement statement body statement namespaces header etcalmost anywhereanywhere program long line
After declaration of the variable 's data type.,1.0,0.0,after declaration of the variable s data type,"['declaration', 'variable', 'data', 'type']",declar variabl data type,declaration variable data type
"anywhere in the code, can be at the top, or in the middle of the code, or anywhere.",3.0,0.0,anywhere in the code can be at the top or in the middle of the code or anywhere,"['anywhere', 'code', 'top', 'middle', 'code', 'anywhere']",anywher code top middl code anywher,anywhere code top middle code anywhere
Before they are used.,2.0,0.0,before they are used,['used'],use,used
Anywhere in the same scope before they are used,3.5,0.0,anywhere in the same scope before they are used,"['anywhere', 'scope', 'used']",anywher scope use,anywhere scope used
variables can be declared in classes and methods.,2.5,0.0,variables can be declared in classes and methods,"['variables', 'declared', 'classes', 'methods']",variabl declar class method,variable declared class method
inside the function scope and outside of the function scope in case of global variables,5.0,1.0,inside the function scope and outside of the function scope in case of global variables,"['inside', 'function', 'scope', 'outside', 'function', 'scope', 'case', 'global', 'variables']",insid function scope outsid function scope case global variabl,inside function scope outside function scope case global variable
global variables are declared in the main function local variables are declared in any other function,4.0,1.0,global variables are declared in the main function local variables are declared in any other function,"['global', 'variables', 'declared', 'main', 'function', 'local', 'variables', 'declared', 'function']",global variabl declar main function local variabl declar function,global variable declared main function local variable declared function
"Variables are usually declared at the very beginning of a C plus plus program, but can be declared any in the program as long as they appear before they are called upon.",4.0,1.0,variables are usually declared at the very beginning of a c plus plus program but can be declared any in the program as long as they appear before they are called upon,"['variables', 'usually', 'declared', 'beginning', 'c', 'plus', 'plus', 'program', 'declared', 'program', 'long', 'appear', 'called', 'upon']",variabl usual declar begin c plu plu program declar program long appear call upon,variable usually declared beginning c plus plus program declared program long appear called upon
"Variables are declared in the main function, before any operation is attempted with the variables.",2.0,0.0,variables are declared in the main function before any operation is attempted with the variables,"['variables', 'declared', 'main', 'function', 'operation', 'attempted', 'variables']",variabl declar main function oper attempt variabl,variable declared main function operation attempted variable
"anywhere, but where you declare them depends on where you want them to be accessibletheir scope",4.5,1.0,anywhere but where you declare them depends on where you want them to be accessibletheir scope,"['anywhere', 'declare', 'depends', 'want', 'accessibletheir', 'scope']",anywher declar depend want accessibletheir scope,anywhere declare depends want accessibletheir scope
It depends if it s a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc. which obviously doesn t need to be declared outside the variable seeing how it is used for the function or block its being called for.,4.5,1.0,it depends if it s a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc which obviously doesn t need to be declared outside the variable seeing how it is used for the function or block its being called for,"['depends', 'global', 'declared', 'side', 'source', 'code', 'used', 'every', 'scope', 'however', 'local', 'variable', 'one', 'declared', 'local', 'function', 'etc', 'obviously', 'need', 'declared', 'outside', 'variable', 'seeing', 'used', 'function', 'block', 'called']",depend global declar side sourc code use everi scope howev local variabl one declar local function etc obvious need declar outsid variabl see use function block call,depends global declared side source code used every scope however local variable one declared local function etc obviously need declared outside variable seeing used function block called
The do statement first evaluates the condition and then executes the lines of code in the statement 0 or more times. The do while statement executes the lines of code and then it evaluates the condition. ,4.5,1.0,the do statement first evaluates the condition and then executes the lines of code in the statement 0 or more times the do while statement executes the lines of code and then it evaluates the condition,"['statement', 'first', 'evaluates', 'condition', 'executes', 'lines', 'code', 'statement', '0', 'times', 'statement', 'executes', 'lines', 'code', 'evaluates', 'condition']",statement first evalu condit execut line code statement 0 time statement execut line code evalu condit,statement first evaluates condition executes line code statement 0 time statement executes line code evaluates condition
do ... while statements evaluate whether or not to loop after running the block contained within it at least once. So the main differance is that while statements have a possibility of never being used. Do ... while statements on the other hand are always run at least once before evaluating whether to run again.,5.0,1.0,do while statements evaluate whether or not to loop after running the block contained within it at least once so the main differance is that while statements have a possibility of never being used do while statements on the other hand are always run at least once before evaluating whether to run again,"['statements', 'evaluate', 'whether', 'loop', 'running', 'block', 'contained', 'within', 'least', 'main', 'differance', 'statements', 'possibility', 'never', 'used', 'statements', 'hand', 'always', 'run', 'least', 'evaluating', 'whether', 'run']",statement evalu whether loop run block contain within least main differ statement possibl never use statement hand alway run least evalu whether run,statement evaluate whether loop running block contained within least main differance statement possibility never used statement hand always run least evaluating whether run
"The main difference between a while and a do ... while loop is that the do ... while loop always cycles through the loop at least once, but the while loop does not always do so.",5.0,1.0,the main difference between a while and a do while loop is that the do while loop always cycles through the loop at least once but the while loop does not always do so,"['main', 'difference', 'loop', 'loop', 'always', 'cycles', 'loop', 'least', 'loop', 'always']",main differ loop loop alway cycl loop least loop alway,main difference loop loop always cycle loop least loop always
While loop used to execute a block of code as long as some condition is true. A do ... while loop used to execute a block of code as long as some condition is satisfied. The difference between while and do ... while is while loop tests its condition before the execution of its contents and the do ... while loop tests its condition after the execution of its contents at least once.,5.0,1.0,while loop used to execute a block of code as long as some condition is true a do while loop used to execute a block of code as long as some condition is satisfied the difference between while and do while is while loop tests its condition before the execution of its contents and the do while loop tests its condition after the execution of its contents at least once,"['loop', 'used', 'execute', 'block', 'code', 'long', 'condition', 'true', 'loop', 'used', 'execute', 'block', 'code', 'long', 'condition', 'satisfied', 'difference', 'loop', 'tests', 'condition', 'execution', 'contents', 'loop', 'tests', 'condition', 'execution', 'contents', 'least']",loop use execut block code long condit true loop use execut block code long condit satisfi differ loop test condit execut content loop test condit execut content least,loop used execute block code long condition true loop used execute block code long condition satisfied difference loop test condition execution content loop test condition execution content least
"The termination condition of a do ... while statement is usually at the end of the loop so it will run at least once. As for the while statement, if the condition is false to begin with, then the loop will never run.",5.0,1.0,the termination condition of a do while statement is usually at the end of the loop so it will run at least once as for the while statement if the condition is false to begin with then the loop will never run,"['termination', 'condition', 'statement', 'usually', 'end', 'loop', 'run', 'least', 'statement', 'condition', 'false', 'begin', 'loop', 'never', 'run']",termin condit statement usual end loop run least statement condit fals begin loop never run,termination condition statement usually end loop run least statement condition false begin loop never run
A while loop will check the statement to make sure it is true before executing. A do while loop will execute before checking the statement to see if it should run again.,5.0,1.0,a while loop will check the statement to make sure it is true before executing a do while loop will execute before checking the statement to see if it should run again,"['loop', 'check', 'statement', 'make', 'sure', 'true', 'executing', 'loop', 'execute', 'checking', 'statement', 'see', 'run']",loop check statement make sure true execut loop execut check statement see run,loop check statement make sure true executing loop execute checking statement see run
"A while statement will test the condition of the while loop FIRST there is a chance the loop will never run. A do ... while loop will ALWAYS run once, and then the while test will determine if it will run again.",5.0,1.0,a while statement will test the condition of the while loop first there is a chance the loop will never run a do while loop will always run once and then the while test will determine if it will run again,"['statement', 'test', 'condition', 'loop', 'first', 'chance', 'loop', 'never', 'run', 'loop', 'always', 'run', 'test', 'determine', 'run']",statement test condit loop first chanc loop never run loop alway run test determin run,statement test condition loop first chance loop never run loop always run test determine run
a do while loop always executes once. A while loop 's conditional statement has to be true for it to run.,5.0,1.0,a do while loop always executes once a while loop s conditional statement has to be true for it to run,"['loop', 'always', 'executes', 'loop', 'conditional', 'statement', 'true', 'run']",loop alway execut loop condit statement true run,loop always executes loop conditional statement true run
"WHILE statement-The condition is checked for validity, then is repeated until the conditon is false. Do ... WHILE statement --The code is performed at least once then checked for valid condition. Will continue to",5.0,1.0,while statement-the condition is checked for validity then is repeated until the conditon is false do while statement --the code is performed at least once then checked for valid condition will continue to,"['statement-the', 'condition', 'checked', 'validity', 'repeated', 'conditon', 'false', 'statement', '--', 'code', 'performed', 'least', 'checked', 'valid', 'condition', 'continue']",statement-th condit check valid repeat conditon fals statement -- code perform least check valid condit continu,statement-the condition checked validity repeated conditon false statement -- code performed least checked valid condition continue
"while statements will evaluate the statement BEFORE executing a cycle of the loop, including the first cycle, meaning that a while loop will not always execute. A do ... while will run evaluate the statement AFTER running through a cycle of the loop, ensuring that the loop always executes at least one time.",5.0,1.0,while statements will evaluate the statement before executing a cycle of the loop including the first cycle meaning that a while loop will not always execute a do while will run evaluate the statement after running through a cycle of the loop ensuring that the loop always executes at least one time,"['statements', 'evaluate', 'statement', 'executing', 'cycle', 'loop', 'including', 'first', 'cycle', 'meaning', 'loop', 'always', 'execute', 'run', 'evaluate', 'statement', 'running', 'cycle', 'loop', 'ensuring', 'loop', 'always', 'executes', 'least', 'one', 'time']",statement evalu statement execut cycl loop includ first cycl mean loop alway execut run evalu statement run cycl loop ensur loop alway execut least one time,statement evaluate statement executing cycle loop including first cycle meaning loop always execute run evaluate statement running cycle loop ensuring loop always executes least one time
The main difference between a do and a do ... while statement is in a do ... while statement is the statements in a do block are always executed atleast once. The while statement will only execute if its condition is true.,5.0,1.0,the main difference between a do and a do while statement is in a do while statement is the statements in a do block are always executed atleast once the while statement will only execute if its condition is true,"['main', 'difference', 'statement', 'statement', 'statements', 'block', 'always', 'executed', 'atleast', 'statement', 'execute', 'condition', 'true']",main differ statement statement statement block alway execut atleast statement execut condit true,main difference statement statement statement block always executed atleast statement execute condition true
The loop of a do ... while statement always executes once.,4.5,1.0,the loop of a do while statement always executes once,"['loop', 'statement', 'always', 'executes']",loop statement alway execut,loop statement always executes
"a while statement will only process if the statement is met, while a do ... while will always process once, then only continue if the statement is met.",5.0,1.0,a while statement will only process if the statement is met while a do while will always process once then only continue if the statement is met,"['statement', 'process', 'statement', 'met', 'always', 'process', 'continue', 'statement', 'met']",statement process statement met alway process continu statement met,statement process statement met always process continue statement met
"Do ... while runs the embedded code at least once, the do command does not necessarily",4.0,1.0,do while runs the embedded code at least once the do command does not necessarily,"['runs', 'embedded', 'code', 'least', 'command', 'necessarily']",run embed code least command necessarili,run embedded code least command necessarily
"While tests for true first before running, do ... while runs once first before checking.",5.0,1.0,while tests for true first before running do while runs once first before checking,"['tests', 'true', 'first', 'running', 'runs', 'first', 'checking']",test true first run run first check,test true first running run first checking
A do ... while statement 's body always executes at least once. Where as a while statement will not execute at all unless the condition for the while is true.,5.0,1.0,a do while statement s body always executes at least once where as a while statement will not execute at all unless the condition for the while is true,"['statement', 'body', 'always', 'executes', 'least', 'statement', 'execute', 'unless', 'condition', 'true']",statement bodi alway execut least statement execut unless condit true,statement body always executes least statement execute unless condition true
The statements within the block of the do while loop will always be executed at least once regardless of the conditions. Whereas the while loops may never be executed if the conditions are not met.,5.0,1.0,the statements within the block of the do while loop will always be executed at least once regardless of the conditions whereas the while loops may never be executed if the conditions are not met,"['statements', 'within', 'block', 'loop', 'always', 'executed', 'least', 'regardless', 'conditions', 'whereas', 'loops', 'may', 'never', 'executed', 'conditions', 'met']",statement within block loop alway execut least regardless condit wherea loop may never execut condit met,statement within block loop always executed least regardless condition whereas loop may never executed condition met
"a do ... while loop will always run through once, while an while loop performs a test before running through the loop.",5.0,1.0,a do while loop will always run through once while an while loop performs a test before running through the loop,"['loop', 'always', 'run', 'loop', 'performs', 'test', 'running', 'loop']",loop alway run loop perform test run loop,loop always run loop performs test running loop
A while statement tests the condition before it can start. A do ... while statement loops through once before the condition is tested.,5.0,1.0,a while statement tests the condition before it can start a do while statement loops through once before the condition is tested,"['statement', 'tests', 'condition', 'start', 'statement', 'loops', 'condition', 'tested']",statement test condit start statement loop condit test,statement test condition start statement loop condition tested
"A while loop terminates at the beginning of the loop, a do or while terminates at the end of the loop.",3.5,0.0,a while loop terminates at the beginning of the loop a do or while terminates at the end of the loop,"['loop', 'terminates', 'beginning', 'loop', 'terminates', 'end', 'loop']",loop termin begin loop termin end loop,loop terminates beginning loop terminates end loop
the loop body always executes at least once,3.5,0.0,the loop body always executes at least once,"['loop', 'body', 'always', 'executes', 'least']",loop bodi alway execut least,loop body always executes least
"While loop evaluates its expression at the top of its loop and decides if it needs to execute, and the do-while always executes at least once and then evaluates its expression at the bottom of its loop.",5.0,1.0,while loop evaluates its expression at the top of its loop and decides if it needs to execute and the do-while always executes at least once and then evaluates its expression at the bottom of its loop,"['loop', 'evaluates', 'expression', 'top', 'loop', 'decides', 'needs', 'execute', 'do-while', 'always', 'executes', 'least', 'evaluates', 'expression', 'bottom', 'loop']",loop evalu express top loop decid need execut do-whil alway execut least evalu express bottom loop,loop evaluates expression top loop decides need execute do-while always executes least evaluates expression bottom loop
A do ... while statement will always execute the do piece of code at least once before checking the condition. A while statement will always check the condition first.,5.0,1.0,a do while statement will always execute the do piece of code at least once before checking the condition a while statement will always check the condition first,"['statement', 'always', 'execute', 'piece', 'code', 'least', 'checking', 'condition', 'statement', 'always', 'check', 'condition', 'first']",statement alway execut piec code least check condit statement alway check condit first,statement always execute piece code least checking condition statement always check condition first
"A do-while passes atleast 1 time before checking the condition, however, a while would fail to enter the loop if the condition fails in its first place.",5.0,1.0,a do-while passes atleast 1 time before checking the condition however a while would fail to enter the loop if the condition fails in its first place,"['do-while', 'passes', 'atleast', '1', 'time', 'checking', 'condition', 'however', 'would', 'fail', 'enter', 'loop', 'condition', 'fails', 'first', 'place']",do-whil pass atleast 1 time check condit howev would fail enter loop condit fail first place,do-while pass atleast 1 time checking condition however would fail enter loop condition fails first place
"a while loop checks if the condition is true or not first, if it was true, it excutes the statement. a do .. while loop executes the statement before it checks the condition. if the condition was true it would excute the statement again. so a do ... while loop would excute the statement atleast once.",5.0,1.0,a while loop checks if the condition is true or not first if it was true it excutes the statement a do while loop executes the statement before it checks the condition if the condition was true it would excute the statement again so a do while loop would excute the statement atleast once,"['loop', 'checks', 'condition', 'true', 'first', 'true', 'excutes', 'statement', 'loop', 'executes', 'statement', 'checks', 'condition', 'condition', 'true', 'would', 'excute', 'statement', 'loop', 'would', 'excute', 'statement', 'atleast']",loop check condit true first true excut statement loop execut statement check condit condit true would excut statement loop would excut statement atleast,loop check condition true first true excutes statement loop executes statement check condition condition true would excute statement loop would excute statement atleast
NO ANSWER,0.0,0.0,no answer,['answer'],answer,answer
"A do ... while loop will always execute atleast once, a while loop may never execute depending on teh conditions.",5.0,1.0,a do while loop will always execute atleast once a while loop may never execute depending on teh conditions,"['loop', 'always', 'execute', 'atleast', 'loop', 'may', 'never', 'execute', 'depending', 'teh', 'conditions']",loop alway execut atleast loop may never execut depend teh condit,loop always execute atleast loop may never execute depending teh condition
"a while loop is pre-checkit checks the condition statement before it executes the code within the while blocka do while loop is post-checkit checks the condition AFTER the block executes, it runs at least once no matter what the condition statement is",5.0,1.0,a while loop is pre-checkit checks the condition statement before it executes the code within the while blocka do while loop is post-checkit checks the condition after the block executes it runs at least once no matter what the condition statement is,"['loop', 'pre-checkit', 'checks', 'condition', 'statement', 'executes', 'code', 'within', 'blocka', 'loop', 'post-checkit', 'checks', 'condition', 'block', 'executes', 'runs', 'least', 'matter', 'condition', 'statement']",loop pre-checkit check condit statement execut code within blocka loop post-checkit check condit block execut run least matter condit statement,loop pre-checkit check condition statement executes code within blocka loop post-checkit check condition block executes run least matter condition statement
"What is the main difference between a while and a do ... while statement? The do while construct consists of a block of code and a condition. First, the code within the block is executed, and then the condition is evaluated, this is done until it is proven false. The difference between the While loop is it tests the condition before the code within the block is executed.",5.0,1.0,what is the main difference between a while and a do while statement the do while construct consists of a block of code and a condition first the code within the block is executed and then the condition is evaluated this is done until it is proven false the difference between the while loop is it tests the condition before the code within the block is executed,"['main', 'difference', 'statement', 'construct', 'consists', 'block', 'code', 'condition', 'first', 'code', 'within', 'block', 'executed', 'condition', 'evaluated', 'done', 'proven', 'false', 'difference', 'loop', 'tests', 'condition', 'code', 'within', 'block', 'executed']",main differ statement construct consist block code condit first code within block execut condit evalu done proven fals differ loop test condit code within block execut,main difference statement construct consists block code condition first code within block executed condition evaluated done proven false difference loop test condition code within block executed
"For us it is usually a set, get, and displayMessge or other messages that tell you what properties a class has but does not reveal its implementations. You could have anything you want in your own class definition.",2.0,0.0,for us it is usually a set get and displaymessge or other messages that tell you what properties a class has but does not reveal its implementations you could have anything you want in your own class definition,"['us', 'usually', 'set', 'get', 'displaymessge', 'messages', 'tell', 'properties', 'class', 'reveal', 'implementations', 'could', 'anything', 'want', 'class', 'definition']",us usual set get displaymessg messag tell properti class reveal implement could anyth want class definit,u usually set get displaymessge message tell property class reveal implementation could anything want class definition
The attributes of said class. Also whether or not it is a subclass. Also whether it is public private or protected.,4.0,1.0,the attributes of said class also whether or not it is a subclass also whether it is public private or protected,"['attributes', 'said', 'class', 'also', 'whether', 'subclass', 'also', 'whether', 'public', 'private', 'protected']",attribut said class also whether subclass also whether public privat protect,attribute said class also whether subclass also whether public private protected
Information telling the compiler what data members and member functions belong to the class.,5.0,1.0,information telling the compiler what data members and member functions belong to the class,"['information', 'telling', 'compiler', 'data', 'members', 'member', 'functions', 'belong', 'class']",inform tell compil data member member function belong class,information telling compiler data member member function belong class
"Since class is user defined, the body of the declaration can contain members, that can be either data or function declarations, and optionally access specifiers. Example for specifiers would be public, private, and protected. There is the keyword Class and the Class body is enclosed with brackets .",5.0,1.0,since class is user defined the body of the declaration can contain members that can be either data or function declarations and optionally access specifiers example for specifiers would be public private and protected there is the keyword class and the class body is enclosed with brackets,"['since', 'class', 'user', 'defined', 'body', 'declaration', 'contain', 'members', 'either', 'data', 'function', 'declarations', 'optionally', 'access', 'specifiers', 'example', 'specifiers', 'would', 'public', 'private', 'protected', 'keyword', 'class', 'class', 'body', 'enclosed', 'brackets']",sinc class user defin bodi declar contain member either data function declar option access specifi exampl specifi would public privat protect keyword class class bodi enclos bracket,since class user defined body declaration contain member either data function declaration optionally access specifier example specifier would public private protected keyword class class body enclosed bracket
An object and data.,2.0,0.0,an object and data,"['object', 'data']",object data,object data
"It is specific class name, includes only information defined by that class ... implementation details ... etc.",3.0,0.0,it is specific class name includes only information defined by that class implementation details etc,"['specific', 'class', 'name', 'includes', 'information', 'defined', 'class', 'implementation', 'details', 'etc']",specif class name includ inform defin class implement detail etc,specific class name includes information defined class implementation detail etc
data members and member functions.,5.0,1.0,data members and member functions,"['data', 'members', 'member', 'functions']",data member member function,data member member function
A class definition usually contains the function and its data members,5.0,1.0,a class definition usually contains the function and its data members,"['class', 'definition', 'usually', 'contains', 'function', 'data', 'members']",class definit usual contain function data member,class definition usually contains function data member
Data members and member functions,5.0,1.0,data members and member functions,"['data', 'members', 'member', 'functions']",data member member function,data member member function
member functions,3.5,0.0,member functions,"['member', 'functions']",member function,member function
Member functions and data members belonging to the class.,5.0,1.0,member functions and data members belonging to the class,"['member', 'functions', 'data', 'members', 'belonging', 'class']",member function data member belong class,member function data member belonging class
a public and private area that includes the functions and variables that are used in the class,4.5,1.0,a public and private area that includes the functions and variables that are used in the class,"['public', 'private', 'area', 'includes', 'functions', 'variables', 'used', 'class']",public privat area includ function variabl use class,public private area includes function variable used class
"the keyword class followed by they class name, on the inside you declare public and private declarations of your class",3.5,0.0,the keyword class followed by they class name on the inside you declare public and private declarations of your class,"['keyword', 'class', 'followed', 'class', 'name', 'inside', 'declare', 'public', 'private', 'declarations', 'class']",keyword class follow class name insid declar public privat declar class,keyword class followed class name inside declare public private declaration class
A class definition typically includes function definitions.,3.0,0.0,a class definition typically includes function definitions,"['class', 'definition', 'typically', 'includes', 'function', 'definitions']",class definit typic includ function definit,class definition typically includes function definition
"It begins with Class, followed by the class name, then usually a constructor, data members and member functions that delineates the class is included in any class 's definition.",5.0,1.0,it begins with class followed by the class name then usually a constructor data members and member functions that delineates the class is included in any class s definition,"['begins', 'class', 'followed', 'class', 'name', 'usually', 'constructor', 'data', 'members', 'member', 'functions', 'delineates', 'class', 'included', 'class', 'definition']",begin class follow class name usual constructor data member member function delin class includ class definit,begin class followed class name usually constructor data member member function delineates class included class definition
the data and methods,4.5,1.0,the data and methods,"['data', 'methods']",data method,data method
"A constructor, functions, and variables that are accessible to by that class, and possibly other classes depending on how they are done.",4.5,1.0,a constructor functions and variables that are accessible to by that class and possibly other classes depending on how they are done,"['constructor', 'functions', 'variables', 'accessible', 'class', 'possibly', 'classes', 'depending', 'done']",constructor function variabl access class possibl class depend done,constructor function variable accessible class possibly class depending done
Member functions and data members.,5.0,1.0,member functions and data members,"['member', 'functions', 'data', 'members']",member function data member,member function data member
"public section and private section, and there must be a semicolon to set the end",2.5,0.0,public section and private section and there must be a semicolon to set the end,"['public', 'section', 'private', 'section', 'must', 'semicolon', 'set', 'end']",public section privat section must semicolon set end,public section private section must semicolon set end
member funtions and data members,5.0,1.0,member funtions and data members,"['member', 'funtions', 'data', 'members']",member funtion data member,member funtions data member
Data members and Member functions,5.0,1.0,data members and member functions,"['data', 'members', 'member', 'functions']",data member member function,data member member function
data members and member functions,5.0,1.0,data members and member functions,"['data', 'members', 'member', 'functions']",data member member function,data member member function
"the class name and its public data types such as constructors, methods, functions.",3.5,0.0,the class name and its public data types such as constructors methods functions,"['class', 'name', 'public', 'data', 'types', 'constructors', 'methods', 'functions']",class name public data type constructor method function,class name public data type constructor method function
"a constructor and several data members, and at least one public data member or method",4.5,1.0,a constructor and several data members and at least one public data member or method,"['constructor', 'several', 'data', 'members', 'least', 'one', 'public', 'data', 'member', 'method']",constructor sever data member least one public data member method,constructor several data member least one public data member method
"class name, two curly prenthesis, public and private",2.0,0.0,class name two curly prenthesis public and private,"['class', 'name', 'two', 'curly', 'prenthesis', 'public', 'private']",class name two curli prenthesi public privat,class name two curly prenthesis public private
data members and member functions,5.0,1.0,data members and member functions,"['data', 'members', 'member', 'functions']",data member member function,data member member function
Data and functions,4.5,1.0,data and functions,"['data', 'functions']",data function,data function
functions and data members that belong to the class,5.0,1.0,functions and data members that belong to the class,"['functions', 'data', 'members', 'belong', 'class']",function data member belong class,function data member belong class
"class variables, function definitions for the class",5.0,1.0,class variables function definitions for the class,"['class', 'variables', 'function', 'definitions', 'class']",class variabl function definit class,class variable function definition class
"A class is an expanded concept of a data structure, it holds both the data and the functions being executed",4.5,1.0,a class is an expanded concept of a data structure it holds both the data and the functions being executed,"['class', 'expanded', 'concept', 'data', 'structure', 'holds', 'data', 'functions', 'executed']",class expand concept data structur hold data function execut,class expanded concept data structure hold data function executed
Data members are the data components of a particular class. A member function are the functioning components of the class.,3.0,0.0,data members are the data components of a particular class a member function are the functioning components of the class,"['data', 'members', 'data', 'components', 'particular', 'class', 'member', 'function', 'functioning', 'components', 'class']",data member data compon particular class member function function compon class,data member data component particular class member function functioning component class
A field variable is a variable that is declared as a member of a class. A local variable is avariable that isdeclared local to a method.,2.5,0.0,a field variable is a variable that is declared as a member of a class a local variable is avariable that isdeclared local to a method,"['field', 'variable', 'variable', 'declared', 'member', 'class', 'local', 'variable', 'avariable', 'isdeclared', 'local', 'method']",field variabl variabl declar member class local variabl avari isdeclar local method,field variable variable declared member class local variable avariable isdeclared local method
"Data members are declared inside the class, but outside of any member functions. Unlike with local variables, each object of the class keeps its own copy of the data members stored in memory.",4.5,1.0,data members are declared inside the class but outside of any member functions unlike with local variables each object of the class keeps its own copy of the data members stored in memory,"['data', 'members', 'declared', 'inside', 'class', 'outside', 'member', 'functions', 'unlike', 'local', 'variables', 'object', 'class', 'keeps', 'copy', 'data', 'members', 'stored', 'memory']",data member declar insid class outsid member function unlik local variabl object class keep copi data member store memori,data member declared inside class outside member function unlike local variable object class keep copy data member stored memory
Data member are variables that represent an attribute in a class definition. Local variables declared in a function body cannot be used outside of that function body. When a function terminates the values of its local variables are lost.,4.5,1.0,data member are variables that represent an attribute in a class definition local variables declared in a function body cannot be used outside of that function body when a function terminates the values of its local variables are lost,"['data', 'member', 'variables', 'represent', 'attribute', 'class', 'definition', 'local', 'variables', 'declared', 'function', 'body', 'used', 'outside', 'function', 'body', 'function', 'terminates', 'values', 'local', 'variables', 'lost']",data member variabl repres attribut class definit local variabl declar function bodi use outsid function bodi function termin valu local variabl lost,data member variable represent attribute class definition local variable declared function body used outside function body function terminates value local variable lost
A local variable cannot be accessed outside the function in which it is declared. Data members normally are private. Variables of functions declared private are accessible only to member functions of the class in which they are declared.,5.0,1.0,a local variable cannot be accessed outside the function in which it is declared data members normally are private variables of functions declared private are accessible only to member functions of the class in which they are declared,"['local', 'variable', 'accessed', 'outside', 'function', 'declared', 'data', 'members', 'normally', 'private', 'variables', 'functions', 'declared', 'private', 'accessible', 'member', 'functions', 'class', 'declared']",local variabl access outsid function declar data member normal privat variabl function declar privat access member function class declar,local variable accessed outside function declared data member normally private variable function declared private accessible member function class declared
"A data member is part of a C plus plus class or structure that stores data of a certain type ... A local variable inside a member function is only available inside that function, and can be used to derive a desired outcome.",4.5,1.0,a data member is part of a c plus plus class or structure that stores data of a certain type a local variable inside a member function is only available inside that function and can be used to derive a desired outcome,"['data', 'member', 'part', 'c', 'plus', 'plus', 'class', 'structure', 'stores', 'data', 'certain', 'type', 'local', 'variable', 'inside', 'member', 'function', 'available', 'inside', 'function', 'used', 'derive', 'desired', 'outcome']",data member part c plu plu class structur store data certain type local variabl insid member function avail insid function use deriv desir outcom,data member part c plus plus class structure store data certain type local variable inside member function available inside function used derive desired outcome
A local variable can only be accessed within the scope of its declaration.,3.5,0.0,a local variable can only be accessed within the scope of its declaration,"['local', 'variable', 'accessed', 'within', 'scope', 'declaration']",local variabl access within scope declar,local variable accessed within scope declaration
Data members are the atributes of the function and can be used outside the function. Local variable can not be used outside the function and the value is lost after the function terminates.,4.5,1.0,data members are the atributes of the function and can be used outside the function local variable can not be used outside the function and the value is lost after the function terminates,"['data', 'members', 'atributes', 'function', 'used', 'outside', 'function', 'local', 'variable', 'used', 'outside', 'function', 'value', 'lost', 'function', 'terminates']",data member atribut function use outsid function local variabl use outsid function valu lost function termin,data member atributes function used outside function local variable used outside function value lost function terminates
"data members are permanent attributes of the class, local variables inside a member function are lost when the scope of the member function ends.",4.0,1.0,data members are permanent attributes of the class local variables inside a member function are lost when the scope of the member function ends,"['data', 'members', 'permanent', 'attributes', 'class', 'local', 'variables', 'inside', 'member', 'function', 'lost', 'scope', 'member', 'function', 'ends']",data member perman attribut class local variabl insid member function lost scope member function end,data member permanent attribute class local variable inside member function lost scope member function end
data members are declared in a class definition but outside the bodies of a class 's member-function definitions. Local variables are declared in a function definition 's body,4.0,1.0,data members are declared in a class definition but outside the bodies of a class s member-function definitions local variables are declared in a function definition s body,"['data', 'members', 'declared', 'class', 'definition', 'outside', 'bodies', 'class', 'member-function', 'definitions', 'local', 'variables', 'declared', 'function', 'definition', 'body']",data member declar class definit outsid bodi class member-funct definit local variabl declar function definit bodi,data member declared class definition outside body class member-function definition local variable declared function definition body
"A data member is globally accessible, while a local variable is only accessible inside the member function.",4.5,1.0,a data member is globally accessible while a local variable is only accessible inside the member function,"['data', 'member', 'globally', 'accessible', 'local', 'variable', 'accessible', 'inside', 'member', 'function']",data member global access local variabl access insid member function,data member globally accessible local variable accessible inside member function
A variable inside a member function can only be accessed inside that member and a data member can be accessed throughought the program.,5.0,1.0,a variable inside a member function can only be accessed inside that member and a data member can be accessed throughought the program,"['variable', 'inside', 'member', 'function', 'accessed', 'inside', 'member', 'data', 'member', 'accessed', 'throughought', 'program']",variabl insid member function access insid member data member access throughought program,variable inside member function accessed inside member data member accessed throughought program
Local variables are used only within the scope of its declaration,4.5,1.0,local variables are used only within the scope of its declaration,"['local', 'variables', 'used', 'within', 'scope', 'declaration']",local variabl use within scope declar,local variable used within scope declaration
"A data member is a more general term describing all objects instantiated within a member function. Local in local variables refers more to the scope of a variable, which may be located in anything from a control structure to a class. Local variables whose scope are in a member function are the same as data members of member functions.",2.0,0.0,a data member is a more general term describing all objects instantiated within a member function local in local variables refers more to the scope of a variable which may be located in anything from a control structure to a class local variables whose scope are in a member function are the same as data members of member functions,"['data', 'member', 'general', 'term', 'describing', 'objects', 'instantiated', 'within', 'member', 'function', 'local', 'local', 'variables', 'refers', 'scope', 'variable', 'may', 'located', 'anything', 'control', 'structure', 'class', 'local', 'variables', 'whose', 'scope', 'member', 'function', 'data', 'members', 'member', 'functions']",data member gener term describ object instanti within member function local local variabl refer scope variabl may locat anyth control structur class local variabl whose scope member function data member member function,data member general term describing object instantiated within member function local local variable refers scope variable may located anything control structure class local variable whose scope member function data member member function
A data member exists permanently in that program 's memory as long as it is run. A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run.,3.5,0.0,a data member exists permanently in that program s memory as long as it is run a local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run,"['data', 'member', 'exists', 'permanently', 'program', 'memory', 'long', 'run', 'local', 'variable', 'inside', 'member', 'function', 'temporal', 'used', 'operate', 'function', 'exists', 'long', 'function', 'run']",data member exist perman program memori long run local variabl insid member function tempor use oper function exist long function run,data member exists permanently program memory long run local variable inside member function temporal used operate function exists long function run
"local variables can only be used within the function, where as data members can be set to public access and can be used throughout",5.0,1.0,local variables can only be used within the function where as data members can be set to public access and can be used throughout,"['local', 'variables', 'used', 'within', 'function', 'data', 'members', 'set', 'public', 'access', 'used', 'throughout']",local variabl use within function data member set public access use throughout,local variable used within function data member set public access used throughout
"The local variable is lost once it exits the block of code, while the data member is not.",4.5,1.0,the local variable is lost once it exits the block of code while the data member is not,"['local', 'variable', 'lost', 'exits', 'block', 'code', 'data', 'member']",local variabl lost exit block code data member,local variable lost exit block code data member
Every member function can access and modify a data member. A local variable can only be used from the line of declaration to the next closing before it is lost from memory.,4.5,1.0,every member function can access and modify a data member a local variable can only be used from the line of declaration to the next closing before it is lost from memory,"['every', 'member', 'function', 'access', 'modify', 'data', 'member', 'local', 'variable', 'used', 'line', 'declaration', 'next', 'closing', 'lost', 'memory']",everi member function access modifi data member local variabl use line declar next close lost memori,every member function access modify data member local variable used line declaration next closing lost memory
"data member is accessible to all functions in the class, where local variable is only available to the member function and value is lost when function closes",5.0,1.0,data member is accessible to all functions in the class where local variable is only available to the member function and value is lost when function closes,"['data', 'member', 'accessible', 'functions', 'class', 'local', 'variable', 'available', 'member', 'function', 'value', 'lost', 'function', 'closes']",data member access function class local variabl avail member function valu lost function close,data member accessible function class local variable available member function value lost function close
Data members are variables that are declared inside the class definition but outside of the bodies of the class member functions. Local variables can only be used within the function declaration.,4.5,1.0,data members are variables that are declared inside the class definition but outside of the bodies of the class member functions local variables can only be used within the function declaration,"['data', 'members', 'variables', 'declared', 'inside', 'class', 'definition', 'outside', 'bodies', 'class', 'member', 'functions', 'local', 'variables', 'used', 'within', 'function', 'declaration']",data member variabl declar insid class definit outsid bodi class member function local variabl use within function declar,data member variable declared inside class definition outside body class member function local variable used within function declaration
"The data member can be accessed outside of the class, whereas the local variable cannot.",4.0,1.0,the data member can be accessed outside of the class whereas the local variable cannot,"['data', 'member', 'accessed', 'outside', 'class', 'whereas', 'local', 'variable']",data member access outsid class wherea local variabl,data member accessed outside class whereas local variable
"Local variables cannot be used outside of that function body. When a function terminates the values of its local variables are lost. Where as data members are variables in a class definition, and they exist throughout the life of the object.",5.0,1.0,local variables cannot be used outside of that function body when a function terminates the values of its local variables are lost where as data members are variables in a class definition and they exist throughout the life of the object,"['local', 'variables', 'used', 'outside', 'function', 'body', 'function', 'terminates', 'values', 'local', 'variables', 'lost', 'data', 'members', 'variables', 'class', 'definition', 'exist', 'throughout', 'life', 'object']",local variabl use outsid function bodi function termin valu local variabl lost data member variabl class definit exist throughout life object,local variable used outside function body function terminates value local variable lost data member variable class definition exist throughout life object
a local variable in a member function has to be static. a data member can change its value freely.,2.0,0.0,a local variable in a member function has to be static a data member can change its value freely,"['local', 'variable', 'member', 'function', 'static', 'data', 'member', 'change', 'value', 'freely']",local variabl member function static data member chang valu freeli,local variable member function static data member change value freely
"a local variable is only useable within the function it is defined, whereas a data member is available to any method within its class",5.0,1.0,a local variable is only useable within the function it is defined whereas a data member is available to any method within its class,"['local', 'variable', 'useable', 'within', 'function', 'defined', 'whereas', 'data', 'member', 'available', 'method', 'within', 'class']",local variabl useabl within function defin wherea data member avail method within class,local variable useable within function defined whereas data member available method within class
Variable declared in a function defination 's body cannot be used outside of that function. Data members accessible only to member function of that class.,5.0,1.0,variable declared in a function defination s body cannot be used outside of that function data members accessible only to member function of that class,"['variable', 'declared', 'function', 'defination', 'body', 'used', 'outside', 'function', 'data', 'members', 'accessible', 'member', 'function', 'class']",variabl declar function defin bodi use outsid function data member access member function class,variable declared function defination body used outside function data member accessible member function class
"data members local variables are declared in a function definition s body. they Cannot be used outside of that function body. When a function terminates, the values of its local variables are lost.",4.5,1.0,data members local variables are declared in a function definition s body they cannot be used outside of that function body when a function terminates the values of its local variables are lost,"['data', 'members', 'local', 'variables', 'declared', 'function', 'definition', 'body', 'used', 'outside', 'function', 'body', 'function', 'terminates', 'values', 'local', 'variables', 'lost']",data member local variabl declar function definit bodi use outsid function bodi function termin valu local variabl lost,data member local variable declared function definition body used outside function body function terminates value local variable lost
local variable is only available in the function.,4.5,1.0,local variable is only available in the function,"['local', 'variable', 'available', 'function']",local variabl avail function,local variable available function
local variables are accessed inside member functions only while data members can be accessed throughout the class,4.5,1.0,local variables are accessed inside member functions only while data members can be accessed throughout the class,"['local', 'variables', 'accessed', 'inside', 'member', 'functions', 'data', 'members', 'accessed', 'throughout', 'class']",local variabl access insid member function data member access throughout class,local variable accessed inside member function data member accessed throughout class
"A data member is accessible anywhere in the class, while i local variable in a member function is only accessible in that particular function, and is freed after the function exits.",5.0,1.0,a data member is accessible anywhere in the class while i local variable in a member function is only accessible in that particular function and is freed after the function exits,"['data', 'member', 'accessible', 'anywhere', 'class', 'local', 'variable', 'member', 'function', 'accessible', 'particular', 'function', 'freed', 'function', 'exits']",data member access anywher class local variabl member function access particular function freed function exit,data member accessible anywhere class local variable member function accessible particular function freed function exit
"a Data member is encapsulated within a class or object, it is static and can be shared by all instances of that class. however local variable 's are only used from the function or block in which it is declared and not the whole class. other wise they would be called global variables.",4.0,1.0,a data member is encapsulated within a class or object it is static and can be shared by all instances of that class however local variable s are only used from the function or block in which it is declared and not the whole class other wise they would be called global variables,"['data', 'member', 'encapsulated', 'within', 'class', 'object', 'static', 'shared', 'instances', 'class', 'however', 'local', 'variable', 'used', 'function', 'block', 'declared', 'whole', 'class', 'wise', 'would', 'called', 'global', 'variables']",data member encapsul within class object static share instanc class howev local variabl use function block declar whole class wise would call global variabl,data member encapsulated within class object static shared instance class however local variable used function block declared whole class wise would called global variable
A constructor initializes an object or objects of a class. A function of a class performs a task such as display a line of text or do some kind of mathematical operations.,2.5,0.0,a constructor initializes an object or objects of a class a function of a class performs a task such as display a line of text or do some kind of mathematical operations,"['constructor', 'initializes', 'object', 'objects', 'class', 'function', 'class', 'performs', 'task', 'display', 'line', 'text', 'kind', 'mathematical', 'operations']",constructor initi object object class function class perform task display line text kind mathemat oper,constructor initializes object object class function class performs task display line text kind mathematical operation
"all constructors are functions but not all functions are constructors. Also functions can have nearly infinite purposes, while constructors always create an instance of whichever class you are using. You can change how a constructor does something but not what it does. With functions you can change not only the how but also the what.",3.0,0.0,all constructors are functions but not all functions are constructors also functions can have nearly infinite purposes while constructors always create an instance of whichever class you are using you can change how a constructor does something but not what it does with functions you can change not only the how but also the what,"['constructors', 'functions', 'functions', 'constructors', 'also', 'functions', 'nearly', 'infinite', 'purposes', 'constructors', 'always', 'create', 'instance', 'whichever', 'class', 'using', 'change', 'constructor', 'something', 'functions', 'change', 'also']",constructor function function constructor also function nearli infinit purpos constructor alway creat instanc whichev class use chang constructor someth function chang also,constructor function function constructor also function nearly infinite purpose constructor always create instance whichever class using change constructor something function change also
"Unlike regular functions, constructors are only used to initialize an object s data when it is created. Constructors must also be given the same name as the class and cannot return any values.",5.0,1.0,unlike regular functions constructors are only used to initialize an object s data when it is created constructors must also be given the same name as the class and cannot return any values,"['unlike', 'regular', 'functions', 'constructors', 'used', 'initialize', 'object', 'data', 'created', 'constructors', 'must', 'also', 'given', 'name', 'class', 'return', 'values']",unlik regular function constructor use initi object data creat constructor must also given name class return valu,unlike regular function constructor used initialize object data created constructor must also given name class return value
"A constructor typically used to intialize data members and allocate resources, for instance memory, files, etc. Also a constructor cannot return values. Functions are operations that maybe globally defined.",4.5,1.0,a constructor typically used to intialize data members and allocate resources for instance memory files etc also a constructor cannot return values functions are operations that maybe globally defined,"['constructor', 'typically', 'used', 'intialize', 'data', 'members', 'allocate', 'resources', 'instance', 'memory', 'files', 'etc', 'also', 'constructor', 'return', 'values', 'functions', 'operations', 'maybe', 'globally', 'defined']",constructor typic use intial data member alloc resourc instanc memori file etc also constructor return valu function oper mayb global defin,constructor typically used intialize data member allocate resource instance memory file etc also constructor return value function operation maybe globally defined
"Constructors cannot return values, so they cannot specify a return type. Normally, constructors are declared public.",4.0,1.0,constructors cannot return values so they cannot specify a return type normally constructors are declared public,"['constructors', 'return', 'values', 'specify', 'return', 'type', 'normally', 'constructors', 'declared', 'public']",constructor return valu specifi return type normal constructor declar public,constructor return value specify return type normally constructor declared public
A constructor is a method that starts new instances of a class.Example: Employee employee 1parametersstarts a new instance of object of type Employee. A function is simply a module within a program that completes its single desired task.,3.0,0.0,a constructor is a method that starts new instances of a classexample employee employee 1parametersstarts a new instance of object of type employee a function is simply a module within a program that completes its single desired task,"['constructor', 'method', 'starts', 'new', 'instances', 'classexample', 'employee', 'employee', '1parametersstarts', 'new', 'instance', 'object', 'type', 'employee', 'function', 'simply', 'module', 'within', 'program', 'completes', 'single', 'desired', 'task']",constructor method start new instanc classexampl employe employe 1parametersstart new instanc object type employe function simpli modul within program complet singl desir task,constructor method start new instance classexample employee employee 1parametersstarts new instance object type employee function simply module within program completes single desired task
A constructor is called whenever a new object of that class is made.,3.5,0.0,a constructor is called whenever a new object of that class is made,"['constructor', 'called', 'whenever', 'new', 'object', 'class', 'made']",constructor call whenev new object class made,constructor called whenever new object class made
A constructor does not return any date and has no return type. Functions can return date or not return data can have a return type.,4.0,1.0,a constructor does not return any date and has no return type functions can return date or not return data can have a return type,"['constructor', 'return', 'date', 'return', 'type', 'functions', 'return', 'date', 'return', 'data', 'return', 'type']",constructor return date return type function return date return data return type,constructor return date return type function return date return data return type
"A constructor is automatically called whenever an instance of a class is created, a function must be explicitly called by the user.",4.0,1.0,a constructor is automatically called whenever an instance of a class is created a function must be explicitly called by the user,"['constructor', 'automatically', 'called', 'whenever', 'instance', 'class', 'created', 'function', 'must', 'explicitly', 'called', 'user']",constructor automat call whenev instanc class creat function must explicitli call user,constructor automatically called whenever instance class created function must explicitly called user
"constructors cannot return values, so they cannot specify a return type like functions can.",4.0,1.0,constructors cannot return values so they cannot specify a return type like functions can,"['constructors', 'return', 'values', 'specify', 'return', 'type', 'like', 'functions']",constructor return valu specifi return type like function,constructor return value specify return type like function
A constructor is a function used to initialize an object 's data when it is created.,3.5,0.0,a constructor is a function used to initialize an object s data when it is created,"['constructor', 'function', 'used', 'initialize', 'object', 'data', 'created']",constructor function use initi object data creat,constructor function used initialize object data created
a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data.,2.5,0.0,a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data,"['constructor', 'initialises', 'everything', 'nothing', 'left', 'empty', 'random', 'varioubles', 'function', 'modifies', 'variables', 'data']",constructor initialis everyth noth left empti random varioubl function modifi variabl data,constructor initialises everything nothing left empty random varioubles function modifies variable data
A constructor initialized values at the execution of its instantiation. It provides default values.,3.5,0.0,a constructor initialized values at the execution of its instantiation it provides default values,"['constructor', 'initialized', 'values', 'execution', 'instantiation', 'provides', 'default', 'values']",constructor initi valu execut instanti provid default valu,constructor initialized value execution instantiation provides default value
"A constructor sets up the default values of variables when an object is instantiated, whereas a function allows interaction with that object.",4.0,1.0,a constructor sets up the default values of variables when an object is instantiated whereas a function allows interaction with that object,"['constructor', 'sets', 'default', 'values', 'variables', 'object', 'instantiated', 'whereas', 'function', 'allows', 'interaction', 'object']",constructor set default valu variabl object instanti wherea function allow interact object,constructor set default value variable object instantiated whereas function allows interaction object
"A constructor is used to create an object that can be employed in the main function of a program. This may or may not execute code along with it. A function is a set of code that executes when called, but does not create a new object.",3.0,0.0,a constructor is used to create an object that can be employed in the main function of a program this may or may not execute code along with it a function is a set of code that executes when called but does not create a new object,"['constructor', 'used', 'create', 'object', 'employed', 'main', 'function', 'program', 'may', 'may', 'execute', 'code', 'along', 'function', 'set', 'code', 'executes', 'called', 'create', 'new', 'object']",constructor use creat object employ main function program may may execut code along function set code execut call creat new object,constructor used create object employed main function program may may execute code along function set code executes called create new object
a constructor initializes data members but the functions actually perform tasks. Constructors cant return values either.,4.0,1.0,a constructor initializes data members but the functions actually perform tasks constructors cant return values either,"['constructor', 'initializes', 'data', 'members', 'functions', 'actually', 'perform', 'tasks', 'constructors', 'cant', 'return', 'values', 'either']",constructor initi data member function actual perform task constructor cant return valu either,constructor initializes data member function actually perform task constructor cant return value either
"a constructor does not need a type, and it is used to initialize the variables.",3.5,0.0,a constructor does not need a type and it is used to initialize the variables,"['constructor', 'need', 'type', 'used', 'initialize', 'variables']",constructor need type use initi variabl,constructor need type used initialize variable
Constructors do not have a return type.,4.0,1.0,constructors do not have a return type,"['constructors', 'return', 'type']",constructor return type,constructor return type
constructor creates the class object into memory where functions perform actions against that object,3.0,0.0,constructor creates the class object into memory where functions perform actions against that object,"['constructor', 'creates', 'class', 'object', 'memory', 'functions', 'perform', 'actions', 'object']",constructor creat class object memori function perform action object,constructor creates class object memory function perform action object
constructors cannot return values,4.0,1.0,constructors cannot return values,"['constructors', 'return', 'values']",constructor return valu,constructor return value
A constructor initializes values and a function usual performs some sort of operation.,2.5,0.0,a constructor initializes values and a function usual performs some sort of operation,"['constructor', 'initializes', 'values', 'function', 'usual', 'performs', 'sort', 'operation']",constructor initi valu function usual perform sort oper,constructor initializes value function usual performs sort operation
A constructor is a function used to initialize an object 's data when it is created. It is call is made implicitly when the object is created and must be defined with the same name as the class. Constructor also cannot return a value like a function can.,5.0,1.0,a constructor is a function used to initialize an object s data when it is created it is call is made implicitly when the object is created and must be defined with the same name as the class constructor also cannot return a value like a function can,"['constructor', 'function', 'used', 'initialize', 'object', 'data', 'created', 'call', 'made', 'implicitly', 'object', 'created', 'must', 'defined', 'name', 'class', 'constructor', 'also', 'return', 'value', 'like', 'function']",constructor function use initi object data creat call made implicitli object creat must defin name class constructor also return valu like function,constructor function used initialize object data created call made implicitly object created must defined name class constructor also return value like function
A constructor is used to create an instance of a class and has the same name as that class. A function cannot have the same name as a class and computes data.,4.0,1.0,a constructor is used to create an instance of a class and has the same name as that class a function cannot have the same name as a class and computes data,"['constructor', 'used', 'create', 'instance', 'class', 'name', 'class', 'function', 'name', 'class', 'computes', 'data']",constructor use creat instanc class name class function name class comput data,constructor used create instance class name class function name class computes data
"a constructor is a function that initializes a class instance, a function performs whatever task it is written for",3.0,0.0,a constructor is a function that initializes a class instance a function performs whatever task it is written for,"['constructor', 'function', 'initializes', 'class', 'instance', 'function', 'performs', 'whatever', 'task', 'written']",constructor function initi class instanc function perform whatev task written,constructor function initializes class instance function performs whatever task written
"A constructor cannot return values, not even void, but function get a return value.",4.0,1.0,a constructor cannot return values not even void but function get a return value,"['constructor', 'return', 'values', 'even', 'void', 'function', 'get', 'return', 'value']",constructor return valu even void function get return valu,constructor return value even void function get return value
"a constructor cannot return values, its not even void. it is used to initialize an object 's data when it is created. whereas, a function is created to do a specific task, and it can return values.",5.0,1.0,a constructor cannot return values its not even void it is used to initialize an object s data when it is created whereas a function is created to do a specific task and it can return values,"['constructor', 'return', 'values', 'even', 'void', 'used', 'initialize', 'object', 'data', 'created', 'whereas', 'function', 'created', 'specific', 'task', 'return', 'values']",constructor return valu even void use initi object data creat wherea function creat specif task return valu,constructor return value even void used initialize object data created whereas function created specific task return value
A constructor initializes an object. A function is part of an object.,2.5,0.0,a constructor initializes an object a function is part of an object,"['constructor', 'initializes', 'object', 'function', 'part', 'object']",constructor initi object function part object,constructor initializes object function part object
constructors initialize the data that is then used in the calculations of a function,2.5,0.0,constructors initialize the data that is then used in the calculations of a function,"['constructors', 'initialize', 'data', 'used', 'calculations', 'function']",constructor initi data use calcul function,constructor initialize data used calculation function
"a constructor is called when the class is created, a function can be called any time.",3.5,0.0,a constructor is called when the class is created a function can be called any time,"['constructor', 'called', 'class', 'created', 'function', 'called', 'time']",constructor call class creat function call time,constructor called class created function called time
"constructor is a special block of statements called when an object is created, either when it is declared statically or constructed on the stack. However a function is a portion of code within a larger program, which performs a specific task and independent to the rest of the code.",4.0,1.0,constructor is a special block of statements called when an object is created either when it is declared statically or constructed on the stack however a function is a portion of code within a larger program which performs a specific task and independent to the rest of the code,"['constructor', 'special', 'block', 'statements', 'called', 'object', 'created', 'either', 'declared', 'statically', 'constructed', 'stack', 'however', 'function', 'portion', 'code', 'within', 'larger', 'program', 'performs', 'specific', 'task', 'independent', 'rest', 'code']",constructor special block statement call object creat either declar static construct stack howev function portion code within larger program perform specif task independ rest code,constructor special block statement called object created either declared statically constructed stack however function portion code within larger program performs specific task independent rest code
The compiler creates a default constructor when we do not define one in our class file,5.0,1.0,the compiler creates a default constructor when we do not define one in our class file,"['compiler', 'creates', 'default', 'constructor', 'define', 'one', 'class', 'file']",compil creat default constructor defin one class file,compiler creates default constructor define one class file
during compilation,3.5,0.0,during compilation,['compilation'],compil,compilation
When the class does not explicitly include a constructor.,5.0,1.0,when the class does not explicitly include a constructor,"['class', 'explicitly', 'include', 'constructor']",class explicitli includ constructor,class explicitly include constructor
When no parameters are set is when a default constructor is used.,3.0,0.0,when no parameters are set is when a default constructor is used,"['parameters', 'set', 'default', 'constructor', 'used']",paramet set default constructor use,parameter set default constructor used
When a class does not explicitly include a constructor.,5.0,1.0,when a class does not explicitly include a constructor,"['class', 'explicitly', 'include', 'constructor']",class explicitli includ constructor,class explicitly include constructor
When there are no arguments passed.,1.5,0.0,when there are no arguments passed,"['arguments', 'passed']",argument pass,argument passed
when there is not one already for a specific class,5.0,1.0,when there is not one already for a specific class,"['one', 'already', 'specific', 'class']",one alreadi specif class,one already specific class
When it the programs compiles,3.5,0.0,when it the programs compiles,"['programs', 'compiles']",program compil,program compiles
when a constructor is not provided by the programmer of the class,5.0,1.0,when a constructor is not provided by the programmer of the class,"['constructor', 'provided', 'programmer', 'class']",constructor provid programm class,constructor provided programmer class
In any class that does not explicitly include a constructor.,5.0,1.0,in any class that does not explicitly include a constructor,"['class', 'explicitly', 'include', 'constructor']",class explicitli includ constructor,class explicitly include constructor
Before the main function of the code.,1.0,0.0,before the main function of the code,"['main', 'function', 'code']",main function code,main function code
whenevery you dont specifiy your own,5.0,1.0,whenevery you dont specifiy your own,"['whenevery', 'dont', 'specifiy']",wheneveri dont specifiy,whenevery dont specifiy
When non are provided,5.0,1.0,when non are provided,"['non', 'provided']",non provid,non provided
C plus plus will create a default constructor when no other constructor is present.,5.0,1.0,c plus plus will create a default constructor when no other constructor is present,"['c', 'plus', 'plus', 'create', 'default', 'constructor', 'constructor', 'present']",c plu plu creat default constructor constructor present,c plus plus create default constructor constructor present
"When no constructor was specified in the constructor 's class, but the class is instantiated in a program.",5.0,1.0,when no constructor was specified in the constructor s class but the class is instantiated in a program,"['constructor', 'specified', 'constructor', 'class', 'class', 'instantiated', 'program']",constructor specifi constructor class class instanti program,constructor specified constructor class class instantiated program
"When no constructor exists when one is needed, a parameterless default constructor is declared.",5.0,1.0,when no constructor exists when one is needed a parameterless default constructor is declared,"['constructor', 'exists', 'one', 'needed', 'parameterless', 'default', 'constructor', 'declared']",constructor exist one need parameterless default constructor declar,constructor exists one needed parameterless default constructor declared
"The Compiler creates this automatically for you, unless you specifically create one.",5.0,1.0,the compiler creates this automatically for you unless you specifically create one,"['compiler', 'creates', 'automatically', 'unless', 'specifically', 'create', 'one']",compil creat automat unless specif creat one,compiler creates automatically unless specifically create one
In any class that does not explicitly include a constructor.,5.0,1.0,in any class that does not explicitly include a constructor,"['class', 'explicitly', 'include', 'constructor']",class explicitli includ constructor,class explicitly include constructor
when no user-defined constructor exists,5.0,1.0,when no user-defined constructor exists,"['user-defined', 'constructor', 'exists']",user-defin constructor exist,user-defined constructor exists
"If a class does not explicitly include a constructor, the compiler creates one.",5.0,1.0,if a class does not explicitly include a constructor the compiler creates one,"['class', 'explicitly', 'include', 'constructor', 'compiler', 'creates', 'one']",class explicitli includ constructor compil creat one,class explicitly include constructor compiler creates one
When you do not provide your own constructor.,5.0,1.0,when you do not provide your own constructor,"['provide', 'constructor']",provid constructor,provide constructor
When a class does not explicitly include a constructor.,5.0,1.0,when a class does not explicitly include a constructor,"['class', 'explicitly', 'include', 'constructor']",class explicitli includ constructor,class explicitly include constructor
C plus plus creates a default constructor during compilation if one is not provided.,5.0,1.0,c plus plus creates a default constructor during compilation if one is not provided,"['c', 'plus', 'plus', 'creates', 'default', 'constructor', 'compilation', 'one', 'provided']",c plu plu creat default constructor compil one provid,c plus plus creates default constructor compilation one provided
when a class does not explicitly include a constructor,5.0,1.0,when a class does not explicitly include a constructor,"['class', 'explicitly', 'include', 'constructor']",class explicitli includ constructor,class explicitly include constructor
The compiler will provide one when class does not explictly include a consructor.,5.0,1.0,the compiler will provide one when class does not explictly include a consructor,"['compiler', 'provide', 'one', 'class', 'explictly', 'include', 'consructor']",compil provid one class explictli includ consructor,compiler provide one class explictly include consructor
when the programmer does not explicitly include a constructor,5.0,1.0,when the programmer does not explicitly include a constructor,"['programmer', 'explicitly', 'include', 'constructor']",programm explicitli includ constructor,programmer explicitly include constructor
When one is not explicitly stated.,5.0,1.0,when one is not explicitly stated,"['one', 'explicitly', 'stated']",one explicitli state,one explicitly stated
when one is not explicitly included by a class,5.0,1.0,when one is not explicitly included by a class,"['one', 'explicitly', 'included', 'class']",one explicitli includ class,one explicitly included class
When you dont specify any constructors.,5.0,1.0,when you dont specify any constructors,"['dont', 'specify', 'constructors']",dont specifi constructor,dont specify constructor
"at the very beginning when you run a complier, matter a fact in C plus plus it generates its own default constructor for the class provided if no other constructors have been provided by user",5.0,1.0,at the very beginning when you run a complier matter a fact in c plus plus it generates its own default constructor for the class provided if no other constructors have been provided by user,"['beginning', 'run', 'complier', 'matter', 'fact', 'c', 'plus', 'plus', 'generates', 'default', 'constructor', 'class', 'provided', 'constructors', 'provided', 'user']",begin run complier matter fact c plu plu gener default constructor class provid constructor provid user,beginning run complier matter fact c plus plus generates default constructor class provided constructor provided user
Just one per class.,0.0,0.0,just one per class,"['one', 'per', 'class']",one per class,one per class
As many as you want so long as they have different parameters.,5.0,1.0,as many as you want so long as they have different parameters,"['many', 'want', 'long', 'different', 'parameters']",mani want long differ paramet,many want long different parameter
"There is no limit to the number of constructors in a class because like functions, constructors can be overloaded.",5.0,1.0,there is no limit to the number of constructors in a class because like functions constructors can be overloaded,"['limit', 'number', 'constructors', 'class', 'like', 'functions', 'constructors', 'overloaded']",limit number constructor class like function constructor overload,limit number constructor class like function constructor overloaded
It depends what type of class is being defined. Typically you would have a constructor call for each object.,1.5,0.0,it depends what type of class is being defined typically you would have a constructor call for each object,"['depends', 'type', 'class', 'defined', 'typically', 'would', 'constructor', 'call', 'object']",depend type class defin typic would constructor call object,depends type class defined typically would constructor call object
"In C plus plus, the constructor can be overloaded in that there can be more than one constructor for a class, each having different parameters.",5.0,1.0,in c plus plus the constructor can be overloaded in that there can be more than one constructor for a class each having different parameters,"['c', 'plus', 'plus', 'constructor', 'overloaded', 'one', 'constructor', 'class', 'different', 'parameters']",c plu plu constructor overload one constructor class differ paramet,c plus plus constructor overloaded one constructor class different parameter
1,0.0,0.0,1,['1'],1,1
any number you want,5.0,1.0,any number you want,"['number', 'want']",number want,number want
One,0.0,0.0,one,['one'],one,one
"by default just one, but they may be overloaded to create as many constructors as necessary",5.0,1.0,by default just one but they may be overloaded to create as many constructors as necessary,"['default', 'one', 'may', 'overloaded', 'create', 'many', 'constructors', 'necessary']",default one may overload creat mani constructor necessari,default one may overloaded create many constructor necessary
as many as you want,5.0,1.0,as many as you want,"['many', 'want']",mani want,many want
"As many as you want, with different parameters.",5.0,1.0,as many as you want with different parameters,"['many', 'want', 'different', 'parameters']",mani want differ paramet,many want different parameter
infinite,5.0,1.0,infinite,['infinite'],infinit,infinite
as many as you need,5.0,1.0,as many as you need,"['many', 'need']",mani need,many need
"As many as are needed, depending on how many variables one wishes to directly modify or leave as default when instantiating an object.",5.0,1.0,as many as are needed depending on how many variables one wishes to directly modify or leave as default when instantiating an object,"['many', 'needed', 'depending', 'many', 'variables', 'one', 'wishes', 'directly', 'modify', 'leave', 'default', 'instantiating', 'object']",mani need depend mani variabl one wish directli modifi leav default instanti object,many needed depending many variable one wish directly modify leave default instantiating object
"A very large amount of constructors can be created for any given class through overloading. When two constructors with a different type or number of parameters are created, they are said to be overloaded, and C plus plus can recognize which constructor to use based on the type of the variables that are passed or returned.",5.0,1.0,a very large amount of constructors can be created for any given class through overloading when two constructors with a different type or number of parameters are created they are said to be overloaded and c plus plus can recognize which constructor to use based on the type of the variables that are passed or returned,"['large', 'amount', 'constructors', 'created', 'given', 'class', 'overloading', 'two', 'constructors', 'different', 'type', 'number', 'parameters', 'created', 'said', 'overloaded', 'c', 'plus', 'plus', 'recognize', 'constructor', 'use', 'based', 'type', 'variables', 'passed', 'returned']",larg amount constructor creat given class overload two constructor differ type number paramet creat said overload c plu plu recogn constructor use base type variabl pass return,large amount constructor created given class overloading two constructor different type number parameter created said overloaded c plus plus recognize constructor use based type variable passed returned
It depends on the number of objects. Each object should have a constructor.,2.5,0.0,it depends on the number of objects each object should have a constructor,"['depends', 'number', 'objects', 'object', 'constructor']",depend number object object constructor,depends number object object constructor
"Theoretically unlimited, as long as they are defined by the programmer.",5.0,1.0,theoretically unlimited as long as they are defined by the programmer,"['theoretically', 'unlimited', 'long', 'defined', 'programmer']",theoret unlimit long defin programm,theoretically unlimited long defined programmer
As many as needed.,5.0,1.0,as many as needed,"['many', 'needed']",mani need,many needed
as many as wanted or needed,5.0,1.0,as many as wanted or needed,"['many', 'wanted', 'needed']",mani want need,many wanted needed
several,4.5,1.0,several,['several'],sever,several
One,0.0,0.0,one,['one'],one,one
one,0.0,0.0,one,['one'],one,one
There can be infinite constructors as long as the signature is different.,5.0,1.0,there can be infinite constructors as long as the signature is different,"['infinite', 'constructors', 'long', 'signature', 'different']",infinit constructor long signatur differ,infinite constructor long signature different
that depends on the number of data members in the class,1.5,0.0,that depends on the number of data members in the class,"['depends', 'number', 'data', 'members', 'class']",depend number data member class,depends number data member class
one,0.0,0.0,one,['one'],one,one
you can overload constructors as you need,5.0,1.0,you can overload constructors as you need,"['overload', 'constructors', 'need']",overload constructor need,overload constructor need
As many as the programmer wants to create.,5.0,1.0,as many as the programmer wants to create,"['many', 'programmer', 'wants', 'create']",mani programm want creat,many programmer want create
one,0.0,0.0,one,['one'],one,one
"as many as you want, as long as they each have a unique argument list",5.0,1.0,as many as you want as long as they each have a unique argument list,"['many', 'want', 'long', 'unique', 'argument', 'list']",mani want long uniqu argument list,many want long unique argument list
as many as the user decides to use.,5.0,1.0,as many as the user decides to use,"['many', 'user', 'decides', 'use']",mani user decid use,many user decides use
A function definition does not require any additional information that needs to be passed inside its parenthesis to execute. While a definition prototype requires more than one parameters to be passed in order to complete its task.,4.0,1.0,a function definition does not require any additional information that needs to be passed inside its parenthesis to execute while a definition prototype requires more than one parameters to be passed in order to complete its task,"['function', 'definition', 'require', 'additional', 'information', 'needs', 'passed', 'inside', 'parenthesis', 'execute', 'definition', 'prototype', 'requires', 'one', 'parameters', 'passed', 'order', 'complete', 'task']",function definit requir addit inform need pass insid parenthesi execut definit prototyp requir one paramet pass order complet task,function definition require additional information need passed inside parenthesis execute definition prototype requires one parameter passed order complete task
"The FUNCTION PROTOTYPE is where the programmer declares that he or she is using a function other than main . This is like declaring a variable, the programmer knows that he or she will be using in the future, but has yet to say where they are going to use it, or how. This is answers the question who, it gives the function a name and character. The function prototype, by common practice is placed at the beginning of the program after the includes and before main . The FUNCTION DEFINITION is the guts of the function. This is where the programmer decides what the function is going to do and tells it how to do it. It takes whatever information it is given and performs the operations. It works sort of like the brain, the brain takes in input and based upon that input performs in some way producing an output. The function defintion is placed outside of main and any other functions. A function is its own entity and should be thought of as such.",2.5,0.0,the function prototype is where the programmer declares that he or she is using a function other than main this is like declaring a variable the programmer knows that he or she will be using in the future but has yet to say where they are going to use it or how this is answers the question who it gives the function a name and character the function prototype by common practice is placed at the beginning of the program after the includes and before main the function definition is the guts of the function this is where the programmer decides what the function is going to do and tells it how to do it it takes whatever information it is given and performs the operations it works sort of like the brain the brain takes in input and based upon that input performs in some way producing an output the function defintion is placed outside of main and any other functions a function is its own entity and should be thought of as such,"['function', 'prototype', 'programmer', 'declares', 'using', 'function', 'main', 'like', 'declaring', 'variable', 'programmer', 'knows', 'using', 'future', 'yet', 'say', 'going', 'use', 'answers', 'question', 'gives', 'function', 'name', 'character', 'function', 'prototype', 'common', 'practice', 'placed', 'beginning', 'program', 'includes', 'main', 'function', 'definition', 'guts', 'function', 'programmer', 'decides', 'function', 'going', 'tells', 'takes', 'whatever', 'information', 'given', 'performs', 'operations', 'works', 'sort', 'like', 'brain', 'brain', 'takes', 'input', 'based', 'upon', 'input', 'performs', 'way', 'producing', 'output', 'function', 'defintion', 'placed', 'outside', 'main', 'functions', 'function', 'entity', 'thought']",function prototyp programm declar use function main like declar variabl programm know use futur yet say go use answer question give function name charact function prototyp common practic place begin program includ main function definit gut function programm decid function go tell take whatev inform given perform oper work sort like brain brain take input base upon input perform way produc output function defint place outsid main function function entiti thought,function prototype programmer declares using function main like declaring variable programmer know using future yet say going use answer question give function name character function prototype common practice placed beginning program includes main function definition gut function programmer decides function going tell take whatever information given performs operation work sort like brain brain take input based upon input performs way producing output function defintion placed outside main function function entity thought
"A function prototype tells the compiler the function name, return type and the number and type of parameters without revealing the implementations contained in the function definition.",5.0,1.0,a function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition,"['function', 'prototype', 'tells', 'compiler', 'function', 'name', 'return', 'type', 'number', 'type', 'parameters', 'without', 'revealing', 'implementations', 'contained', 'function', 'definition']",function prototyp tell compil function name return type number type paramet without reveal implement contain function definit,function prototype tell compiler function name return type number type parameter without revealing implementation contained function definition
Function prototype is a declaration. Function definitionswith multiple parametersoften require more than one piece of information. to perform their tasks.,3.0,0.0,function prototype is a declaration function definitionswith multiple parametersoften require more than one piece of information to perform their tasks,"['function', 'prototype', 'declaration', 'function', 'definitionswith', 'multiple', 'parametersoften', 'require', 'one', 'piece', 'information', 'perform', 'tasks']",function prototyp declar function definitionswith multipl parametersoften requir one piec inform perform task,function prototype declaration function definitionswith multiple parametersoften require one piece information perform task
"A function prototype is a declaration of a function that tells the compiler the function 's name, its return type and the types of its parameters.",5.0,1.0,a function prototype is a declaration of a function that tells the compiler the function s name its return type and the types of its parameters,"['function', 'prototype', 'declaration', 'function', 'tells', 'compiler', 'function', 'name', 'return', 'type', 'types', 'parameters']",function prototyp declar function tell compil function name return type type paramet,function prototype declaration function tell compiler function name return type type parameter
A prototype shows only return types and necessary parameters. The definition includes names for those parameters and defines what the object is actually capable of doing.,4.5,1.0,a prototype shows only return types and necessary parameters the definition includes names for those parameters and defines what the object is actually capable of doing,"['prototype', 'shows', 'return', 'types', 'necessary', 'parameters', 'definition', 'includes', 'names', 'parameters', 'defines', 'object', 'actually', 'capable']",prototyp show return type necessari paramet definit includ name paramet defin object actual capabl,prototype show return type necessary parameter definition includes name parameter defines object actually capable
prototype only tells the user what data types go into a function and what type is returned.,4.5,1.0,prototype only tells the user what data types go into a function and what type is returned,"['prototype', 'tells', 'user', 'data', 'types', 'go', 'function', 'type', 'returned']",prototyp tell user data type go function type return,prototype tell user data type go function type returned
Function prototype is located in the. h file and only contains the access function name and paramater type. Function definition contains the code for the function to perform its activity.,4.5,1.0,function prototype is located in the h file and only contains the access function name and paramater type function definition contains the code for the function to perform its activity,"['function', 'prototype', 'located', 'h', 'file', 'contains', 'access', 'function', 'name', 'paramater', 'type', 'function', 'definition', 'contains', 'code', 'function', 'perform', 'activity']",function prototyp locat h file contain access function name paramat type function definit contain code function perform activ,function prototype located h file contains access function name paramater type function definition contains code function perform activity
"a function prototype is used to reference the compiler to a function that will be defined later on, a function definition is the actual function itself, complete with return type, parameters, etc ...",4.0,1.0,a function prototype is used to reference the compiler to a function that will be defined later on a function definition is the actual function itself complete with return type parameters etc,"['function', 'prototype', 'used', 'reference', 'compiler', 'function', 'defined', 'later', 'function', 'definition', 'actual', 'function', 'complete', 'return', 'type', 'parameters', 'etc']",function prototyp use refer compil function defin later function definit actual function complet return type paramet etc,function prototype used reference compiler function defined later function definition actual function complete return type parameter etc
A function prototype describes a class 's public interface without revealing the class 's member function implementations,4.5,1.0,a function prototype describes a class s public interface without revealing the class s member function implementations,"['function', 'prototype', 'describes', 'class', 'public', 'interface', 'without', 'revealing', 'class', 'member', 'function', 'implementations']",function prototyp describ class public interfac without reveal class member function implement,function prototype describes class public interface without revealing class member function implementation
"Function definitions are just that, the definition. The prototype is what the compiler uses to check that calls to function are correct.",2.0,0.0,function definitions are just that the definition the prototype is what the compiler uses to check that calls to function are correct,"['function', 'definitions', 'definition', 'prototype', 'compiler', 'uses', 'check', 'calls', 'function', 'correct']",function definit definit prototyp compil use check call function correct,function definition definition prototype compiler us check call function correct
a prototype does not include any actual code where the function has all the code that is executed in the program.,3.0,0.0,a prototype does not include any actual code where the function has all the code that is executed in the program,"['prototype', 'include', 'actual', 'code', 'function', 'code', 'executed', 'program']",prototyp includ actual code function code execut program,prototype include actual code function code executed program
a prototype declares what will be used in the program and the definition,3.0,0.0,a prototype declares what will be used in the program and the definition,"['prototype', 'declares', 'used', 'program', 'definition']",prototyp declar use program definit,prototype declares used program definition
"A function prototype lays out the name, return type, and the number and types of parameters the function expects to receive in a certain order. The details for function prototypes are in the function definition.",5.0,1.0,a function prototype lays out the name return type and the number and types of parameters the function expects to receive in a certain order the details for function prototypes are in the function definition,"['function', 'prototype', 'lays', 'name', 'return', 'type', 'number', 'types', 'parameters', 'function', 'expects', 'receive', 'certain', 'order', 'details', 'function', 'prototypes', 'function', 'definition']",function prototyp lay name return type number type paramet function expect receiv certain order detail function prototyp function definit,function prototype lay name return type number type parameter function expects receive certain order detail function prototype function definition
"A function definition is the code that defines the function placed in the brackets that determines that function 's operation. A function prototype shows the function 's public interface without exposing implementation. It shows name, return type and type of paramaters.",5.0,1.0,a function definition is the code that defines the function placed in the brackets that determines that function s operation a function prototype shows the function s public interface without exposing implementation it shows name return type and type of paramaters,"['function', 'definition', 'code', 'defines', 'function', 'placed', 'brackets', 'determines', 'function', 'operation', 'function', 'prototype', 'shows', 'function', 'public', 'interface', 'without', 'exposing', 'implementation', 'shows', 'name', 'return', 'type', 'type', 'paramaters']",function definit code defin function place bracket determin function oper function prototyp show function public interfac without expos implement show name return type type paramat,function definition code defines function placed bracket determines function operation function prototype show function public interface without exposing implementation show name return type type paramaters
"A function prototype is just a declaration of the function existing, and cant be used as an actual function. A function has to be created with a definition within to tell the compiler what the function does.",3.5,0.0,a function prototype is just a declaration of the function existing and cant be used as an actual function a function has to be created with a definition within to tell the compiler what the function does,"['function', 'prototype', 'declaration', 'function', 'existing', 'cant', 'used', 'actual', 'function', 'function', 'created', 'definition', 'within', 'tell', 'compiler', 'function']",function prototyp declar function exist cant use actual function function creat definit within tell compil function,function prototype declaration function existing cant used actual function function created definition within tell compiler function
the Prototype creates a framework to call the function definition. While a function definition is where the function is actually programmed out and created into a final product.,4.5,1.0,the prototype creates a framework to call the function definition while a function definition is where the function is actually programmed out and created into a final product,"['prototype', 'creates', 'framework', 'call', 'function', 'definition', 'function', 'definition', 'function', 'actually', 'programmed', 'created', 'final', 'product']",prototyp creat framework call function definit function definit function actual program creat final product,prototype creates framework call function definition function definition function actually programmed created final product
A function prototype describes the class 's public interface without providing how the function works. A function definition contains the inner workings of the function.,4.5,1.0,a function prototype describes the class s public interface without providing how the function works a function definition contains the inner workings of the function,"['function', 'prototype', 'describes', 'class', 'public', 'interface', 'without', 'providing', 'function', 'works', 'function', 'definition', 'contains', 'inner', 'workings', 'function']",function prototyp describ class public interfac without provid function work function definit contain inner work function,function prototype describes class public interface without providing function work function definition contains inner working function
"prototype states all functions in that class before compilation, where the definition actually holds the source for the functions",3.5,0.0,prototype states all functions in that class before compilation where the definition actually holds the source for the functions,"['prototype', 'states', 'functions', 'class', 'compilation', 'definition', 'actually', 'holds', 'source', 'functions']",prototyp state function class compil definit actual hold sourc function,prototype state function class compilation definition actually hold source function
"Function prototypes tell the compiler the function names, its return type, and the types of its parameters where as, function definitions actually implement the member functions.",5.0,1.0,function prototypes tell the compiler the function names its return type and the types of its parameters where as function definitions actually implement the member functions,"['function', 'prototypes', 'tell', 'compiler', 'function', 'names', 'return', 'type', 'types', 'parameters', 'function', 'definitions', 'actually', 'implement', 'member', 'functions']",function prototyp tell compil function name return type type paramet function definit actual implement member function,function prototype tell compiler function name return type type parameter function definition actually implement member function
A function prototype just specifies parameters. A function definition includes parameters and a code body.,4.0,1.0,a function prototype just specifies parameters a function definition includes parameters and a code body,"['function', 'prototype', 'specifies', 'parameters', 'function', 'definition', 'includes', 'parameters', 'code', 'body']",function prototyp specifi paramet function definit includ paramet code bodi,function prototype specifies parameter function definition includes parameter code body
Function prototypes describe the class 's public interface,4.5,1.0,function prototypes describe the class s public interface,"['function', 'prototypes', 'describe', 'class', 'public', 'interface']",function prototyp describ class public interfac,function prototype describe class public interface
"A prototype only declares name, return type, and input type. A definition also defines the scope, variables, process, and return function",4.5,1.0,a prototype only declares name return type and input type a definition also defines the scope variables process and return function,"['prototype', 'declares', 'name', 'return', 'type', 'input', 'type', 'definition', 'also', 'defines', 'scope', 'variables', 'process', 'return', 'function']",prototyp declar name return type input type definit also defin scope variabl process return function,prototype declares name return type input type definition also defines scope variable process return function
"a function prototype simply declares the functions parameters, the function definition includes any necessary variables and the function 's actual code",4.0,1.0,a function prototype simply declares the functions parameters the function definition includes any necessary variables and the function s actual code,"['function', 'prototype', 'simply', 'declares', 'functions', 'parameters', 'function', 'definition', 'includes', 'necessary', 'variables', 'function', 'actual', 'code']",function prototyp simpli declar function paramet function definit includ necessari variabl function actual code,function prototype simply declares function parameter function definition includes necessary variable function actual code
"A functgion prototype is a declaration of a function, while function definition specifies what a function does",3.5,0.0,a functgion prototype is a declaration of a function while function definition specifies what a function does,"['functgion', 'prototype', 'declaration', 'function', 'function', 'definition', 'specifies', 'function']",functgion prototyp declar function function definit specifi function,functgion prototype declaration function function definition specifies function
"in a function prototype you include the return type, the name of the function, and its parameters if any are needed. in a function definition you write the code of what the function will do.",5.0,1.0,in a function prototype you include the return type the name of the function and its parameters if any are needed in a function definition you write the code of what the function will do,"['function', 'prototype', 'include', 'return', 'type', 'name', 'function', 'parameters', 'needed', 'function', 'definition', 'write', 'code', 'function']",function prototyp includ return type name function paramet need function definit write code function,function prototype include return type name function parameter needed function definition write code function
"A function definition contains all the code for a function to work. A function prototype just shows the output, input and function name.",4.5,1.0,a function definition contains all the code for a function to work a function prototype just shows the output input and function name,"['function', 'definition', 'contains', 'code', 'function', 'work', 'function', 'prototype', 'shows', 'output', 'input', 'function', 'name']",function definit contain code function work function prototyp show output input function name,function definition contains code function work function prototype show output input function name
"function prototype describe the class 's public interface without revealing the class 's member function implementations, function definitions show what implementations are being done",4.5,1.0,function prototype describe the class s public interface without revealing the class s member function implementations function definitions show what implementations are being done,"['function', 'prototype', 'describe', 'class', 'public', 'interface', 'without', 'revealing', 'class', 'member', 'function', 'implementations', 'function', 'definitions', 'show', 'implementations', 'done']",function prototyp describ class public interfac without reveal class member function implement function definit show implement done,function prototype describe class public interface without revealing class member function implementation function definition show implementation done
"A function prototype only names the function, its return type, and it is argument list, while a definition defines the above as well as what the function actually does.",5.0,1.0,a function prototype only names the function its return type and it is argument list while a definition defines the above as well as what the function actually does,"['function', 'prototype', 'names', 'function', 'return', 'type', 'argument', 'list', 'definition', 'defines', 'well', 'function', 'actually']",function prototyp name function return type argument list definit defin well function actual,function prototype name function return type argument list definition defines well function actually
function prototype describes a classes interface without reviling whatever is inside as for the function definition cannot do that.,4.5,1.0,function prototype describes a classes interface without reviling whatever is inside as for the function definition cannot do that,"['function', 'prototype', 'describes', 'classes', 'interface', 'without', 'reviling', 'whatever', 'inside', 'function', 'definition']",function prototyp describ class interfac without revil whatev insid function definit,function prototype describes class interface without reviling whatever inside function definition
the role of a header file list all the functions a class can do while hiding the inner workings of its functions,4.5,1.0,the role of a header file list all the functions a class can do while hiding the inner workings of its functions,"['role', 'header', 'file', 'list', 'functions', 'class', 'hiding', 'inner', 'workings', 'functions']",role header file list function class hide inner work function,role header file list function class hiding inner working function
The main role of header file is it is used to share information among various files.,3.0,0.0,the main role of header file is it is used to share information among various files,"['main', 'role', 'header', 'file', 'used', 'share', 'information', 'among', 'various', 'files']",main role header file use share inform among variou file,main role header file used share information among various file
Header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere.,3.5,0.0,header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere,"['header', 'files', 'separate', 'files', 'classes', 'defined', 'allow', 'compiler', 'recognize', 'classes', 'used', 'elsewhere']",header file separ file class defin allow compil recogn class use elsewher,header file separate file class defined allow compiler recognize class used elsewhere
No,0.0,0.0,no,[],,
A header file consists of reusable source code such as a class in a file that by convention has a. h filename extension. This differs from. cpp files that contain source-code.,3.5,0.0,a header file consists of reusable source code such as a class in a file that by convention has a h filename extension this differs from cpp files that contain source-code,"['header', 'file', 'consists', 'reusable', 'source', 'code', 'class', 'file', 'convention', 'h', 'filename', 'extension', 'differs', 'cpp', 'files', 'contain', 'source-code']",header file consist reusabl sourc code class file convent h filenam extens differ cpp file contain source-cod,header file consists reusable source code class file convention h filename extension differs cpp file contain source-code
"To provide information about the contents of a library. It includes the definition of classes, declarations of functions, data types, and constants.",4.5,1.0,to provide information about the contents of a library it includes the definition of classes declarations of functions data types and constants,"['provide', 'information', 'contents', 'library', 'includes', 'definition', 'classes', 'declarations', 'functions', 'data', 'types', 'constants']",provid inform content librari includ definit class declar function data type constant,provide information content library includes definition class declaration function data type constant
the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function.,4.5,1.0,the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function,"['header', 'file', 'shows', 'user', 'types', 'go', 'come', 'function', 'allow', 'user', 'manipulate', 'actual', 'code', 'function']",header file show user type go come function allow user manipul actual code function,header file show user type go come function allow user manipulate actual code function
Header files declares the class member functions.,3.5,0.0,header files declares the class member functions,"['header', 'files', 'declares', 'class', 'member', 'functions']",header file declar class member function,header file declares class member function
A header file allows for the separation of declaration and implementation into separate files.,4.0,1.0,a header file allows for the separation of declaration and implementation into separate files,"['header', 'file', 'allows', 'separation', 'declaration', 'implementation', 'separate', 'files']",header file allow separ declar implement separ file,header file allows separation declaration implementation separate file
the header file has access to the C plus plus Standard Library and makes certain classes like class string work.,1.5,0.0,the header file has access to the c plus plus standard library and makes certain classes like class string work,"['header', 'file', 'access', 'c', 'plus', 'plus', 'standard', 'library', 'makes', 'certain', 'classes', 'like', 'class', 'string', 'work']",header file access c plu plu standard librari make certain class like class string work,header file access c plus plus standard library make certain class like class string work
Instruct the compiler on how to interface with library and user-written components.,2.5,0.0,instruct the compiler on how to interface with library and user-written components,"['instruct', 'compiler', 'interface', 'library', 'user-written', 'components']",instruct compil interfac librari user-written compon,instruct compiler interface library user-written component
create a comon area to contain reusable functions.,3.0,0.0,create a comon area to contain reusable functions,"['create', 'comon', 'area', 'contain', 'reusable', 'functions']",creat comon area contain reusabl function,create comon area contain reusable function
to declare the functions being used in the classes,3.0,0.0,to declare the functions being used in the classes,"['declare', 'functions', 'used', 'classes']",declar function use class,declare function used class
"include hat. h allows the use of the hat container, so called from the act of pulling names from a hat. The header file for hat includes functions for storage and retrieval of it is contents, mainly put , peek , and pull .",1.5,0.0,include hat h allows the use of the hat container so called from the act of pulling names from a hat the header file for hat includes functions for storage and retrieval of it is contents mainly put peek and pull,"['include', 'hat', 'h', 'allows', 'use', 'hat', 'container', 'called', 'act', 'pulling', 'names', 'hat', 'header', 'file', 'hat', 'includes', 'functions', 'storage', 'retrieval', 'contents', 'mainly', 'put', 'peek', 'pull']",includ hat h allow use hat contain call act pull name hat header file hat includ function storag retriev content mainli put peek pull,include hat h allows use hat container called act pulling name hat header file hat includes function storage retrieval content mainly put peek pull
To hold reusable content or modules separate from the actual source-code file that can be easily referenced and employed for different programs.,4.0,1.0,to hold reusable content or modules separate from the actual source-code file that can be easily referenced and employed for different programs,"['hold', 'reusable', 'content', 'modules', 'separate', 'actual', 'source-code', 'file', 'easily', 'referenced', 'employed', 'different', 'programs']",hold reusabl content modul separ actual source-cod file easili referenc employ differ program,hold reusable content module separate actual source-code file easily referenced employed different program
a header file is a file used to store a list of prototye functions and data members.,5.0,1.0,a header file is a file used to store a list of prototye functions and data members,"['header', 'file', 'file', 'used', 'store', 'list', 'prototye', 'functions', 'data', 'members']",header file file use store list prototy function data member,header file file used store list prototye function data member
"A header file is a cross communication method between source files, to help limit the size of each individual program. Without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse.",3.5,0.0,a header file is a cross communication method between source files to help limit the size of each individual program without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse,"['header', 'file', 'cross', 'communication', 'method', 'source', 'files', 'help', 'limit', 'size', 'individual', 'program', 'without', 'header', 'files', 'program', '1', 'large', 'lump', 'code', 'thus', 'fairly', 'hard', 'debug', 'traverse']",header file cross commun method sourc file help limit size individu program without header file program 1 larg lump code thu fairli hard debug travers,header file cross communication method source file help limit size individual program without header file program 1 large lump code thus fairly hard debug traverse
It contains reusable source code for use by other classes.,3.0,0.0,it contains reusable source code for use by other classes,"['contains', 'reusable', 'source', 'code', 'use', 'classes']",contain reusabl sourc code use class,contains reusable source code use class
"to separate the source code from the main function, allows the methods or classes to be included in the program without direct coding. allows re usability.",3.5,0.0,to separate the source code from the main function allows the methods or classes to be included in the program without direct coding allows re usability,"['separate', 'source', 'code', 'main', 'function', 'allows', 'methods', 'classes', 'included', 'program', 'without', 'direct', 'coding', 'allows', 'usability']",separ sourc code main function allow method class includ program without direct code allow usabl,separate source code main function allows method class included program without direct coding allows usability
Header files have reusable source code in a file that a programer can use.,2.5,0.0,header files have reusable source code in a file that a programer can use,"['header', 'files', 'reusable', 'source', 'code', 'file', 'programer', 'use']",header file reusabl sourc code file program use,header file reusable source code file programer use
To hide the definition and details of a class. Also to help readability of the main C plus plus file.,3.5,0.0,to hide the definition and details of a class also to help readability of the main c plus plus file,"['hide', 'definition', 'details', 'class', 'also', 'help', 'readability', 'main', 'c', 'plus', 'plus', 'file']",hide definit detail class also help readabl main c plu plu file,hide definition detail class also help readability main c plus plus file
To allow the compiler to recognize the classes when used elsewhere.,3.5,0.0,to allow the compiler to recognize the classes when used elsewhere,"['allow', 'compiler', 'recognize', 'classes', 'used', 'elsewhere']",allow compil recogn class use elsewher,allow compiler recognize class used elsewhere
"A header file declares a class, its data, and functions available through that class.",4.0,1.0,a header file declares a class its data and functions available through that class,"['header', 'file', 'declares', 'class', 'data', 'functions', 'available', 'class']",header file declar class data function avail class,header file declares class data function available class
header files contain code which can be used in multiple files,3.0,0.0,header files contain code which can be used in multiple files,"['header', 'files', 'contain', 'code', 'used', 'multiple', 'files']",header file contain code use multipl file,header file contain code used multiple file
Allow compiler to recognize the classes when used elsewhere,3.0,0.0,allow compiler to recognize the classes when used elsewhere,"['allow', 'compiler', 'recognize', 'classes', 'used', 'elsewhere']",allow compil recogn class use elsewher,allow compiler recognize class used elsewhere
Allow compiler to recognize the classes when used elsewhere,3.5,0.0,allow compiler to recognize the classes when used elsewhere,"['allow', 'compiler', 'recognize', 'classes', 'used', 'elsewhere']",allow compil recogn class use elsewher,allow compiler recognize class used elsewhere
To promote function reusuablitly,3.0,0.0,to promote function reusuablitly,"['promote', 'function', 'reusuablitly']",promot function reusuablitli,promote function reusuablitly
class definitions are placed here,3.0,0.0,class definitions are placed here,"['class', 'definitions', 'placed']",class definit place,class definition placed
A header file usually contains class and function prototypes.,4.5,1.0,a header file usually contains class and function prototypes,"['header', 'file', 'usually', 'contains', 'class', 'function', 'prototypes']",header file usual contain class function prototyp,header file usually contains class function prototype
contains all the standard C plus plus library 's i. e. string,1.0,0.0,contains all the standard c plus plus library s i e string,"['contains', 'standard', 'c', 'plus', 'plus', 'library', 'e', 'string']",contain standard c plu plu librari e string,contains standard c plus plus library e string
"It includes the name of the program, the type of parameters it can take. It should also include a brief description of what the function does.",4.5,1.0,it includes the name of the program the type of parameters it can take it should also include a brief description of what the function does,"['includes', 'name', 'program', 'type', 'parameters', 'take', 'also', 'include', 'brief', 'description', 'function']",includ name program type paramet take also includ brief descript function,includes name program type parameter take also include brief description function
it includes the specific information about the function such as input and output variable types and how many of each.,3.0,0.0,it includes the specific information about the function such as input and output variable types and how many of each,"['includes', 'specific', 'information', 'function', 'input', 'output', 'variable', 'types', 'many']",includ specif inform function input output variabl type mani,includes specific information function input output variable type many
The function signature includes the name of the function and the types of its arguments.,5.0,1.0,the function signature includes the name of the function and the types of its arguments,"['function', 'signature', 'includes', 'name', 'function', 'types', 'arguments']",function signatur includ name function type argument,function signature includes name function type argument
"A function signature consists of the function prototype. This tells you the general information about a function, its name, parameters, what scope it is in, and other miscellaneous information.",4.5,1.0,a function signature consists of the function prototype this tells you the general information about a function its name parameters what scope it is in and other miscellaneous information,"['function', 'signature', 'consists', 'function', 'prototype', 'tells', 'general', 'information', 'function', 'name', 'parameters', 'scope', 'miscellaneous', 'information']",function signatur consist function prototyp tell gener inform function name paramet scope miscellan inform,function signature consists function prototype tell general information function name parameter scope miscellaneous information
It includes the name of the function and the types of its arguments.,5.0,1.0,it includes the name of the function and the types of its arguments,"['includes', 'name', 'function', 'types', 'arguments']",includ name function type argument,includes name function type argument
"Name, paramaters, scope, and other general function information",4.5,1.0,name paramaters scope and other general function information,"['name', 'paramaters', 'scope', 'general', 'function', 'information']",name paramat scope gener function inform,name paramaters scope general function information
It includes a function name and parameter list. Does not include return type. Function signatures must be different.,5.0,1.0,it includes a function name and parameter list does not include return type function signatures must be different,"['includes', 'function', 'name', 'parameter', 'list', 'include', 'return', 'type', 'function', 'signatures', 'must', 'different']",includ function name paramet list includ return type function signatur must differ,includes function name parameter list include return type function signature must different
input parameters and return type,3.0,0.0,input parameters and return type,"['input', 'parameters', 'return', 'type']",input paramet return type,input parameter return type
The portion of the function prototyp tha has the function name and the arguments but NOT the return type.,5.0,1.0,the portion of the function prototyp tha has the function name and the arguments but not the return type,"['portion', 'function', 'prototyp', 'tha', 'function', 'name', 'arguments', 'return', 'type']",portion function prototyp tha function name argument return type,portion function prototyp tha function name argument return type
Name of the function and the types of it is arguments,5.0,1.0,name of the function and the types of it is arguments,"['name', 'function', 'types', 'arguments']",name function type argument,name function type argument
The name of the function and the types of its arguments.,5.0,1.0,the name of the function and the types of its arguments,"['name', 'function', 'types', 'arguments']",name function type argument,name function type argument
Includes the name of the function and the types of its arguments.,5.0,1.0,includes the name of the function and the types of its arguments,"['includes', 'name', 'function', 'types', 'arguments']",includ name function type argument,includes name function type argument
"identification of a function and the data types of its parameters, it has the name, and the data type variables",5.0,1.0,identification of a function and the data types of its parameters it has the name and the data type variables,"['identification', 'function', 'data', 'types', 'parameters', 'name', 'data', 'type', 'variables']",identif function data type paramet name data type variabl,identification function data type parameter name data type variable
"a return type, and input parameters",3.0,0.0,a return type and input parameters,"['return', 'type', 'input', 'parameters']",return type input paramet,return type input parameter
The function signature includes the method name and the input types.,5.0,1.0,the function signature includes the method name and the input types,"['function', 'signature', 'includes', 'method', 'name', 'input', 'types']",function signatur includ method name input type,function signature includes method name input type
"A function signature includes the name of the function and types of arguments, but not the return type.",5.0,1.0,a function signature includes the name of the function and types of arguments but not the return type,"['function', 'signature', 'includes', 'name', 'function', 'types', 'arguments', 'return', 'type']",function signatur includ name function type argument return type,function signature includes name function type argument return type
The signature can include a result type and thrown errors.,2.0,0.0,the signature can include a result type and thrown errors,"['signature', 'include', 'result', 'type', 'thrown', 'errors']",signatur includ result type thrown error,signature include result type thrown error
"function name, and input paramaters",5.0,1.0,function name and input paramaters,"['function', 'name', 'input', 'paramaters']",function name input paramat,function name input paramaters
"The name of the function and the types of its arguments. This includes the number, type, and order the parameters appear in.",5.0,1.0,the name of the function and the types of its arguments this includes the number type and order the parameters appear in,"['name', 'function', 'types', 'arguments', 'includes', 'number', 'type', 'order', 'parameters', 'appear']",name function type argument includ number type order paramet appear,name function type argument includes number type order parameter appear
the name of the function and the types of its arguments,5.0,1.0,the name of the function and the types of its arguments,"['name', 'function', 'types', 'arguments']",name function type argument,name function type argument
A function signature includes the name of the function and the types of its arguments,5.0,1.0,a function signature includes the name of the function and the types of its arguments,"['function', 'signature', 'includes', 'name', 'function', 'types', 'arguments']",function signatur includ name function type argument,function signature includes name function type argument
"A function signature includes a function 's return type, parameters and semi-colon.",3.0,0.0,a function signature includes a function s return type parameters and semi-colon,"['function', 'signature', 'includes', 'function', 'return', 'type', 'parameters', 'semi-colon']",function signatur includ function return type paramet semi-colon,function signature includes function return type parameter semi-colon
the name of the function and the types of its arguments,5.0,1.0,the name of the function and the types of its arguments,"['name', 'function', 'types', 'arguments']",name function type argument,name function type argument
the function 's name and parameters,5.0,1.0,the function s name and parameters,"['function', 'name', 'parameters']",function name paramet,function name parameter
The name of the function and the types of its arguments.,5.0,1.0,the name of the function and the types of its arguments,"['name', 'function', 'types', 'arguments']",name function type argument,name function type argument
The portion of a function prototype that includes the name of the function and the types of its arguments,5.0,1.0,the portion of a function prototype that includes the name of the function and the types of its arguments,"['portion', 'function', 'prototype', 'includes', 'name', 'function', 'types', 'arguments']",portion function prototyp includ name function type argument,portion function prototype includes name function type argument
the name of the function and its parameters,5.0,1.0,the name of the function and its parameters,"['name', 'function', 'parameters']",name function paramet,name function parameter
The function name and parameters,5.0,1.0,the function name and parameters,"['function', 'name', 'parameters']",function name paramet,function name parameter
name of function and types of arguments,5.0,1.0,name of function and types of arguments,"['name', 'function', 'types', 'arguments']",name function type argument,name function type argument
a function 's return type and parameter list,3.0,0.0,a function s return type and parameter list,"['function', 'return', 'type', 'parameter', 'list']",function return type paramet list,function return type parameter list
"it includes the name of the function, and the types of its arguments. it does not specify the function return type. Function in the same scope must have unqiue signatures.",5.0,1.0,it includes the name of the function and the types of its arguments it does not specify the function return type function in the same scope must have unqiue signatures,"['includes', 'name', 'function', 'types', 'arguments', 'specify', 'function', 'return', 'type', 'function', 'scope', 'must', 'unqiue', 'signatures']",includ name function type argument specifi function return type function scope must unqiu signatur,includes name function type argument specify function return type function scope must unqiue signature
Any functions that follows their deceleration that are in the source code file are allowed to have access the variables. Also global scope variables retrain their value throughout the execution of the program.,5.0,1.0,any functions that follows their deceleration that are in the source code file are allowed to have access the variables also global scope variables retrain their value throughout the execution of the program,"['functions', 'follows', 'deceleration', 'source', 'code', 'file', 'allowed', 'access', 'variables', 'also', 'global', 'scope', 'variables', 'retrain', 'value', 'throughout', 'execution', 'program']",function follow deceler sourc code file allow access variabl also global scope variabl retrain valu throughout execut program,function follows deceleration source code file allowed access variable also global scope variable retrain value throughout execution program
they can be accessed by any C plus plus file anywhere.,2.5,0.0,they can be accessed by any c plus plus file anywhere,"['accessed', 'c', 'plus', 'plus', 'file', 'anywhere']",access c plu plu file anywher,accessed c plus plus file anywhere
Global variables have file scope.,5.0,1.0,global variables have file scope,"['global', 'variables', 'file', 'scope']",global variabl file scope,global variable file scope
The scope of global variables are created by placing variable declarations outside any class or function definition. Global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file.,2.5,0.0,the scope of global variables are created by placing variable declarations outside any class or function definition global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file,"['scope', 'global', 'variables', 'created', 'placing', 'variable', 'declarations', 'outside', 'class', 'function', 'definition', 'global', 'variables', 'retain', 'values', 'throughout', 'execution', 'program', 'referenced', 'function', 'follows', 'declarations', 'definitions', 'source', 'file']",scope global variabl creat place variabl declar outsid class function definit global variabl retain valu throughout execut program referenc function follow declar definit sourc file,scope global variable created placing variable declaration outside class function definition global variable retain value throughout execution program referenced function follows declaration definition source file
A global variable is an identifier that retains it is value throughout the execution of the program. It has file scope.,5.0,1.0,a global variable is an identifier that retains it is value throughout the execution of the program it has file scope,"['global', 'variable', 'identifier', 'retains', 'value', 'throughout', 'execution', 'program', 'file', 'scope']",global variabl identifi retain valu throughout execut program file scope,global variable identifier retains value throughout execution program file scope
Global Variables can be used in any function as long as the appropriate. h file that holds the variable is included,4.0,1.0,global variables can be used in any function as long as the appropriate h file that holds the variable is included,"['global', 'variables', 'used', 'function', 'long', 'appropriate', 'h', 'file', 'holds', 'variable', 'included']",global variabl use function long appropri h file hold variabl includ,global variable used function long appropriate h file hold variable included
They can be accessed by any part of the program. It can be referenced by any function that follows the declarations or definitions in the source file.,5.0,1.0,they can be accessed by any part of the program it can be referenced by any function that follows the declarations or definitions in the source file,"['accessed', 'part', 'program', 'referenced', 'function', 'follows', 'declarations', 'definitions', 'source', 'file']",access part program referenc function follow declar definit sourc file,accessed part program referenced function follows declaration definition source file
can be accesed by any classes that have and object of that variables class in it,3.0,0.0,can be accesed by any classes that have and object of that variables class in it,"['accesed', 'classes', 'object', 'variables', 'class']",acces class object variabl class,accesed class object variable class
Global variables have file-scope. The variable is know to all functions throught the file,5.0,1.0,global variables have file-scope the variable is know to all functions throught the file,"['global', 'variables', 'file-scope', 'variable', 'know', 'functions', 'throught', 'file']",global variabl file-scop variabl know function throught file,global variable file-scope variable know function throught file
The entire program,4.5,1.0,the entire program,"['entire', 'program']",entir program,entire program
They have file scope when placed outside a function.,5.0,1.0,they have file scope when placed outside a function,"['file', 'scope', 'placed', 'outside', 'function']",file scope place outsid function,file scope placed outside function
File scope.,5.0,1.0,file scope,"['file', 'scope']",file scope,file scope
They can be used throughout the program,4.5,1.0,they can be used throughout the program,"['used', 'throughout', 'program']",use throughout program,used throughout program
Global variable can b accessed by any class wit an object in the variables class,3.0,0.0,global variable can b accessed by any class wit an object in the variables class,"['global', 'variable', 'b', 'accessed', 'class', 'wit', 'object', 'variables', 'class']",global variabl b access class wit object variabl class,global variable b accessed class wit object variable class
The scope of global variables is at the file level.,5.0,1.0,the scope of global variables is at the file level,"['scope', 'global', 'variables', 'file', 'level']",scope global variabl file level,scope global variable file level
Global variables all have file scope.,5.0,1.0,global variables all have file scope,"['global', 'variables', 'file', 'scope']",global variabl file scope,global variable file scope
it is accessible by all functions within a program,4.5,1.0,it is accessible by all functions within a program,"['accessible', 'functions', 'within', 'program']",access function within program,accessible function within program
"variables accessible anywhere in the program, as long as they are public.",4.5,1.0,variables accessible anywhere in the program as long as they are public,"['variables', 'accessible', 'anywhere', 'program', 'long', 'public']",variabl access anywher program long public,variable accessible anywhere program long public
They can be referenced by any function following their declaration or definition inside the source file.,5.0,1.0,they can be referenced by any function following their declaration or definition inside the source file,"['referenced', 'function', 'following', 'declaration', 'definition', 'inside', 'source', 'file']",referenc function follow declar definit insid sourc file,referenced function following declaration definition inside source file
"globally, anywhere in the program.",4.5,1.0,globally anywhere in the program,"['globally', 'anywhere', 'program']",global anywher program,globally anywhere program
Global variables have a file scope,5.0,1.0,global variables have a file scope,"['global', 'variables', 'file', 'scope']",global variabl file scope,global variable file scope
The entire program.,4.5,1.0,the entire program,"['entire', 'program']",entir program,entire program
throughout the execution of the program,4.5,1.0,throughout the execution of the program,"['throughout', 'execution', 'program']",throughout execut program,throughout execution program
"If a variable is declared global, any function or class can use that variable.",4.5,1.0,if a variable is declared global any function or class can use that variable,"['variable', 'declared', 'global', 'function', 'class', 'use', 'variable']",variabl declar global function class use variabl,variable declared global function class use variable
The entire program or file.,5.0,1.0,the entire program or file,"['entire', 'program', 'file']",entir program file,entire program file
throught the programm,4.5,1.0,throught the programm,"['throught', 'programm']",throught programm,throught programm
the whole code,4.5,1.0,the whole code,"['whole', 'code']",whole code,whole code
File scope,5.0,1.0,file scope,"['file', 'scope']",file scope,file scope
can be referenced by any function that follows their declarations or definitions in the source file,5.0,1.0,can be referenced by any function that follows their declarations or definitions in the source file,"['referenced', 'function', 'follows', 'declarations', 'definitions', 'source', 'file']",referenc function follow declar definit sourc file,referenced function follows declaration definition source file
global variables have program scopeaccessible anywhere in program,4.5,1.0,global variables have program scopeaccessible anywhere in program,"['global', 'variables', 'program', 'scopeaccessible', 'anywhere', 'program']",global variabl program scopeaccess anywher program,global variable program scopeaccessible anywhere program
variables that exist throught the entire script. their values can be changed anytime in the code and fucntions.,4.5,1.0,variables that exist throught the entire script their values can be changed anytime in the code and fucntions,"['variables', 'exist', 'throught', 'entire', 'script', 'values', 'changed', 'anytime', 'code', 'fucntions']",variabl exist throught entir script valu chang anytim code fucntion,variable exist throught entire script value changed anytime code fucntions
It expands the function 's definition in that place. Once the functions is called you can use it as many times as you need. The compiler just expands on the function.,4.5,1.0,it expands the function s definition in that place once the functions is called you can use it as many times as you need the compiler just expands on the function,"['expands', 'function', 'definition', 'place', 'functions', 'called', 'use', 'many', 'times', 'need', 'compiler', 'expands', 'function']",expand function definit place function call use mani time need compil expand function,expands function definition place function called use many time need compiler expands function
"When the compiler inline-expands a function call, the function 's code gets inserted into the caller 's code streamconceptually similar to what happens with a define macro. This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code optimize the called code into the caller.",4.5,1.0,when the compiler inline-expands a function call the function s code gets inserted into the caller s code streamconceptually similar to what happens with a define macro this can depending on a zillion other things improve performance because the optimizer can procedurally integrate the called code optimize the called code into the caller,"['compiler', 'inline-expands', 'function', 'call', 'function', 'code', 'gets', 'inserted', 'caller', 'code', 'streamconceptually', 'similar', 'happens', 'define', 'macro', 'depending', 'zillion', 'things', 'improve', 'performance', 'optimizer', 'procedurally', 'integrate', 'called', 'code', 'optimize', 'called', 'code', 'caller']",compil inline-expand function call function code get insert caller code streamconceptu similar happen defin macro depend zillion thing improv perform optim procedur integr call code optim call code caller,compiler inline-expands function call function code get inserted caller code streamconceptually similar happens define macro depending zillion thing improve performance optimizer procedurally integrate called code optimize called code caller
The inline keyword advises the compiler to copy the function 's code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions.,5.0,1.0,the inline keyword advises the compiler to copy the function s code in place to avoid function calls however the compiler can and typically does ignore the inline qualifier for all but the smallest functions,"['inline', 'keyword', 'advises', 'compiler', 'copy', 'function', 'code', 'place', 'avoid', 'function', 'calls', 'however', 'compiler', 'typically', 'ignore', 'inline', 'qualifier', 'smallest', 'functions']",inlin keyword advis compil copi function code place avoid function call howev compil typic ignor inlin qualifi smallest function,inline keyword advises compiler copy function code place avoid function call however compiler typically ignore inline qualifier smallest function
The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,3.0,0.0,the compiler can ignore the inline qualifier and typically does so for all but the smallest functions,"['compiler', 'ignore', 'inline', 'qualifier', 'typically', 'smallest', 'functions']",compil ignor inlin qualifi typic smallest function,compiler ignore inline qualifier typically smallest function
Placing the qualifier inline before a function 's return type in the function definition advises the compiler to generate a copy of the function 's code in place to avoid a function call.,5.0,1.0,placing the qualifier inline before a function s return type in the function definition advises the compiler to generate a copy of the function s code in place to avoid a function call,"['placing', 'qualifier', 'inline', 'function', 'return', 'type', 'function', 'definition', 'advises', 'compiler', 'generate', 'copy', 'function', 'code', 'place', 'avoid', 'function', 'call']",place qualifi inlin function return type function definit advis compil gener copi function code place avoid function call,placing qualifier inline function return type function definition advises compiler generate copy function code place avoid function call
You declare your inline function in the header or before your int main . You then can call that function at anytime in your main program quickly and easily.,2.0,0.0,you declare your inline function in the header or before your int main you then can call that function at anytime in your main program quickly and easily,"['declare', 'inline', 'function', 'header', 'int', 'main', 'call', 'function', 'anytime', 'main', 'program', 'quickly', 'easily']",declar inlin function header int main call function anytim main program quickli easili,declare inline function header int main call function anytime main program quickly easily
"It expands a small function out ... making your code longer, but also makes it run faster.",4.0,1.0,it expands a small function out making your code longer but also makes it run faster,"['expands', 'small', 'function', 'making', 'code', 'longer', 'also', 'makes', 'run', 'faster']",expand small function make code longer also make run faster,expands small function making code longer also make run faster
the function is not treated as a separate unit like other functions,3.5,0.0,the function is not treated as a separate unit like other functions,"['function', 'treated', 'separate', 'unit', 'like', 'functions']",function treat separ unit like function,function treated separate unit like function
"When the program compiles, it will copy the function inplace, avoiding a function call.",5.0,1.0,when the program compiles it will copy the function inplace avoiding a function call,"['program', 'compiles', 'copy', 'function', 'inplace', 'avoiding', 'function', 'call']",program compil copi function inplac avoid function call,program compiles copy function inplace avoiding function call
"It replaces all instances of that function call with the inline code itself, resulting in longer but faster programs.",5.0,1.0,it replaces all instances of that function call with the inline code itself resulting in longer but faster programs,"['replaces', 'instances', 'function', 'call', 'inline', 'code', 'resulting', 'longer', 'faster', 'programs']",replac instanc function call inlin code result longer faster program,replaces instance function call inline code resulting longer faster program
The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,3.0,0.0,the compiler can ignore the inline qualifier and typically does so for all but the smallest functions,"['compiler', 'ignore', 'inline', 'qualifier', 'typically', 'smallest', 'functions']",compil ignor inlin qualifi typic smallest function,compiler ignore inline qualifier typically smallest function
Ignores the inline qualifier and typically does so for all but the smallest functions.,3.0,0.0,ignores the inline qualifier and typically does so for all but the smallest functions,"['ignores', 'inline', 'qualifier', 'typically', 'smallest', 'functions']",ignor inlin qualifi typic smallest function,ignores inline qualifier typically smallest function
If the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function.,4.5,1.0,if the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function,"['function', 'small', 'enough', 'expand', 'run', 'faster', 'avoid', 'making', 'many', 'calls', 'function']",function small enough expand run faster avoid make mani call function,function small enough expand run faster avoid making many call function
it treats them as the same function,2.0,0.0,it treats them as the same function,"['treats', 'function']",treat function,treat function
"Inline functions are copied in place, instead of being referenced.",5.0,1.0,inline functions are copied in place instead of being referenced,"['inline', 'functions', 'copied', 'place', 'instead', 'referenced']",inlin function copi place instead referenc,inline function copied place instead referenced
"For inline functions, the compiler creates a copy of the function 's code in place so it does not have to make a function call and add to the function call stack.",5.0,1.0,for inline functions the compiler creates a copy of the function s code in place so it does not have to make a function call and add to the function call stack,"['inline', 'functions', 'compiler', 'creates', 'copy', 'function', 'code', 'place', 'make', 'function', 'call', 'add', 'function', 'call', 'stack']",inlin function compil creat copi function code place make function call add function call stack,inline function compiler creates copy function code place make function call add function call stack
it generates a copy of the function 's coding which eliminates calling the function,5.0,1.0,it generates a copy of the function s coding which eliminates calling the function,"['generates', 'copy', 'function', 'coding', 'eliminates', 'calling', 'function']",gener copi function code elimin call function,generates copy function coding eliminates calling function
not answered,0.0,0.0,not answered,['answered'],answer,answered
It generates a copy of the function 's code by by inserting it in the program.,4.5,1.0,it generates a copy of the function s code by by inserting it in the program,"['generates', 'copy', 'function', 'code', 'inserting', 'program']",gener copi function code insert program,generates copy function code inserting program
"tells the compiler to make a copy of function 's code in place to avoid a function call. it typically ignores it, except for the smallest functions.",5.0,1.0,tells the compiler to make a copy of function s code in place to avoid a function call it typically ignores it except for the smallest functions,"['tells', 'compiler', 'make', 'copy', 'function', 'code', 'place', 'avoid', 'function', 'call', 'typically', 'ignores', 'except', 'smallest', 'functions']",tell compil make copi function code place avoid function call typic ignor except smallest function,tell compiler make copy function code place avoid function call typically ignores except smallest function
The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,2.0,0.0,the compiler can ignore the inline qualifier and typically does so for all but the smallest functions,"['compiler', 'ignore', 'inline', 'qualifier', 'typically', 'smallest', 'functions']",compil ignor inlin qualifi typic smallest function,compiler ignore inline qualifier typically smallest function
"Multiple copies of the function code are inserted into the program, making it bigger.",4.5,1.0,multiple copies of the function code are inserted into the program making it bigger,"['multiple', 'copies', 'function', 'code', 'inserted', 'program', 'making', 'bigger']",multipl copi function code insert program make bigger,multiple copy function code inserted program making bigger
compiler ignores inline qualifier,2.5,0.0,compiler ignores inline qualifier,"['compiler', 'ignores', 'inline', 'qualifier']",compil ignor inlin qualifi,compiler ignores inline qualifier
"It generates a copy of the function, if it is needed again.",3.5,0.0,it generates a copy of the function if it is needed again,"['generates', 'copy', 'function', 'needed']",gener copi function need,generates copy function needed
"The complier includes copies of inline functions instead of making function calls, but usually only with very small functions.",5.0,1.0,the complier includes copies of inline functions instead of making function calls but usually only with very small functions,"['complier', 'includes', 'copies', 'inline', 'functions', 'instead', 'making', 'function', 'calls', 'usually', 'small', 'functions']",complier includ copi inlin function instead make function call usual small function,complier includes copy inline function instead making function call usually small function
Compiler generate a copy of the function 's code in placewhen appropriateto avoid a function call,5.0,1.0,compiler generate a copy of the function s code in placewhen appropriateto avoid a function call,"['compiler', 'generate', 'copy', 'function', 'code', 'placewhen', 'appropriateto', 'avoid', 'function', 'call']",compil gener copi function code placewhen appropriateto avoid function call,compiler generate copy function code placewhen appropriateto avoid function call
"instead of calling the function every time it is invoked, the compiler will replace the function call with a copy of the function body",5.0,1.0,instead of calling the function every time it is invoked the compiler will replace the function call with a copy of the function body,"['instead', 'calling', 'function', 'every', 'time', 'invoked', 'compiler', 'replace', 'function', 'call', 'copy', 'function', 'body']",instead call function everi time invok compil replac function call copi function bodi,instead calling function every time invoked compiler replace function call copy function body
Expands the function into the program,4.0,1.0,expands the function into the program,"['expands', 'function', 'program']",expand function program,expands function program
it generates a copy of the functions code in place to avoid a function call,5.0,1.0,it generates a copy of the functions code in place to avoid a function call,"['generates', 'copy', 'functions', 'code', 'place', 'avoid', 'function', 'call']",gener copi function code place avoid function call,generates copy function code place avoid function call
the function call will be replaced by the code that was defined in the inline function,5.0,1.0,the function call will be replaced by the code that was defined in the inline function,"['function', 'call', 'replaced', 'code', 'defined', 'inline', 'function']",function call replac code defin inlin function,function call replaced code defined inline function
"When the compiler inline-expands a function call, the function 's code gets inserted into the caller 's code streamconceptually similar to what happens with a define macro. This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code optimize the called code into the caller.",4.5,1.0,when the compiler inline-expands a function call the function s code gets inserted into the caller s code streamconceptually similar to what happens with a define macro this can depending on a zillion other things improve performance because the optimizer can procedurally integrate the called code optimize the called code into the caller,"['compiler', 'inline-expands', 'function', 'call', 'function', 'code', 'gets', 'inserted', 'caller', 'code', 'streamconceptually', 'similar', 'happens', 'define', 'macro', 'depending', 'zillion', 'things', 'improve', 'performance', 'optimizer', 'procedurally', 'integrate', 'called', 'code', 'optimize', 'called', 'code', 'caller']",compil inline-expand function call function code get insert caller code streamconceptu similar happen defin macro depend zillion thing improv perform optim procedur integr call code optim call code caller,compiler inline-expands function call function code get inserted caller code streamconceptually similar happens define macro depending zillion thing improve performance optimizer procedurally integrate called code optimize called code caller
Overall the program has better performancemeans it is fasterbecause it does not have to copy large amounts of data.,5.0,1.0,overall the program has better performancemeans it is fasterbecause it does not have to copy large amounts of data,"['overall', 'program', 'better', 'performancemeans', 'fasterbecause', 'copy', 'large', 'amounts', 'data']",overal program better performancemean fasterbecaus copi larg amount data,overall program better performancemeans fasterbecause copy large amount data
because you cannot change the original and passing by reference limits memory needed for the program.,4.5,1.0,because you cannot change the original and passing by reference limits memory needed for the program,"['change', 'original', 'passing', 'reference', 'limits', 'memory', 'needed', 'program']",chang origin pass refer limit memori need program,change original passing reference limit memory needed program
Passing by reference can eliminate the pass-by-value overhead of copying large amounts of data.,5.0,1.0,passing by reference can eliminate the pass-by-value overhead of copying large amounts of data,"['passing', 'reference', 'eliminate', 'pass-by-value', 'overhead', 'copying', 'large', 'amounts', 'data']",pass refer elimin pass-by-valu overhead copi larg amount data,passing reference eliminate pass-by-value overhead copying large amount data
"It is often more efficient to pass references, rather than large objects, to functions. This allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object.",5.0,1.0,it is often more efficient to pass references rather than large objects to functions this allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object,"['often', 'efficient', 'pass', 'references', 'rather', 'large', 'objects', 'functions', 'allows', 'compiler', 'pass', 'address', 'object', 'maintaining', 'syntax', 'would', 'used', 'access', 'object']",often effici pass refer rather larg object function allow compil pass address object maintain syntax would use access object,often efficient pas reference rather large object function allows compiler pas address object maintaining syntax would used access object
"Pass by reference is good for performance reasons, because it can eliminate the pass by value overhead of copying large amounts of data.",5.0,1.0,pass by reference is good for performance reasons because it can eliminate the pass by value overhead of copying large amounts of data,"['pass', 'reference', 'good', 'performance', 'reasons', 'eliminate', 'pass', 'value', 'overhead', 'copying', 'large', 'amounts', 'data']",pass refer good perform reason elimin pass valu overhead copi larg amount data,pas reference good performance reason eliminate pas value overhead copying large amount data
You do not alter the original value of the variable that was passed.,3.0,0.0,you do not alter the original value of the variable that was passed,"['alter', 'original', 'value', 'variable', 'passed']",alter origin valu variabl pass,alter original value variable passed
Do not have to make copies of stuff.,4.5,1.0,do not have to make copies of stuff,"['make', 'copies', 'stuff']",make copi stuff,make copy stuff
you do not use unessesary memory space to copy variables between functions,5.0,1.0,you do not use unessesary memory space to copy variables between functions,"['use', 'unessesary', 'memory', 'space', 'copy', 'variables', 'functions']",use unessesari memori space copi variabl function,use unessesary memory space copy variable function
It elimitates the need to copy large amonts of data,5.0,1.0,it elimitates the need to copy large amonts of data,"['elimitates', 'need', 'copy', 'large', 'amonts', 'data']",elimit need copi larg amont data,elimitates need copy large amonts data
The function can change the data stored in a variable passed by reference directly.,3.5,0.0,the function can change the data stored in a variable passed by reference directly,"['function', 'change', 'data', 'stored', 'variable', 'passed', 'reference', 'directly']",function chang data store variabl pass refer directli,function change data stored variable passed reference directly
Gives called function the ability to access and modify the caller s argument data.,3.5,0.0,gives called function the ability to access and modify the caller s argument data,"['gives', 'called', 'function', 'ability', 'access', 'modify', 'caller', 'argument', 'data']",give call function abil access modifi caller argument data,give called function ability access modify caller argument data
Gives called function the ability to access and modify the caller s argument data directly.,3.5,0.0,gives called function the ability to access and modify the caller s argument data directly,"['gives', 'called', 'function', 'ability', 'access', 'modify', 'caller', 'argument', 'data', 'directly']",give call function abil access modifi caller argument data directli,give called function ability access modify caller argument data directly
It is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere.,3.0,0.0,it is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere,"['efficient', 'changes', 'variable', 'online', 'inside', 'function', 'outside', 'new', 'value', 'used', 'elsewhere']",effici chang variabl onlin insid function outsid new valu use elsewher,efficient change variable online inside function outside new value used elsewhere
you do not make another copy and waste memory,5.0,1.0,you do not make another copy and waste memory,"['make', 'another', 'copy', 'waste', 'memory']",make anoth copi wast memori,make another copy waste memory
"Passing by reference eliminates the copying of large amounts of data, typical with pass by value.",5.0,1.0,passing by reference eliminates the copying of large amounts of data typical with pass by value,"['passing', 'reference', 'eliminates', 'copying', 'large', 'amounts', 'data', 'typical', 'pass', 'value']",pass refer elimin copi larg amount data typic pass valu,passing reference eliminates copying large amount data typical pas value
"If a function 's arguments are large in size, computing time and memory space is not wasted copying down the argument and passing it to the function. Also pass by reference gives the function called the permission to read edit the argument directly.",5.0,1.0,if a function s arguments are large in size computing time and memory space is not wasted copying down the argument and passing it to the function also pass by reference gives the function called the permission to read edit the argument directly,"['function', 'arguments', 'large', 'size', 'computing', 'time', 'memory', 'space', 'wasted', 'copying', 'argument', 'passing', 'function', 'also', 'pass', 'reference', 'gives', 'function', 'called', 'permission', 'read', 'edit', 'argument', 'directly']",function argument larg size comput time memori space wast copi argument pass function also pass refer give function call permiss read edit argument directli,function argument large size computing time memory space wasted copying argument passing function also pas reference give function called permission read edit argument directly
"Gives access to the caller data directly, also it allows for modifying the data.",3.5,0.0,gives access to the caller data directly also it allows for modifying the data,"['gives', 'access', 'caller', 'data', 'directly', 'also', 'allows', 'modifying', 'data']",give access caller data directli also allow modifi data,give access caller data directly also allows modifying data
"less overhead overall, and you modify the variable directly.",3.5,0.0,less overhead overall and you modify the variable directly,"['less', 'overhead', 'overall', 'modify', 'variable', 'directly']",less overhead overal modifi variabl directli,le overhead overall modify variable directly
The original variable being referenced can be modified directly by the called function.,3.0,0.0,the original variable being referenced can be modified directly by the called function,"['original', 'variable', 'referenced', 'modified', 'directly', 'called', 'function']",origin variabl referenc modifi directli call function,original variable referenced modified directly called function
gives function ability to access and modify the caller 's argument data directly,3.5,0.0,gives function ability to access and modify the caller s argument data directly,"['gives', 'function', 'ability', 'access', 'modify', 'caller', 'argument', 'data', 'directly']",give function abil access modifi caller argument data directli,give function ability access modify caller argument data directly
Gives the called function the ability to access and modify the caller 's argument data directly.,3.0,0.0,gives the called function the ability to access and modify the caller s argument data directly,"['gives', 'called', 'function', 'ability', 'access', 'modify', 'caller', 'argument', 'data', 'directly']",give call function abil access modifi caller argument data directli,give called function ability access modify caller argument data directly
"Less overhead than passed by value, especially when using large numbers.",3.5,0.0,less overhead than passed by value especially when using large numbers,"['less', 'overhead', 'passed', 'value', 'especially', 'using', 'large', 'numbers']",less overhead pass valu especi use larg number,le overhead passed value especially using large number
"large data items can be passed without copying the entire data point, reducing execution time and the amout of memory space needed",5.0,1.0,large data items can be passed without copying the entire data point reducing execution time and the amout of memory space needed,"['large', 'data', 'items', 'passed', 'without', 'copying', 'entire', 'data', 'point', 'reducing', 'execution', 'time', 'amout', 'memory', 'space', 'needed']",larg data item pass without copi entir data point reduc execut time amout memori space need,large data item passed without copying entire data point reducing execution time amout memory space needed
The data can be modified directly instead of making a copy of the data. Improves execution time with large amounts of data.,4.0,1.0,the data can be modified directly instead of making a copy of the data improves execution time with large amounts of data,"['data', 'modified', 'directly', 'instead', 'making', 'copy', 'data', 'improves', 'execution', 'time', 'large', 'amounts', 'data']",data modifi directli instead make copi data improv execut time larg amount data,data modified directly instead making copy data improves execution time large amount data
Functions can directly modify arguments that are passed by reference.,3.5,0.0,functions can directly modify arguments that are passed by reference,"['functions', 'directly', 'modify', 'arguments', 'passed', 'reference']",function directli modifi argument pass refer,function directly modify argument passed reference
It gives access and modify the caller 's argument data directly. It eliminate the pass by value overhead of copying large amounts ofdata,5.0,1.0,it gives access and modify the caller s argument data directly it eliminate the pass by value overhead of copying large amounts ofdata,"['gives', 'access', 'modify', 'caller', 'argument', 'data', 'directly', 'eliminate', 'pass', 'value', 'overhead', 'copying', 'large', 'amounts', 'ofdata']",give access modifi caller argument data directli elimin pass valu overhead copi larg amount ofdata,give access modify caller argument data directly eliminate pas value overhead copying large amount ofdata
"it takes less memory, thus it would make the program faster",4.0,1.0,it takes less memory thus it would make the program faster,"['takes', 'less', 'memory', 'thus', 'would', 'make', 'program', 'faster']",take less memori thu would make program faster,take le memory thus would make program faster
You are able to modify the variable that is referenced directly.,3.5,0.0,you are able to modify the variable that is referenced directly,"['able', 'modify', 'variable', 'referenced', 'directly']",abl modifi variabl referenc directli,able modify variable referenced directly
"if you pass by reference, you can modify the value as opposed to passing by value where you cannot change the value",3.5,0.0,if you pass by reference you can modify the value as opposed to passing by value where you cannot change the value,"['pass', 'reference', 'modify', 'value', 'opposed', 'passing', 'value', 'change', 'value']",pass refer modifi valu oppos pass valu chang valu,pas reference modify value opposed passing value change value
"only the memory address is sent to the function, so no copy of the object sent needs to be made. It makes the function run faster, and saves memory.",5.0,1.0,only the memory address is sent to the function so no copy of the object sent needs to be made it makes the function run faster and saves memory,"['memory', 'address', 'sent', 'function', 'copy', 'object', 'sent', 'needs', 'made', 'makes', 'function', 'run', 'faster', 'saves', 'memory']",memori address sent function copi object sent need made make function run faster save memori,memory address sent function copy object sent need made make function run faster save memory
"Actual arguments are associated with dummy arguments when a function or subroutine is referenced. In a procedure reference, the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram",3.0,0.0,actual arguments are associated with dummy arguments when a function or subroutine is referenced in a procedure reference the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram,"['actual', 'arguments', 'associated', 'dummy', 'arguments', 'function', 'subroutine', 'referenced', 'procedure', 'reference', 'actual', 'argument', 'list', 'identifies', 'correspondence', 'actual', 'arguments', 'provided', 'list', 'dummy', 'arguments', 'subprogram']",actual argument associ dummi argument function subroutin referenc procedur refer actual argument list identifi correspond actual argument provid list dummi argument subprogram,actual argument associated dummy argument function subroutine referenced procedure reference actual argument list identifies correspondence actual argument provided list dummy argument subprogram
"The compiler selects the proper functions to execute based on number, types and order of arguments in the function call.",5.0,1.0,the compiler selects the proper functions to execute based on number types and order of arguments in the function call,"['compiler', 'selects', 'proper', 'functions', 'execute', 'based', 'number', 'types', 'order', 'arguments', 'function', 'call']",compil select proper function execut base number type order argument function call,compiler selects proper function execute based number type order argument function call
They differentiated by the compiler by the conditions or inputs used for one of the overloaded functions.,3.0,0.0,they differentiated by the compiler by the conditions or inputs used for one of the overloaded functions,"['differentiated', 'compiler', 'conditions', 'inputs', 'used', 'one', 'overloaded', 'functions']",differenti compil condit input use one overload function,differentiated compiler condition input used one overloaded function
"The compiler distinguishes overloaded functions by their signatures. It encodes each function identifier with the number and types of its parameters to generate type-safe linkage, which ensures the proper overloaded function is called.",5.0,1.0,the compiler distinguishes overloaded functions by their signatures it encodes each function identifier with the number and types of its parameters to generate type-safe linkage which ensures the proper overloaded function is called,"['compiler', 'distinguishes', 'overloaded', 'functions', 'signatures', 'encodes', 'function', 'identifier', 'number', 'types', 'parameters', 'generate', 'type-safe', 'linkage', 'ensures', 'proper', 'overloaded', 'function', 'called']",compil distinguish overload function signatur encod function identifi number type paramet gener type-saf linkag ensur proper overload function call,compiler distinguishes overloaded function signature encodes function identifier number type parameter generate type-safe linkage ensures proper overloaded function called
"Overloaded functions are distinguished by their signatures, Name mangling or name decoration, and type-safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters.",5.0,1.0,overloaded functions are distinguished by their signatures name mangling or name decoration and type-safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters,"['overloaded', 'functions', 'distinguished', 'signatures', 'name', 'mangling', 'name', 'decoration', 'type-safe', 'linkage', 'ensures', 'proper', 'overloaded', 'functions', 'called', 'types', 'arguments', 'conform', 'tpes', 'parameters']",overload function distinguish signatur name mangl name decor type-saf linkag ensur proper overload function call type argument conform tpe paramet,overloaded function distinguished signature name mangling name decoration type-safe linkage ensures proper overloaded function called type argument conform tpes parameter
"The compiler selects proper function to execute based on number, types and order of arguments in the function call.",5.0,1.0,the compiler selects proper function to execute based on number types and order of arguments in the function call,"['compiler', 'selects', 'proper', 'function', 'execute', 'based', 'number', 'types', 'order', 'arguments', 'function', 'call']",compil select proper function execut base number type order argument function call,compiler selects proper function execute based number type order argument function call
"By the type they are initilized withint, char, etc.",3.0,0.0,by the type they are initilized withint char etc,"['type', 'initilized', 'withint', 'char', 'etc']",type initil withint char etc,type initilized withint char etc
"It selects the proper function to execute based on number, types and order of arguments in the function call.",5.0,1.0,it selects the proper function to execute based on number types and order of arguments in the function call,"['selects', 'proper', 'function', 'execute', 'based', 'number', 'types', 'order', 'arguments', 'function', 'call']",select proper function execut base number type order argument function call,selects proper function execute based number type order argument function call
overloaded functions must have the same return type but different input parameters,3.0,0.0,overloaded functions must have the same return type but different input parameters,"['overloaded', 'functions', 'must', 'return', 'type', 'different', 'input', 'parameters']",overload function must return type differ input paramet,overloaded function must return type different input parameter
"It examines the names, types, and order of arguments on each function.",5.0,1.0,it examines the names types and order of arguments on each function,"['examines', 'names', 'types', 'order', 'arguments', 'function']",examin name type order argument function,examines name type order argument function
unique function signatures,5.0,1.0,unique function signatures,"['unique', 'function', 'signatures']",uniqu function signatur,unique function signature
"Is based on number, types, and order of arguments in the function call.",5.0,1.0,is based on number types and order of arguments in the function call,"['based', 'number', 'types', 'order', 'arguments', 'function', 'call']",base number type order argument function call,based number type order argument function call
"Compiler selects proper function to execute based on number, types and order of arguments in the function call.",5.0,1.0,compiler selects proper function to execute based on number types and order of arguments in the function call,"['compiler', 'selects', 'proper', 'function', 'execute', 'based', 'number', 'types', 'order', 'arguments', 'function', 'call']",compil select proper function execut base number type order argument function call,compiler selects proper function execute based number type order argument function call
not answered,0.0,0.0,not answered,['answered'],answer,answered
"they have to have same return type, but different input parameters",3.0,0.0,they have to have same return type but different input parameters,"['return', 'type', 'different', 'input', 'parameters']",return type differ input paramet,return type different input parameter
Overloaded functions are differentiated by their parameters.,4.5,1.0,overloaded functions are differentiated by their parameters,"['overloaded', 'functions', 'differentiated', 'parameters']",overload function differenti paramet,overloaded function differentiated parameter
"The compiler selects the right function to execute from the number, types and order of arguments in the function call.",5.0,1.0,the compiler selects the right function to execute from the number types and order of arguments in the function call,"['compiler', 'selects', 'right', 'function', 'execute', 'number', 'types', 'order', 'arguments', 'function', 'call']",compil select right function execut number type order argument function call,compiler selects right function execute number type order argument function call
it creates a set of candidate functions then a set of viable functions,3.0,0.0,it creates a set of candidate functions then a set of viable functions,"['creates', 'set', 'candidate', 'functions', 'set', 'viable', 'functions']",creat set candid function set viabl function,creates set candidate function set viable function
their function signature.,5.0,1.0,their function signature,"['function', 'signature']",function signatur,function signature
The number and type of its parameters.,5.0,1.0,the number and type of its parameters,"['number', 'type', 'parameters']",number type paramet,number type parameter
by their function signature,5.0,1.0,by their function signature,"['function', 'signature']",function signatur,function signature
"They have the same name, just different parameters.",3.5,0.0,they have the same name just different parameters,"['name', 'different', 'parameters']",name differ paramet,name different parameter
"They are differntiated by number, types and order of arguments in the function call.",5.0,1.0,they are differntiated by number types and order of arguments in the function call,"['differntiated', 'number', 'types', 'order', 'arguments', 'function', 'call']",differnti number type order argument function call,differntiated number type order argument function call
"it looks at the number, types, and order of arguments in the function call",5.0,1.0,it looks at the number types and order of arguments in the function call,"['looks', 'number', 'types', 'order', 'arguments', 'function', 'call']",look number type order argument function call,look number type order argument function call
The compiler differentiates overloaded functions by their signature.,5.0,1.0,the compiler differentiates overloaded functions by their signature,"['compiler', 'differentiates', 'overloaded', 'functions', 'signature']",compil differenti overload function signatur,compiler differentiates overloaded function signature
"By the number, types, and order of their arguments",5.0,1.0,by the number types and order of their arguments,"['number', 'types', 'order', 'arguments']",number type order argument,number type order argument
"Compiler selects proper function to execute based on number, types and order of arguments in the function call.",5.0,1.0,compiler selects proper function to execute based on number types and order of arguments in the function call,"['compiler', 'selects', 'proper', 'function', 'execute', 'based', 'number', 'types', 'order', 'arguments', 'function', 'call']",compil select proper function execut base number type order argument function call,compiler selects proper function execute based number type order argument function call
paremeters,4.5,1.0,paremeters,['paremeters'],paremet,paremeters
"By the number, and the types and order of the parameters.",5.0,1.0,by the number and the types and order of the parameters,"['number', 'types', 'order', 'parameters']",number type order paramet,number type order parameter
by the number and type of arguments,5.0,1.0,by the number and type of arguments,"['number', 'type', 'arguments']",number type argument,number type argument
"by their signaturereturn type, argument list",4.0,1.0,by their signaturereturn type argument list,"['signaturereturn', 'type', 'argument', 'list']",signaturereturn type argument list,signaturereturn type argument list
overloaded function simply invovles haing a method with the same name within the class. is used to implement a method for subclass which overrides in other words replaces the implementation of the super class. Overloading the concept of providing different meaning to a object based on the context of its presence. Overloading is one type of polymorphism and this is also a feature in programing.,3.0,0.0,overloaded function simply invovles haing a method with the same name within the class is used to implement a method for subclass which overrides in other words replaces the implementation of the super class overloading the concept of providing different meaning to a object based on the context of its presence overloading is one type of polymorphism and this is also a feature in programing,"['overloaded', 'function', 'simply', 'invovles', 'haing', 'method', 'name', 'within', 'class', 'used', 'implement', 'method', 'subclass', 'overrides', 'words', 'replaces', 'implementation', 'super', 'class', 'overloading', 'concept', 'providing', 'different', 'meaning', 'object', 'based', 'context', 'presence', 'overloading', 'one', 'type', 'polymorphism', 'also', 'feature', 'programing']",overload function simpli invovl ha method name within class use implement method subclass overrid word replac implement super class overload concept provid differ mean object base context presenc overload one type polymorph also featur program,overloaded function simply invovles haing method name within class used implement method subclass override word replaces implementation super class overloading concept providing different meaning object based context presence overloading one type polymorphism also feature programing
"A base case that is the simplest case for a problem so that the function will lead to it, if this does not happen then it will end up as an infinite loop. And a condition to know when to terminate.",5.0,1.0,a base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop and a condition to know when to terminate,"['base', 'case', 'simplest', 'case', 'problem', 'function', 'lead', 'happen', 'end', 'infinite', 'loop', 'condition', 'know', 'terminate']",base case simplest case problem function lead happen end infinit loop condit know termin,base case simplest case problem function lead happen end infinite loop condition know terminate
badly designed algorithyms. using recursion for a non recursive problem.,2.5,0.0,badly designed algorithyms using recursion for a non recursive problem,"['badly', 'designed', 'algorithyms', 'using', 'recursion', 'non', 'recursive', 'problem']",badli design algorithym use recurs non recurs problem,badly designed algorithyms using recursion non recursive problem
Infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case.,5.0,1.0,infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case,"['infinite', 'recursion', 'occur', 'base', 'case', 'omitted', 'recursion', 'step', 'written', 'incorrectly', 'never', 'converges', 'base', 'case']",infinit recurs occur base case omit recurs step written incorrectli never converg base case,infinite recursion occur base case omitted recursion step written incorrectly never converges base case
"Infinite recursion is an infinite loop if the condition is not met. Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case causes indefinite recursion, eventually exhausting memory.",5.0,1.0,infinite recursion is an infinite loop if the condition is not met either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case causes indefinite recursion eventually exhausting memory,"['infinite', 'recursion', 'infinite', 'loop', 'condition', 'met', 'either', 'omitting', 'base', 'case', 'writing', 'recursion', 'step', 'incorrectly', 'converge', 'base', 'case', 'causes', 'indefinite', 'recursion', 'eventually', 'exhausting', 'memory']",infinit recurs infinit loop condit met either omit base case write recurs step incorrectli converg base case caus indefinit recurs eventu exhaust memori,infinite recursion infinite loop condition met either omitting base case writing recursion step incorrectly converge base case cause indefinite recursion eventually exhausting memory
Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case can cause an infinite recursion.,5.0,1.0,either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case can cause an infinite recursion,"['either', 'omitting', 'base', 'case', 'writing', 'recursion', 'step', 'incorrectly', 'converge', 'base', 'case', 'cause', 'infinite', 'recursion']",either omit base case write recurs step incorrectli converg base case caus infinit recurs,either omitting base case writing recursion step incorrectly converge base case cause infinite recursion
Not having a base case that returns a base value.,4.0,1.0,not having a base case that returns a base value,"['base', 'case', 'returns', 'base', 'value']",base case return base valu,base case return base value
Incorrect or missing base case. Must reduce to the base case. The function must get simpler each time it is runconverge to the base case.,5.0,1.0,incorrect or missing base case must reduce to the base case the function must get simpler each time it is runconverge to the base case,"['incorrect', 'missing', 'base', 'case', 'must', 'reduce', 'base', 'case', 'function', 'must', 'get', 'simpler', 'time', 'runconverge', 'base', 'case']",incorrect miss base case must reduc base case function must get simpler time runconverg base case,incorrect missing base case must reduce base case function must get simpler time runconverge base case
no base case no change in values.,4.5,1.0,no base case no change in values,"['base', 'case', 'change', 'values']",base case chang valu,base case change value
"If at each recursive call the problem does not diminish or if it does not diminish to a base case, can cause infinite recursion.",5.0,1.0,if at each recursive call the problem does not diminish or if it does not diminish to a base case can cause infinite recursion,"['recursive', 'call', 'problem', 'diminish', 'diminish', 'base', 'case', 'cause', 'infinite', 'recursion']",recurs call problem diminish diminish base case caus infinit recurs,recursive call problem diminish diminish base case cause infinite recursion
Omitting the base case or incorrectly calling the recursive step.,5.0,1.0,omitting the base case or incorrectly calling the recursive step,"['omitting', 'base', 'case', 'incorrectly', 'calling', 'recursive', 'step']",omit base case incorrectli call recurs step,omitting base case incorrectly calling recursive step
The recursive problem cannot be reduced to reach the base case.,4.5,1.0,the recursive problem cannot be reduced to reach the base case,"['recursive', 'problem', 'reduced', 'reach', 'base', 'case']",recurs problem reduc reach base case,recursive problem reduced reach base case
"Lack of defining a base case, or writing the recursion step incorrectly so that it does not converge on the base case",5.0,1.0,lack of defining a base case or writing the recursion step incorrectly so that it does not converge on the base case,"['lack', 'defining', 'base', 'case', 'writing', 'recursion', 'step', 'incorrectly', 'converge', 'base', 'case']",lack defin base case write recurs step incorrectli converg base case,lack defining base case writing recursion step incorrectly converge base case
Not having the proper case to leave the recursion,4.0,1.0,not having the proper case to leave the recursion,"['proper', 'case', 'leave', 'recursion']",proper case leav recurs,proper case leave recursion
"no base case, or the recursive calls do not converge to the base case",5.0,1.0,no base case or the recursive calls do not converge to the base case,"['base', 'case', 'recursive', 'calls', 'converge', 'base', 'case']",base case recurs call converg base case,base case recursive call converge base case
"No base case, or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion.",5.0,1.0,no base case or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion,"['base', 'case', 'incorrectly', 'written', 'recursion', 'step', 'converge', 'base', 'case', 'lead', 'infinite', 'recursion']",base case incorrectli written recurs step converg base case lead infinit recurs,base case incorrectly written recursion step converge base case lead infinite recursion
"If the recursion function never reaches or successfully defines the base case it will recurse forever. This happens many ways, such as the function does not progress towards the base case, or the function is coded poorly and does not even contain a base case.",5.0,1.0,if the recursion function never reaches or successfully defines the base case it will recurse forever this happens many ways such as the function does not progress towards the base case or the function is coded poorly and does not even contain a base case,"['recursion', 'function', 'never', 'reaches', 'successfully', 'defines', 'base', 'case', 'recurse', 'forever', 'happens', 'many', 'ways', 'function', 'progress', 'towards', 'base', 'case', 'function', 'coded', 'poorly', 'even', 'contain', 'base', 'case']",recurs function never reach success defin base case recurs forev happen mani way function progress toward base case function code poorli even contain base case,recursion function never reach successfully defines base case recurse forever happens many way function progress towards base case function coded poorly even contain base case
"not creating a base case, or in the case where the base case will never be met.",5.0,1.0,not creating a base case or in the case where the base case will never be met,"['creating', 'base', 'case', 'case', 'base', 'case', 'never', 'met']",creat base case case base case never met,creating base case case base case never met
improper handling of cases such that not all possible values are able to be handled.,3.5,0.0,improper handling of cases such that not all possible values are able to be handled,"['improper', 'handling', 'cases', 'possible', 'values', 'able', 'handled']",improp handl case possibl valu abl handl,improper handling case possible value able handled
There is no base case. The recursion step does not reduce the problem during each recursive call.,4.5,1.0,there is no base case the recursion step does not reduce the problem during each recursive call,"['base', 'case', 'recursion', 'step', 'reduce', 'problem', 'recursive', 'call']",base case recurs step reduc problem recurs call,base case recursion step reduce problem recursive call
"no base case, as in a single return that does not include calling the function again. a static value to end at.",3.5,0.0,no base case as in a single return that does not include calling the function again a static value to end at,"['base', 'case', 'single', 'return', 'include', 'calling', 'function', 'static', 'value', 'end']",base case singl return includ call function static valu end,base case single return include calling function static value end
"Either omitting the base case, or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion.",5.0,1.0,either omitting the base case or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion,"['either', 'omitting', 'base', 'case', 'writing', 'recursion', 'step', 'incorrectly', 'reach', 'base', 'case', 'cause', 'infinite', 'recursion']",either omit base case write recurs step incorrectli reach base case caus infinit recurs,either omitting base case writing recursion step incorrectly reach base case cause infinite recursion
omitting the base case or writing the recursive call so that it does not converge upon the base case.,5.0,1.0,omitting the base case or writing the recursive call so that it does not converge upon the base case,"['omitting', 'base', 'case', 'writing', 'recursive', 'call', 'converge', 'upon', 'base', 'case']",omit base case write recurs call converg upon base case,omitting base case writing recursive call converge upon base case
"Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case",5.0,1.0,either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case,"['either', 'omitting', 'base', 'case', 'writing', 'recursion', 'step', 'incorrectly', 'converge', 'base', 'case']",either omit base case write recurs step incorrectli converg base case,either omitting base case writing recursion step incorrectly converge base case
Infinite recursion may occur if no base case is defined or if the call is not varied.,4.5,1.0,infinite recursion may occur if no base case is defined or if the call is not varied,"['infinite', 'recursion', 'may', 'occur', 'base', 'case', 'defined', 'call', 'varied']",infinit recurs may occur base case defin call vari,infinite recursion may occur base case defined call varied
"Not having a base case, or building a recursion process that does not converge on the base case.",5.0,1.0,not having a base case or building a recursion process that does not converge on the base case,"['base', 'case', 'building', 'recursion', 'process', 'converge', 'base', 'case']",base case build recurs process converg base case,base case building recursion process converge base case
"Either omitting the base case, or writing the recursion step incorerectly",5.0,1.0,either omitting the base case or writing the recursion step incorerectly,"['either', 'omitting', 'base', 'case', 'writing', 'recursion', 'step', 'incorerectly']",either omit base case write recurs step incorerectli,either omitting base case writing recursion step incorerectly
no base case or if the programmar does not define the base case as the simplest case and it never gets reached,5.0,1.0,no base case or if the programmar does not define the base case as the simplest case and it never gets reached,"['base', 'case', 'programmar', 'define', 'base', 'case', 'simplest', 'case', 'never', 'gets', 'reached']",base case programmar defin base case simplest case never get reach,base case programmar define base case simplest case never get reached
No easily reached base case and no base case at all,5.0,1.0,no easily reached base case and no base case at all,"['easily', 'reached', 'base', 'case', 'base', 'case']",easili reach base case base case,easily reached base case base case
function is never allowed to reach the base case,5.0,1.0,function is never allowed to reach the base case,"['function', 'never', 'allowed', 'reach', 'base', 'case']",function never allow reach base case,function never allowed reach base case
"it has no base case, or the base case is never met",5.0,1.0,it has no base case or the base case is never met,"['base', 'case', 'base', 'case', 'never', 'met']",base case base case never met,base case base case never met
recursion refers to situations in which functions call themselves. These types of functions are known as recursive functions. That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes,3.0,0.0,recursion refers to situations in which functions call themselves these types of functions are known as recursive functions that being said infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes,"['recursion', 'refers', 'situations', 'functions', 'call', 'types', 'functions', 'known', 'recursive', 'functions', 'said', 'infinite', 'recursion', 'occurs', 'function', 'designed', 'way', 'call', 'self', 'forever', 'without', 'stopping', 'possible', 'causes']",recurs refer situat function call type function known recurs function said infinit recurs occur function design way call self forev without stop possibl caus,recursion refers situation function call type function known recursive function said infinite recursion occurs function designed way call self forever without stopping possible cause
"Both involve a controlled repetition structures, and they both have a termination test. Also both of them can loop forever.",5.0,1.0,both involve a controlled repetition structures and they both have a termination test also both of them can loop forever,"['involve', 'controlled', 'repetition', 'structures', 'termination', 'test', 'also', 'loop', 'forever']",involv control repetit structur termin test also loop forev,involve controlled repetition structure termination test also loop forever
"As discussed earlier, recursion may be used to process iterative actions. Recursion is used for calculations where the answer can be described in a function that relates to itself.",2.0,0.0,as discussed earlier recursion may be used to process iterative actions recursion is used for calculations where the answer can be described in a function that relates to itself,"['discussed', 'earlier', 'recursion', 'may', 'used', 'process', 'iterative', 'actions', 'recursion', 'used', 'calculations', 'answer', 'described', 'function', 'relates']",discuss earlier recurs may use process iter action recurs use calcul answer describ function relat,discussed earlier recursion may used process iterative action recursion used calculation answer described function relates
Both iteration and recursion are based on control statements and involve repetition. They can both also occur indefinitely.,5.0,1.0,both iteration and recursion are based on control statements and involve repetition they can both also occur indefinitely,"['iteration', 'recursion', 'based', 'control', 'statements', 'involve', 'repetition', 'also', 'occur', 'indefinitely']",iter recurs base control statement involv repetit also occur indefinit,iteration recursion based control statement involve repetition also occur indefinitely
Both are based on a control statement Iteration-repetition structure Recursion-selection structure Both involve repetition Iteration-explicitly uses repetition structure Recursion-repeated function calls Both involve a termination test Iteration-loop-termination test Recursion-base case Both gradually approach termination Iteration-modifies counter until loop-termination test fails Recursion-produces progressively simpler versions of problem Both can occur indefinitely Iteration-if loop-continuation condition never fails Recursion-if recursion step does not simplify the problem,5.0,1.0,both are based on a control statement iteration-repetition structure recursion-selection structure both involve repetition iteration-explicitly uses repetition structure recursion-repeated function calls both involve a termination test iteration-loop-termination test recursion-base case both gradually approach termination iteration-modifies counter until loop-termination test fails recursion-produces progressively simpler versions of problem both can occur indefinitely iteration-if loop-continuation condition never fails recursion-if recursion step does not simplify the problem,"['based', 'control', 'statement', 'iteration-repetition', 'structure', 'recursion-selection', 'structure', 'involve', 'repetition', 'iteration-explicitly', 'uses', 'repetition', 'structure', 'recursion-repeated', 'function', 'calls', 'involve', 'termination', 'test', 'iteration-loop-termination', 'test', 'recursion-base', 'case', 'gradually', 'approach', 'termination', 'iteration-modifies', 'counter', 'loop-termination', 'test', 'fails', 'recursion-produces', 'progressively', 'simpler', 'versions', 'problem', 'occur', 'indefinitely', 'iteration-if', 'loop-continuation', 'condition', 'never', 'fails', 'recursion-if', 'recursion', 'step', 'simplify', 'problem']",base control statement iteration-repetit structur recursion-select structur involv repetit iteration-explicitli use repetit structur recursion-rep function call involv termin test iteration-loop-termin test recursion-bas case gradual approach termin iteration-modifi counter loop-termin test fail recursion-produc progress simpler version problem occur indefinit iteration-if loop-continu condit never fail recursion-if recurs step simplifi problem,based control statement iteration-repetition structure recursion-selection structure involve repetition iteration-explicitly us repetition structure recursion-repeated function call involve termination test iteration-loop-termination test recursion-base case gradually approach termination iteration-modifies counter loop-termination test fails recursion-produces progressively simpler version problem occur indefinitely iteration-if loop-continuation condition never fails recursion-if recursion step simplify problem
"Iteration and recursion have many similarities: both are based on a control statement, involve repetition, involve a termination test, gradually approach termination and can occur infinitely.",5.0,1.0,iteration and recursion have many similarities both are based on a control statement involve repetition involve a termination test gradually approach termination and can occur infinitely,"['iteration', 'recursion', 'many', 'similarities', 'based', 'control', 'statement', 'involve', 'repetition', 'involve', 'termination', 'test', 'gradually', 'approach', 'termination', 'occur', 'infinitely']",iter recurs mani similar base control statement involv repetit involv termin test gradual approach termin occur infinit,iteration recursion many similarity based control statement involve repetition involve termination test gradually approach termination occur infinitely
"Both rely on repetition, both have a base case, both can become an infinite loop. Anything recursive can also be solved with iteration.",5.0,1.0,both rely on repetition both have a base case both can become an infinite loop anything recursive can also be solved with iteration,"['rely', 'repetition', 'base', 'case', 'become', 'infinite', 'loop', 'anything', 'recursive', 'also', 'solved', 'iteration']",reli repetit base case becom infinit loop anyth recurs also solv iter,rely repetition base case become infinite loop anything recursive also solved iteration
"Both will repeatloopuntil a condition is met, and exit the loop. Both are capable of entering an infinite loop.",4.0,1.0,both will repeatloopuntil a condition is met and exit the loop both are capable of entering an infinite loop,"['repeatloopuntil', 'condition', 'met', 'exit', 'loop', 'capable', 'entering', 'infinite', 'loop']",repeatloopuntil condit met exit loop capabl enter infinit loop,repeatloopuntil condition met exit loop capable entering infinite loop
anything you can do iterativly you can do recursively,3.0,0.0,anything you can do iterativly you can do recursively,"['anything', 'iterativly', 'recursively']",anyth iterativli recurs,anything iterativly recursively
Both are repetative and both have a end test.,4.5,1.0,both are repetative and both have a end test,"['repetative', 'end', 'test']",repet end test,repetative end test
"Incorrectly writing either can result in infinite loops, both perform the same task over and over.",3.5,0.0,incorrectly writing either can result in infinite loops both perform the same task over and over,"['incorrectly', 'writing', 'either', 'result', 'infinite', 'loops', 'perform', 'task']",incorrectli write either result infinit loop perform task,incorrectly writing either result infinite loop perform task
Both are based on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.,5.0,1.0,both are based on a control statement both involve repetition both involve a termination test both gradually approach termination both can occur infinitely,"['based', 'control', 'statement', 'involve', 'repetition', 'involve', 'termination', 'test', 'gradually', 'approach', 'termination', 'occur', 'infinitely']",base control statement involv repetit involv termin test gradual approach termin occur infinit,based control statement involve repetition involve termination test gradually approach termination occur infinitely
"Both are based on a control statement, Both involve repetition, Both involve a termination test, Both gradually approach termination, Both can occur infinitely",5.0,1.0,both are based on a control statement both involve repetition both involve a termination test both gradually approach termination both can occur infinitely,"['based', 'control', 'statement', 'involve', 'repetition', 'involve', 'termination', 'test', 'gradually', 'approach', 'termination', 'occur', 'infinitely']",base control statement involv repetit involv termin test gradual approach termin occur infinit,based control statement involve repetition involve termination test gradually approach termination occur infinitely
not answered,0.0,0.0,not answered,['answered'],answer,answered
anything you can do recursively you can do iteratively,3.0,0.0,anything you can do recursively you can do iteratively,"['anything', 'recursively', 'iteratively']",anyth recurs iter,anything recursively iteratively
"Many problems can be solved by both iteration and recursion, and either may go into a condition of infinite execution if a termination test is omitted.",3.5,0.0,many problems can be solved by both iteration and recursion and either may go into a condition of infinite execution if a termination test is omitted,"['many', 'problems', 'solved', 'iteration', 'recursion', 'either', 'may', 'go', 'condition', 'infinite', 'execution', 'termination', 'test', 'omitted']",mani problem solv iter recurs either may go condit infinit execut termin test omit,many problem solved iteration recursion either may go condition infinite execution termination test omitted
"Iteration and recursion both use repetition and perform several simple operations and algorithms successively until they reach a certain limit. So both involve a termination test to find that limit and both slowly approach that termination limit. Both are based on a control statement as well. If coded poorly, both can continue on for forever until the compiler or the computer either locks up, shuts down or halts the operation.",5.0,1.0,iteration and recursion both use repetition and perform several simple operations and algorithms successively until they reach a certain limit so both involve a termination test to find that limit and both slowly approach that termination limit both are based on a control statement as well if coded poorly both can continue on for forever until the compiler or the computer either locks up shuts down or halts the operation,"['iteration', 'recursion', 'use', 'repetition', 'perform', 'several', 'simple', 'operations', 'algorithms', 'successively', 'reach', 'certain', 'limit', 'involve', 'termination', 'test', 'find', 'limit', 'slowly', 'approach', 'termination', 'limit', 'based', 'control', 'statement', 'well', 'coded', 'poorly', 'continue', 'forever', 'compiler', 'computer', 'either', 'locks', 'shuts', 'halts', 'operation']",iter recurs use repetit perform sever simpl oper algorithm success reach certain limit involv termin test find limit slowli approach termin limit base control statement well code poorli continu forev compil comput either lock shut halt oper,iteration recursion use repetition perform several simple operation algorithm successively reach certain limit involve termination test find limit slowly approach termination limit based control statement well coded poorly continue forever compiler computer either lock shuts halt operation
"both based on control statement, involve repetition, and involve a termination test within loops",5.0,1.0,both based on control statement involve repetition and involve a termination test within loops,"['based', 'control', 'statement', 'involve', 'repetition', 'involve', 'termination', 'test', 'within', 'loops']",base control statement involv repetit involv termin test within loop,based control statement involve repetition involve termination test within loop
they are methods of repeating the same task.,2.0,0.0,they are methods of repeating the same task,"['methods', 'repeating', 'task']",method repeat task,method repeating task
Both involve a termination test. They use a control statement and repition to solve the problem. They can also result in an infinite loop.,5.0,1.0,both involve a termination test they use a control statement and repition to solve the problem they can also result in an infinite loop,"['involve', 'termination', 'test', 'use', 'control', 'statement', 'repition', 'solve', 'problem', 'also', 'result', 'infinite', 'loop']",involv termin test use control statement repit solv problem also result infinit loop,involve termination test use control statement repition solve problem also result infinite loop
"based on a control statement, involve repetition, involve a termination test.",5.0,1.0,based on a control statement involve repetition involve a termination test,"['based', 'control', 'statement', 'involve', 'repetition', 'involve', 'termination', 'test']",base control statement involv repetit involv termin test,based control statement involve repetition involve termination test
Both are bases on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.,5.0,1.0,both are bases on a control statement both involve repetition both involve a termination test both gradually approach termination both can occur infinitely,"['bases', 'control', 'statement', 'involve', 'repetition', 'involve', 'termination', 'test', 'gradually', 'approach', 'termination', 'occur', 'infinitely']",base control statement involv repetit involv termin test gradual approach termin occur infinit,base control statement involve repetition involve termination test gradually approach termination occur infinitely
"both based on a control statement, both involve repitition, both involve a termination test, both gradually approach termination, both can potentially occur infinetly.",5.0,1.0,both based on a control statement both involve repitition both involve a termination test both gradually approach termination both can potentially occur infinetly,"['based', 'control', 'statement', 'involve', 'repitition', 'involve', 'termination', 'test', 'gradually', 'approach', 'termination', 'potentially', 'occur', 'infinetly']",base control statement involv repitit involv termin test gradual approach termin potenti occur infinetli,based control statement involve repitition involve termination test gradually approach termination potentially occur infinetly
"they are both based on a control statement, both involve repetition, both involve a termination case, both graduatlly approach that termination case, and both can occur infinitely",5.0,1.0,they are both based on a control statement both involve repetition both involve a termination case both graduatlly approach that termination case and both can occur infinitely,"['based', 'control', 'statement', 'involve', 'repetition', 'involve', 'termination', 'case', 'graduatlly', 'approach', 'termination', 'case', 'occur', 'infinitely']",base control statement involv repetit involv termin case graduatlli approach termin case occur infinit,based control statement involve repetition involve termination case graduatlly approach termination case occur infinitely
"They both use repetition, a control or test to terminate, and both can infinitely repeat if not defined correctly.",5.0,1.0,they both use repetition a control or test to terminate and both can infinitely repeat if not defined correctly,"['use', 'repetition', 'control', 'test', 'terminate', 'infinitely', 'repeat', 'defined', 'correctly']",use repetit control test termin infinit repeat defin correctli,use repetition control test terminate infinitely repeat defined correctly
"Both are based on a control statement; both gradually approach termination ending with a termination test; both involve repetition, and can both repeat infinitely if their termination requirements are not met.",5.0,1.0,both are based on a control statement both gradually approach termination ending with a termination test both involve repetition and can both repeat infinitely if their termination requirements are not met,"['based', 'control', 'statement', 'gradually', 'approach', 'termination', 'ending', 'termination', 'test', 'involve', 'repetition', 'repeat', 'infinitely', 'termination', 'requirements', 'met']",base control statement gradual approach termin end termin test involv repetit repeat infinit termin requir met,based control statement gradually approach termination ending termination test involve repetition repeat infinitely termination requirement met
"both are based on a control statement, involve repetition and involve a termination test. both gradually approach termination, both can occur infinitely",5.0,1.0,both are based on a control statement involve repetition and involve a termination test both gradually approach termination both can occur infinitely,"['based', 'control', 'statement', 'involve', 'repetition', 'involve', 'termination', 'test', 'gradually', 'approach', 'termination', 'occur', 'infinitely']",base control statement involv repetit involv termin test gradual approach termin occur infinit,based control statement involve repetition involve termination test gradually approach termination occur infinitely
they are used to solve the same type of problems. they do a task over and over again until a cirtain conditional statement is reachedits called the base case in recursion.,3.5,0.0,they are used to solve the same type of problems they do a task over and over again until a cirtain conditional statement is reachedits called the base case in recursion,"['used', 'solve', 'type', 'problems', 'task', 'cirtain', 'conditional', 'statement', 'reachedits', 'called', 'base', 'case', 'recursion']",use solv type problem task cirtain condit statement reachedit call base case recurs,used solve type problem task cirtain conditional statement reachedits called base case recursion
Based on control statement; involve repetition; involve a terminal test; both can occur infinitly,5.0,1.0,based on control statement involve repetition involve a terminal test both can occur infinitly,"['based', 'control', 'statement', 'involve', 'repetition', 'involve', 'terminal', 'test', 'occur', 'infinitly']",base control statement involv repetit involv termin test occur infinitli,based control statement involve repetition involve terminal test occur infinitly
"repetition, termination test, eventually terminate, occur infinately",5.0,1.0,repetition termination test eventually terminate occur infinately,"['repetition', 'termination', 'test', 'eventually', 'terminate', 'occur', 'infinately']",repetit termin test eventu termin occur infin,repetition termination test eventually terminate occur infinately
both need to have some kind of base case to tell when the loop needs to stop.,3.0,0.0,both need to have some kind of base case to tell when the loop needs to stop,"['need', 'kind', 'base', 'case', 'tell', 'loop', 'needs', 'stop']",need kind base case tell loop need stop,need kind base case tell loop need stop
"they both are able to do repetiive tasks. however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached. Iterative includes a loop which iterates a pre-determined number of times, or checks for an exit clause every time through",3.5,0.0,they both are able to do repetiive tasks however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached iterative includes a loop which iterates a pre-determined number of times or checks for an exit clause every time through,"['able', 'repetiive', 'tasks', 'however', 'recurisve', 'calls', 'different', 'parameters', 'defines', 'exit', 'clause', 'guaranteeed', 'reached', 'iterative', 'includes', 'loop', 'iterates', 'pre-determined', 'number', 'times', 'checks', 'exit', 'clause', 'every', 'time']",abl repeti task howev recurisv call differ paramet defin exit claus guarantee reach iter includ loop iter pre-determin number time check exit claus everi time,able repetiive task however recurisve call different parameter defines exit clause guaranteeed reached iterative includes loop iterates pre-determined number time check exit clause every time
int n [10]; or or array of 10 integers and int n [arraySize] or or where arraySize is some positive integer defined by the user,4.0,1.0,int n 10 or or array of 10 integers and int n arraysize or or where arraysize is some positive integer defined by the user,"['int', 'n', '10', 'array', '10', 'integers', 'int', 'n', 'arraysize', 'arraysize', 'positive', 'integer', 'defined', 'user']",int n 10 array 10 integ int n arrays arrays posit integ defin user,int n 10 array 10 integer int n arraysize arraysize positive integer defined user
by either inputing the different elements in the array at coding or giving the array specifacations as to the size of the array. it is also possible when giving it specifacations to tell the array to grow as needed.,4.0,1.0,by either inputing the different elements in the array at coding or giving the array specifacations as to the size of the array it is also possible when giving it specifacations to tell the array to grow as needed,"['either', 'inputing', 'different', 'elements', 'array', 'coding', 'giving', 'array', 'specifacations', 'size', 'array', 'also', 'possible', 'giving', 'specifacations', 'tell', 'array', 'grow', 'needed']",either input differ element array code give array specifac size array also possibl give specifac tell array grow need,either inputing different element array coding giving array specifacations size array also possible giving specifacations tell array grow needed
You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable.,5.0,1.0,you can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,"['initialize', 'array', 'using', 'initializer', 'list', 'declaration', 'initializing', 'size', 'constant', 'variable']",initi array use initi list declar initi size constant variabl,initialize array using initializer list declaration initializing size constant variable
Pass the length along with the array or use a vector.,3.0,0.0,pass the length along with the array or use a vector,"['pass', 'length', 'along', 'array', 'use', 'vector']",pass length along array use vector,pas length along array use vector
"One way is to declare a size of the array using a variable that is equal to an integer. The other way, if the size is omitted in the declaration, the compiler determines the size of the array based on the size of the initializer list.",5.0,1.0,one way is to declare a size of the array using a variable that is equal to an integer the other way if the size is omitted in the declaration the compiler determines the size of the array based on the size of the initializer list,"['one', 'way', 'declare', 'size', 'array', 'using', 'variable', 'equal', 'integer', 'way', 'size', 'omitted', 'declaration', 'compiler', 'determines', 'size', 'array', 'based', 'size', 'initializer', 'list']",one way declar size array use variabl equal integ way size omit declar compil determin size array base size initi list,one way declare size array using variable equal integer way size omitted declaration compiler determines size array based size initializer list
"In the declarationint array [x]or with an initilizerint array [] equals 0,1,2, etc.",5.0,1.0,in the declarationint array xor with an initilizerint array equals 012 etc,"['declarationint', 'array', 'xor', 'initilizerint', 'array', 'equals', '012', 'etc']",declarationint array xor initilizerint array equal 012 etc,declarationint array xor initilizerint array equal 012 etc
"1. Declare the length of the arrayint array [10];2. Initialize the arrayint array [] equals 0, 1, 2, 3; or or compiler will assume size of 4",5.0,1.0,1 declare the length of the arrayint array 102 initialize the arrayint array equals 0 1 2 3 or or compiler will assume size of 4,"['1', 'declare', 'length', 'arrayint', 'array', '102', 'initialize', 'arrayint', 'array', 'equals', '0', '1', '2', '3', 'compiler', 'assume', 'size', '4']",1 declar length arrayint array 102 initi arrayint array equal 0 1 2 3 compil assum size 4,1 declare length arrayint array 102 initialize arrayint array equal 0 1 2 3 compiler assume size 4
statically and dynamically,2.5,0.0,statically and dynamically,"['statically', 'dynamically']",static dynam,statically dynamically
Explicitly int array [10]; or by variable const int size equals 10; int array [size];,4.0,1.0,explicitly int array 10 or by variable const int size equals 10 int array size,"['explicitly', 'int', 'array', '10', 'variable', 'const', 'int', 'size', 'equals', '10', 'int', 'array', 'size']",explicitli int array 10 variabl const int size equal 10 int array size,explicitly int array 10 variable const int size equal 10 int array size
"Array lengths can be explicitly specified by inputing the number of elements between the brackets [] during declaration, or implicitly by including an initializer list WITHOUT specifying a number between [], the compiler will automatically declare the array with the proper number of elements needed for the list.",5.0,1.0,array lengths can be explicitly specified by inputing the number of elements between the brackets during declaration or implicitly by including an initializer list without specifying a number between the compiler will automatically declare the array with the proper number of elements needed for the list,"['array', 'lengths', 'explicitly', 'specified', 'inputing', 'number', 'elements', 'brackets', 'declaration', 'implicitly', 'including', 'initializer', 'list', 'without', 'specifying', 'number', 'compiler', 'automatically', 'declare', 'array', 'proper', 'number', 'elements', 'needed', 'list']",array length explicitli specifi input number element bracket declar implicitli includ initi list without specifi number compil automat declar array proper number element need list,array length explicitly specified inputing number element bracket declaration implicitly including initializer list without specifying number compiler automatically declare array proper number element needed list
Specify an array s size with a constant variable. And setting array elements with calculations.,3.5,0.0,specify an array s size with a constant variable and setting array elements with calculations,"['specify', 'array', 'size', 'constant', 'variable', 'setting', 'array', 'elements', 'calculations']",specifi array size constant variabl set array element calcul,specify array size constant variable setting array element calculation
"statically, using and dynamically, using []",4.0,1.0,statically using and dynamically using,"['statically', 'using', 'dynamically', 'using']",static use dynam use,statically using dynamically using
"define it as array [5] or array [1,2,3,4,5]",4.5,1.0,define it as array 5 or array 12345,"['define', 'array', '5', 'array', '12345']",defin array 5 array 12345,define array 5 array 12345
Static and dynamic.,2.5,0.0,static and dynamic,"['static', 'dynamic']",static dynam,static dynamic
manually inside the brackets or automatically via an initializer list,5.0,1.0,manually inside the brackets or automatically via an initializer list,"['manually', 'inside', 'brackets', 'automatically', 'via', 'initializer', 'list']",manual insid bracket automat via initi list,manually inside bracket automatically via initializer list
"You can use an initializer list, or simply tell the compiler how many elements you want in the array. For an Initializer list: int a [] equals 10, 2, 3, 4, 5; For an elemental declaration: int b [5]; Both arrays have 5 elements in them, but array a is already initialized.",5.0,1.0,you can use an initializer list or simply tell the compiler how many elements you want in the array for an initializer list int a equals 10 2 3 4 5 for an elemental declaration int b 5 both arrays have 5 elements in them but array a is already initialized,"['use', 'initializer', 'list', 'simply', 'tell', 'compiler', 'many', 'elements', 'want', 'array', 'initializer', 'list', 'int', 'equals', '10', '2', '3', '4', '5', 'elemental', 'declaration', 'int', 'b', '5', 'arrays', '5', 'elements', 'array', 'already', 'initialized']",use initi list simpli tell compil mani element want array initi list int equal 10 2 3 4 5 element declar int b 5 array 5 element array alreadi initi,use initializer list simply tell compiler many element want array initializer list int equal 10 2 3 4 5 elemental declaration int b 5 array 5 element array already initialized
"In a string you can specify with the strlenarraynamecommand. This gets the length of the string. Another way is with integers where you initiate the size from the start, ex array [40] specifying a possible length of up to 40. Then it is passed by an object the actual ammout in the array. Another way is to declare it in an initializing program.",4.5,1.0,in a string you can specify with the strlenarraynamecommand this gets the length of the string another way is with integers where you initiate the size from the start ex array 40 specifying a possible length of up to 40 then it is passed by an object the actual ammout in the array another way is to declare it in an initializing program,"['string', 'specify', 'strlenarraynamecommand', 'gets', 'length', 'string', 'another', 'way', 'integers', 'initiate', 'size', 'start', 'ex', 'array', '40', 'specifying', 'possible', 'length', '40', 'passed', 'object', 'actual', 'ammout', 'array', 'another', 'way', 'declare', 'initializing', 'program']",string specifi strlenarraynamecommand get length string anoth way integ initi size start ex array 40 specifi possibl length 40 pass object actual ammout array anoth way declar initi program,string specify strlenarraynamecommand get length string another way integer initiate size start ex array 40 specifying possible length 40 passed object actual ammout array another way declare initializing program
"Implicit, namely when you give it values, like 1,2,3,4,5,6,7,8,9, at which the compiler will automatically give this a size. Static, during the declaration.",5.0,1.0,implicit namely when you give it values like 123456789 at which the compiler will automatically give this a size static during the declaration,"['implicit', 'namely', 'give', 'values', 'like', '123456789', 'compiler', 'automatically', 'give', 'size', 'static', 'declaration']",implicit name give valu like 123456789 compil automat give size static declar,implicit namely give value like 123456789 compiler automatically give size static declaration
"Supply an integer inside the brackets or the compiler counts the number of elements in the initializer list. int n [5]; int n [] equals 1,2,3,4,5",5.0,1.0,supply an integer inside the brackets or the compiler counts the number of elements in the initializer list int n 5 int n equals 12345,"['supply', 'integer', 'inside', 'brackets', 'compiler', 'counts', 'number', 'elements', 'initializer', 'list', 'int', 'n', '5', 'int', 'n', 'equals', '12345']",suppli integ insid bracket compil count number element initi list int n 5 int n equal 12345,supply integer inside bracket compiler count number element initializer list int n 5 int n equal 12345
either initializing the array with a specific length or initializing an array while declaring its contents.,5.0,1.0,either initializing the array with a specific length or initializing an array while declaring its contents,"['either', 'initializing', 'array', 'specific', 'length', 'initializing', 'array', 'declaring', 'contents']",either initi array specif length initi array declar content,either initializing array specific length initializing array declaring content
within the brackets or by using an initializer list.,5.0,1.0,within the brackets or by using an initializer list,"['within', 'brackets', 'using', 'initializer', 'list']",within bracket use initi list,within bracket using initializer list
specify the number of elements in the array declaration with a constant or using a constant variable for future scalability,4.0,1.0,specify the number of elements in the array declaration with a constant or using a constant variable for future scalability,"['specify', 'number', 'elements', 'array', 'declaration', 'constant', 'using', 'constant', 'variable', 'future', 'scalability']",specifi number element array declar constant use constant variabl futur scalabl,specify number element array declaration constant using constant variable future scalability
with a number and with a variable,3.0,0.0,with a number and with a variable,"['number', 'variable']",number variabl,number variable
"explicitly, by declaring it in bracketsi. e. int array [50];and implicitly, by initializing several valuesi. e. int array [] equals 1, 2, 3;",5.0,1.0,explicitly by declaring it in bracketsi e int array 50and implicitly by initializing several valuesi e int array equals 1 2 3,"['explicitly', 'declaring', 'bracketsi', 'e', 'int', 'array', '50and', 'implicitly', 'initializing', 'several', 'valuesi', 'e', 'int', 'array', 'equals', '1', '2', '3']",explicitli declar bracketsi e int array 50and implicitli initi sever valuesi e int array equal 1 2 3,explicitly declaring bracketsi e int array 50and implicitly initializing several valuesi e int array equal 1 2 3
"one way of specifying of array is A [10]; other way of specifying array is a [arraysize] equals [1,2,3,4,5,6,7,8,9,10",4.5,1.0,one way of specifying of array is a 10 other way of specifying array is a arraysize equals 12345678910,"['one', 'way', 'specifying', 'array', '10', 'way', 'specifying', 'array', 'arraysize', 'equals', '12345678910']",one way specifi array 10 way specifi array arrays equal 12345678910,one way specifying array 10 way specifying array arraysize equal 12345678910
1-Initializing an array in a declaration with an initializer list 2-Specifying an array s size with a constant variable,5.0,1.0,1-initializing an array in a declaration with an initializer list 2-specifying an array s size with a constant variable,"['1-initializing', 'array', 'declaration', 'initializer', 'list', '2-specifying', 'array', 'size', 'constant', 'variable']",1-initi array declar initi list 2-specifi array size constant variabl,1-initializing array declaration initializer list 2-specifying array size constant variable
"Initializing the size in the brackets: int a [100]; Initializing the length by assigning variables: int a [] equals 1,2,3;",5.0,1.0,initializing the size in the brackets int a 100 initializing the length by assigning variables int a equals 123,"['initializing', 'size', 'brackets', 'int', '100', 'initializing', 'length', 'assigning', 'variables', 'int', 'equals', '123']",initi size bracket int 100 initi length assign variabl int equal 123,initializing size bracket int 100 initializing length assigning variable int equal 123
user defined value or by the number of elements in initializer list,5.0,1.0,user defined value or by the number of elements in initializer list,"['user', 'defined', 'value', 'number', 'elements', 'initializer', 'list']",user defin valu number element initi list,user defined value number element initializer list
"you can assign the size of it inside the brackets when you declare the array [3], or you can have it set by how many items you set the array equal to 1,2,3",5.0,1.0,you can assign the size of it inside the brackets when you declare the array 3 or you can have it set by how many items you set the array equal to 123,"['assign', 'size', 'inside', 'brackets', 'declare', 'array', '3', 'set', 'many', 'items', 'set', 'array', 'equal', '123']",assign size insid bracket declar array 3 set mani item set array equal 123,assign size inside bracket declare array 3 set many item set array equal 123
"use an arraylist, or have your program ask the array how many elements it has. As an obj it it should have member length that is the number of slots it has.",4.0,1.0,use an arraylist or have your program ask the array how many elements it has as an obj it it should have member length that is the number of slots it has,"['use', 'arraylist', 'program', 'ask', 'array', 'many', 'elements', 'obj', 'member', 'length', 'number', 'slots']",use arraylist program ask array mani element obj member length number slot,use arraylist program ask array many element obj member length number slot
"strings that are used in an char array are much easier to manipulate than as a string object, because each character is stored separately rather than as a whole",2.5,0.0,strings that are used in an char array are much easier to manipulate than as a string object because each character is stored separately rather than as a whole,"['strings', 'used', 'char', 'array', 'much', 'easier', 'manipulate', 'string', 'object', 'character', 'stored', 'separately', 'rather', 'whole']",string use char array much easier manipul string object charact store separ rather whole,string used char array much easier manipulate string object character stored separately rather whole
"the type string uses less storage and you have to change the string all at once. with an array of characters you can make permutations of words using the characters stored in the array, without needing to actually access and change the variables. with an array of characters you can just change how they are accessed.",3.0,0.0,the type string uses less storage and you have to change the string all at once with an array of characters you can make permutations of words using the characters stored in the array without needing to actually access and change the variables with an array of characters you can just change how they are accessed,"['type', 'string', 'uses', 'less', 'storage', 'change', 'string', 'array', 'characters', 'make', 'permutations', 'words', 'using', 'characters', 'stored', 'array', 'without', 'needing', 'actually', 'access', 'change', 'variables', 'array', 'characters', 'change', 'accessed']",type string use less storag chang string array charact make permut word use charact store array without need actual access chang variabl array charact chang access,type string us le storage change string array character make permutation word using character stored array without needing actually access change variable array character change accessed
"Unlike in a string declared using type string, in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character.",5.0,1.0,unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character,"['unlike', 'string', 'declared', 'using', 'type', 'string', 'string', 'declared', 'using', 'array', 'characters', 'programmer', 'must', 'provide', 'null', 'terminating', 'character', 'must', 'ensure', 'array', 'large', 'enough', 'hold', 'string', 'null', 'terminating', 'character']",unlik string declar use type string string declar use array charact programm must provid null termin charact must ensur array larg enough hold string null termin charact,unlike string declared using type string string declared using array character programmer must provide null terminating character must ensure array large enough hold string null terminating character
"All strings represented by character arrays end with the null character. You declare an object of type string just like any other type, for example: string s;",5.0,1.0,all strings represented by character arrays end with the null character you declare an object of type string just like any other type for example string s,"['strings', 'represented', 'character', 'arrays', 'end', 'null', 'character', 'declare', 'object', 'type', 'string', 'like', 'type', 'example', 'string']",string repres charact array end null charact declar object type string like type exampl string,string represented character array end null character declare object type string like type example string
"By using an array of characters, one can store and manipulate the strings rather than just having a type string variable.",2.5,0.0,by using an array of characters one can store and manipulate the strings rather than just having a type string variable,"['using', 'array', 'characters', 'one', 'store', 'manipulate', 'strings', 'rather', 'type', 'string', 'variable']",use array charact one store manipul string rather type string variabl,using array character one store manipulate string rather type string variable
type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of wordsor an array of char arrays,2.0,0.0,type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of wordsor an array of char arrays,"['type', 'string', 'array', 'chars', 'make', 'array', 'single', 'letter', 'characters', 'array', 'strings', 'actual', 'array', 'wordsor', 'array', 'char', 'arrays']",type string array char make array singl letter charact array string actual array wordsor array char array,type string array char make array single letter character array string actual array wordsor array char array
"They are basically the same, however, a string ends with a null character, denoting the end of the stringand the size. A char array has potential to be any size, so it must be declared or limited.",3.5,0.0,they are basically the same however a string ends with a null character denoting the end of the stringand the size a char array has potential to be any size so it must be declared or limited,"['basically', 'however', 'string', 'ends', 'null', 'character', 'denoting', 'end', 'stringand', 'size', 'char', 'array', 'potential', 'size', 'must', 'declared', 'limited']",basic howev string end null charact denot end stringand size char array potenti size must declar limit,basically however string end null character denoting end stringand size char array potential size must declared limited
string is a class in the standard library and has method that modify it. Whereas the char array is on able to be modifie by the user.,4.0,1.0,string is a class in the standard library and has method that modify it whereas the char array is on able to be modifie by the user,"['string', 'class', 'standard', 'library', 'method', 'modify', 'whereas', 'char', 'array', 'able', 'modifie', 'user']",string class standard librari method modifi wherea char array abl modifi user,string class standard library method modify whereas char array able modifie user
"By using an array of characters, you are limited to the size of the array of characters. By declaring by type the end of the string is acknowledged by white space.",3.5,0.0,by using an array of characters you are limited to the size of the array of characters by declaring by type the end of the string is acknowledged by white space,"['using', 'array', 'characters', 'limited', 'size', 'array', 'characters', 'declaring', 'type', 'end', 'string', 'acknowledged', 'white', 'space']",use array charact limit size array charact declar type end string acknowledg white space,using array character limited size array character declaring type end string acknowledged white space
"The data class type string are designed to handle character data, and has many functions built into the class library to deal with them. An array of characters however is subject to all the same rules of any other array with no real additional functionality. Another difference is that the string class deals with the null character implicitly, unlike an array of characters, which must handle the null character explicitly.",5.0,1.0,the data class type string are designed to handle character data and has many functions built into the class library to deal with them an array of characters however is subject to all the same rules of any other array with no real additional functionality another difference is that the string class deals with the null character implicitly unlike an array of characters which must handle the null character explicitly,"['data', 'class', 'type', 'string', 'designed', 'handle', 'character', 'data', 'many', 'functions', 'built', 'class', 'library', 'deal', 'array', 'characters', 'however', 'subject', 'rules', 'array', 'real', 'additional', 'functionality', 'another', 'difference', 'string', 'class', 'deals', 'null', 'character', 'implicitly', 'unlike', 'array', 'characters', 'must', 'handle', 'null', 'character', 'explicitly']",data class type string design handl charact data mani function built class librari deal array charact howev subject rule array real addit function anoth differ string class deal null charact implicitli unlik array charact must handl null charact explicitli,data class type string designed handle character data many function built class library deal array character however subject rule array real additional functionality another difference string class deal null character implicitly unlike array character must handle null character explicitly
string declared used in an array of characters contains each character in the array and a special string-termination character called the null character versus the type string.,5.0,1.0,string declared used in an array of characters contains each character in the array and a special string-termination character called the null character versus the type string,"['string', 'declared', 'used', 'array', 'characters', 'contains', 'character', 'array', 'special', 'string-termination', 'character', 'called', 'null', 'character', 'versus', 'type', 'string']",string declar use array charact contain charact array special string-termin charact call null charact versu type string,string declared used array character contains character array special string-termination character called null character versus type string
A char array reads a string as each individual character. A string literal array reads the entire string.,3.0,0.0,a char array reads a string as each individual character a string literal array reads the entire string,"['char', 'array', 'reads', 'string', 'individual', 'character', 'string', 'literal', 'array', 'reads', 'entire', 'string']",char array read string individu charact string liter array read entir string,char array read string individual character string literal array read entire string
array of characters can only hold as many characters as the array size and strings are not that limited.,4.0,1.0,array of characters can only hold as many characters as the array size and strings are not that limited,"['array', 'characters', 'hold', 'many', 'characters', 'array', 'size', 'strings', 'limited']",array charact hold mani charact array size string limit,array character hold many character array size string limited
"Stings can only be modified by functions of the String class, an array of characters can be modified by the user",3.5,0.0,stings can only be modified by functions of the string class an array of characters can be modified by the user,"['stings', 'modified', 'functions', 'string', 'class', 'array', 'characters', 'modified', 'user']",sting modifi function string class array charact modifi user,sting modified function string class array character modified user
"if by type string, the array contains an additional terminating null character",4.0,1.0,if by type string the array contains an additional terminating null character,"['type', 'string', 'array', 'contains', 'additional', 'terminating', 'null', 'character']",type string array contain addit termin null charact,type string array contains additional terminating null character
The array of characters has a null character 0 at the end of the array to signify the array 's end. The string does not have this.,5.0,1.0,the array of characters has a null character 0 at the end of the array to signify the array s end the string does not have this,"['array', 'characters', 'null', 'character', '0', 'end', 'array', 'signify', 'array', 'end', 'string']",array charact null charact 0 end array signifi array end string,array character null character 0 end array signify array end string
strings with type string are just that. Strings. They are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected.,3.0,0.0,strings with type string are just that strings they are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected,"['strings', 'type', 'string', 'strings', 'part', 'array', 'list', 'one', 'declared', 'array', 'actually', 'array', 'characters', 'able', 'pointed', 'detected']",string type string string part array list one declar array actual array charact abl point detect,string type string string part array list one declared array actually array character able pointed detected
"the array of characters has a set length, while the type string has virtually unlimited length.",4.0,1.0,the array of characters has a set length while the type string has virtually unlimited length,"['array', 'characters', 'set', 'length', 'type', 'string', 'virtually', 'unlimited', 'length']",array charact set length type string virtual unlimit length,array character set length type string virtually unlimited length
Char array Individual letters can be accessed directly with array subscript notation. String array array subscript will return the entire string.,2.0,0.0,char array individual letters can be accessed directly with array subscript notation string array array subscript will return the entire string,"['char', 'array', 'individual', 'letters', 'accessed', 'directly', 'array', 'subscript', 'notation', 'string', 'array', 'array', 'subscript', 'return', 'entire', 'string']",char array individu letter access directli array subscript notat string array array subscript return entir string,char array individual letter accessed directly array subscript notation string array array subscript return entire string
array of characters need a termination character as well as size specification whether its explicit or implicit.,5.0,1.0,array of characters need a termination character as well as size specification whether its explicit or implicit,"['array', 'characters', 'need', 'termination', 'character', 'well', 'size', 'specification', 'whether', 'explicit', 'implicit']",array charact need termin charact well size specif whether explicit implicit,array character need termination character well size specification whether explicit implicit
when using an array individual characters can be accessed and manipulated.,2.5,0.0,when using an array individual characters can be accessed and manipulated,"['using', 'array', 'individual', 'characters', 'accessed', 'manipulated']",use array individu charact access manipul,using array individual character accessed manipulated
strings declared using an array of characters could result in data loss if character array not initialized large enough.,4.0,1.0,strings declared using an array of characters could result in data loss if character array not initialized large enough,"['strings', 'declared', 'using', 'array', 'characters', 'could', 'result', 'data', 'loss', 'character', 'array', 'initialized', 'large', 'enough']",string declar use array charact could result data loss charact array initi larg enough,string declared using array character could result data loss character array initialized large enough
"an array is passed by reference therefore if an array of characters is changed, the memory is changed not just the variable",3.5,0.0,an array is passed by reference therefore if an array of characters is changed the memory is changed not just the variable,"['array', 'passed', 'reference', 'therefore', 'array', 'characters', 'changed', 'memory', 'changed', 'variable']",array pass refer therefor array charact chang memori chang variabl,array passed reference therefore array character changed memory changed variable
"the type string has several built-in functions not available when using a char array, but the individual characters in an array or more directly accessible than the characters in a string type string.",3.5,0.0,the type string has several built-in functions not available when using a char array but the individual characters in an array or more directly accessible than the characters in a string type string,"['type', 'string', 'several', 'built-in', 'functions', 'available', 'using', 'char', 'array', 'individual', 'characters', 'array', 'directly', 'accessible', 'characters', 'string', 'type', 'string']",type string sever built-in function avail use char array individu charact array directli access charact string type string,type string several built-in function available using char array individual character array directly accessible character string type string
"declaring a string, it includes white spaces but declaring a array of character does not include white spaces",1.5,0.0,declaring a string it includes white spaces but declaring a array of character does not include white spaces,"['declaring', 'string', 'includes', 'white', 'spaces', 'declaring', 'array', 'character', 'include', 'white', 'spaces']",declar string includ white space declar array charact includ white space,declaring string includes white space declaring array character include white space
"an array of characters has one element a string doesnt have. it is the termination element, or null",5.0,1.0,an array of characters has one element a string doesnt have it is the termination element or null,"['array', 'characters', 'one', 'element', 'string', 'doesnt', 'termination', 'element', 'null']",array charact one element string doesnt termin element null,array character one element string doesnt termination element null
Strings declared using the type string can vary in length. Strings declared using an array of characters can not extend past the array length.,4.0,1.0,strings declared using the type string can vary in length strings declared using an array of characters can not extend past the array length,"['strings', 'declared', 'using', 'type', 'string', 'vary', 'length', 'strings', 'declared', 'using', 'array', 'characters', 'extend', 'past', 'array', 'length']",string declar use type string vari length string declar use array charact extend past array length,string declared using type string vary length string declared using array character extend past array length
"cant modify individual characters of a type string array, character type array can modify individual characters",2.5,0.0,cant modify individual characters of a type string array character type array can modify individual characters,"['cant', 'modify', 'individual', 'characters', 'type', 'string', 'array', 'character', 'type', 'array', 'modify', 'individual', 'characters']",cant modifi individu charact type string array charact type array modifi individu charact,cant modify individual character type string array character type array modify individual character
"the type string is a class and is safer, while the other is just an array of characters.",3.5,0.0,the type string is a class and is safer while the other is just an array of characters,"['type', 'string', 'class', 'safer', 'array', 'characters']",type string class safer array charact,type string class safer array character
"array it is the collection of similar data types ex: int a [10] ten indicates the size of array. [] is index of array, we can give only integer values to array of a. where as string mean collection of group of characters. string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols. However Arrays can be declared to contain values of any non reference data type. Multiple arrarys of the same type",2.5,0.0,array it is the collection of similar data types ex int a 10 ten indicates the size of array is index of array we can give only integer values to array of a where as string mean collection of group of characters string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols however arrays can be declared to contain values of any non reference data type multiple arrarys of the same type,"['array', 'collection', 'similar', 'data', 'types', 'ex', 'int', '10', 'ten', 'indicates', 'size', 'array', 'index', 'array', 'give', 'integer', 'values', 'array', 'string', 'mean', 'collection', 'group', 'characters', 'string', 'declarations', 'datatype', 'usually', 'causes', 'storage', 'allocated', 'memory', 'capable', 'holding', 'predetermined', 'number', 'symbols', 'however', 'arrays', 'declared', 'contain', 'values', 'non', 'reference', 'data', 'type', 'multiple', 'arrarys', 'type']",array collect similar data type ex int 10 ten indic size array index array give integ valu array string mean collect group charact string declar datatyp usual caus storag alloc memori capabl hold predetermin number symbol howev array declar contain valu non refer data type multipl arrari type,array collection similar data type ex int 10 ten indicates size array index array give integer value array string mean collection group character string declaration datatype usually cause storage allocated memory capable holding predetermined number symbol however array declared contain value non reference data type multiple arrarys type
by reference only,5.0,1.0,by reference only,['reference'],refer,reference
a reference pointer to an element in the array.,4.5,1.0,a reference pointer to an element in the array,"['reference', 'pointer', 'element', 'array']",refer pointer element array,reference pointer element array
Arrays are passed to functions by reference.,5.0,1.0,arrays are passed to functions by reference,"['arrays', 'passed', 'functions', 'reference']",array pass function refer,array passed function reference
Arrays are passed by reference Individual array elements passed by value Functions that take arrays as arguments Function prototypes may include parameter names const array parameters,5.0,1.0,arrays are passed by reference individual array elements passed by value functions that take arrays as arguments function prototypes may include parameter names const array parameters,"['arrays', 'passed', 'reference', 'individual', 'array', 'elements', 'passed', 'value', 'functions', 'take', 'arrays', 'arguments', 'function', 'prototypes', 'may', 'include', 'parameter', 'names', 'const', 'array', 'parameters']",array pass refer individu array element pass valu function take array argument function prototyp may includ paramet name const array paramet,array passed reference individual array element passed value function take array argument function prototype may include parameter name const array parameter
Arrays are passed by reference.,5.0,1.0,arrays are passed by reference,"['arrays', 'passed', 'reference']",array pass refer,array passed reference
"you must pass the array and its size to the function. Ex. functionarray, size;",4.0,1.0,you must pass the array and its size to the function ex functionarray size,"['must', 'pass', 'array', 'size', 'function', 'ex', 'functionarray', 'size']",must pass array size function ex functionarray size,must pas array size function ex functionarray size
"Usually the same way you pass anything else ... you do not have to specify the length of a char array, just pass it to the function by sending the name of the array. Example: char str [20]; isPalindromestr; or or this sends the char array to the function isPalindrome. Otherwise, would need to send the length of the array as well.",3.5,0.0,usually the same way you pass anything else you do not have to specify the length of a char array just pass it to the function by sending the name of the array example char str 20 ispalindromestr or or this sends the char array to the function ispalindrome otherwise would need to send the length of the array as well,"['usually', 'way', 'pass', 'anything', 'else', 'specify', 'length', 'char', 'array', 'pass', 'function', 'sending', 'name', 'array', 'example', 'char', 'str', '20', 'ispalindromestr', 'sends', 'char', 'array', 'function', 'ispalindrome', 'otherwise', 'would', 'need', 'send', 'length', 'array', 'well']",usual way pass anyth els specifi length char array pass function send name array exampl char str 20 ispalindromestr send char array function ispalindrom otherwis would need send length array well,usually way pas anything else specify length char array pas function sending name array example char str 20 ispalindromestr sends char array function ispalindrome otherwise would need send length array well
you pass a pointer to the first item and also pass the size.,3.5,0.0,you pass a pointer to the first item and also pass the size,"['pass', 'pointer', 'first', 'item', 'also', 'pass', 'size']",pass pointer first item also pass size,pas pointer first item also pas size
By reference.,5.0,1.0,by reference,['reference'],refer,reference
"In two parts, the array itself, and it is size, so that the function it is being passed to can avoid out of bounds errors.",4.0,1.0,in two parts the array itself and it is size so that the function it is being passed to can avoid out of bounds errors,"['two', 'parts', 'array', 'size', 'function', 'passed', 'avoid', 'bounds', 'errors']",two part array size function pass avoid bound error,two part array size function passed avoid bound error
Specify array name without brackets. Array size is normally passed as another argument so the function can process the specific number of elements in the array. Arrays are passed by reference. Individual array elements passed by value. Functions that take arrays as arguments.,5.0,1.0,specify array name without brackets array size is normally passed as another argument so the function can process the specific number of elements in the array arrays are passed by reference individual array elements passed by value functions that take arrays as arguments,"['specify', 'array', 'name', 'without', 'brackets', 'array', 'size', 'normally', 'passed', 'another', 'argument', 'function', 'process', 'specific', 'number', 'elements', 'array', 'arrays', 'passed', 'reference', 'individual', 'array', 'elements', 'passed', 'value', 'functions', 'take', 'arrays', 'arguments']",specifi array name without bracket array size normal pass anoth argument function process specif number element array array pass refer individu array element pass valu function take array argument,specify array name without bracket array size normally passed another argument function process specific number element array array passed reference individual array element passed value function take array argument
Arrays are passed by reference.,5.0,1.0,arrays are passed by reference,"['arrays', 'passed', 'reference']",array pass refer,array passed reference
the same way but with [] at the declaration and the actual function.,3.0,0.0,the same way but with at the declaration and the actual function,"['way', 'declaration', 'actual', 'function']",way declar actual function,way declaration actual function
specify the array name without brackets.,3.0,0.0,specify the array name without brackets,"['specify', 'array', 'name', 'without', 'brackets']",specifi array name without bracket,specify array name without bracket
by reference,5.0,1.0,by reference,['reference'],refer,reference
"You pass the name of the array to the function. So for: int bin [10]; you pass it to an array like so: jinglebin; but jingle must be declared correctly in order to receive an array, either with prototype void jingleint []; or with the definition in its initialization: void jingleint array []; It is also worth noting that arrays are passed to function by reference, so as to not copy large arrays over and over and burn memory. This gives the function complete control over the array however.",5.0,1.0,you pass the name of the array to the function so for int bin 10 you pass it to an array like so jinglebin but jingle must be declared correctly in order to receive an array either with prototype void jingleint or with the definition in its initialization void jingleint array it is also worth noting that arrays are passed to function by reference so as to not copy large arrays over and over and burn memory this gives the function complete control over the array however,"['pass', 'name', 'array', 'function', 'int', 'bin', '10', 'pass', 'array', 'like', 'jinglebin', 'jingle', 'must', 'declared', 'correctly', 'order', 'receive', 'array', 'either', 'prototype', 'void', 'jingleint', 'definition', 'initialization', 'void', 'jingleint', 'array', 'also', 'worth', 'noting', 'arrays', 'passed', 'function', 'reference', 'copy', 'large', 'arrays', 'burn', 'memory', 'gives', 'function', 'complete', 'control', 'array', 'however']",pass name array function int bin 10 pass array like jinglebin jingl must declar correctli order receiv array either prototyp void jingleint definit initi void jingleint array also worth note array pass function refer copi larg array burn memori give function complet control array howev,pas name array function int bin 10 pas array like jinglebin jingle must declared correctly order receive array either prototype void jingleint definition initialization void jingleint array also worth noting array passed function reference copy large array burn memory give function complete control array however
They are called by the function then the function must loop through the array to get the set of characters.,2.0,0.0,they are called by the function then the function must loop through the array to get the set of characters,"['called', 'function', 'function', 'must', 'loop', 'array', 'get', 'set', 'characters']",call function function must loop array get set charact,called function function must loop array get set character
"by reference by default, unless you specify const, at which the later will make the array unmodifiable.",5.0,1.0,by reference by default unless you specify const at which the later will make the array unmodifiable,"['reference', 'default', 'unless', 'specify', 'const', 'later', 'make', 'array', 'unmodifiable']",refer default unless specifi const later make array unmodifi,reference default unless specify const later make array unmodifiable
"The function recieves both the array and the array size as parameters. functionarrayName, arraySize",4.0,1.0,the function recieves both the array and the array size as parameters functionarrayname arraysize,"['function', 'recieves', 'array', 'array', 'size', 'parameters', 'functionarrayname', 'arraysize']",function reciev array array size paramet functionarraynam arrays,function recieves array array size parameter functionarrayname arraysize
specifying array name and passing as reference in an argument into the function,5.0,1.0,specifying array name and passing as reference in an argument into the function,"['specifying', 'array', 'name', 'passing', 'reference', 'argument', 'function']",specifi array name pass refer argument function,specifying array name passing reference argument function
1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call.,4.0,1.0,1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call,"['1st', 'must', 'specify', 'array', 'name', 'without', 'brackets', 'array', 'name', 'size', 'passed', 'two', 'arguments', 'function', 'call']",1st must specifi array name without bracket array name size pass two argument function call,1st must specify array name without bracket array name size passed two argument function call
"arrays are passed by reference, passing the starting address of array. programmer specifies the array name without brackets and passes the array size as another argument so the function can process the specific number of elements in the array",5.0,1.0,arrays are passed by reference passing the starting address of array programmer specifies the array name without brackets and passes the array size as another argument so the function can process the specific number of elements in the array,"['arrays', 'passed', 'reference', 'passing', 'starting', 'address', 'array', 'programmer', 'specifies', 'array', 'name', 'without', 'brackets', 'passes', 'array', 'size', 'another', 'argument', 'function', 'process', 'specific', 'number', 'elements', 'array']",array pass refer pass start address array programm specifi array name without bracket pass array size anoth argument function process specif number element array,array passed reference passing starting address array programmer specifies array name without bracket pass array size another argument function process specific number element array
by reference only,5.0,1.0,by reference only,['reference'],refer,reference
by reference,5.0,1.0,by reference,['reference'],refer,reference
by reference,5.0,1.0,by reference,['reference'],refer,reference
by refrence,5.0,1.0,by refrence,['refrence'],refrenc,refrence
"functionint [], int length",4.0,1.0,functionint int length,"['functionint', 'int', 'length']",functionint int length,functionint int length
by reference,5.0,1.0,by reference,['reference'],refer,reference
by reference,5.0,1.0,by reference,['reference'],refer,reference
"The function reads the variables, stores them. then returns the what ever the variable reads. The function then prints the content of the array.",2.5,0.0,the function reads the variables stores them then returns the what ever the variable reads the function then prints the content of the array,"['function', 'reads', 'variables', 'stores', 'returns', 'ever', 'variable', 'reads', 'function', 'prints', 'content', 'array']",function read variabl store return ever variabl read function print content array,function read variable store return ever variable read function print content array
a static array will store the new values that were assigned to each of its elements. meaning if you call a function twice it will use the last values that were returned the first time. if you do not declare it static then the new values will not be stored and will be reset to their original value,5.0,1.0,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,"['static', 'array', 'store', 'new', 'values', 'assigned', 'elements', 'meaning', 'call', 'function', 'twice', 'use', 'last', 'values', 'returned', 'first', 'time', 'declare', 'static', 'new', 'values', 'stored', 'reset', 'original', 'value']",static array store new valu assign element mean call function twice use last valu return first time declar static new valu store reset origin valu,static array store new value assigned element meaning call function twice use last value returned first time declare static new value stored reset original value
a static array can only be referenced not accessed. Also static arrays can be used without creating an object.,4.0,1.0,a static array can only be referenced not accessed also static arrays can be used without creating an object,"['static', 'array', 'referenced', 'accessed', 'also', 'static', 'arrays', 'used', 'without', 'creating', 'object']",static array referenc access also static array use without creat object,static array referenced accessed also static array used without creating object
An array declared as static is not created and and initialized each time the function and it is also not destroyed when the function terminates.,5.0,1.0,an array declared as static is not created and and initialized each time the function and it is also not destroyed when the function terminates,"['array', 'declared', 'static', 'created', 'initialized', 'time', 'function', 'also', 'destroyed', 'function', 'terminates']",array declar static creat initi time function also destroy function termin,array declared static created initialized time function also destroyed function terminates
"A program intializes static local arrays when their declarations are first encountered. If a static array is not initialized explicityly by the programmer, earch element of that array is intialized to zero by the compiler when the array is created. Non-static array members cannot be initialized at all in C plus plus.",4.0,1.0,a program intializes static local arrays when their declarations are first encountered if a static array is not initialized explicityly by the programmer earch element of that array is intialized to zero by the compiler when the array is created non-static array members cannot be initialized at all in c plus plus,"['program', 'intializes', 'static', 'local', 'arrays', 'declarations', 'first', 'encountered', 'static', 'array', 'initialized', 'explicityly', 'programmer', 'earch', 'element', 'array', 'intialized', 'zero', 'compiler', 'array', 'created', 'non-static', 'array', 'members', 'initialized', 'c', 'plus', 'plus']",program intial static local array declar first encount static array initi explicityli programm earch element array intial zero compil array creat non-stat array member initi c plu plu,program intializes static local array declaration first encountered static array initialized explicityly programmer earch element array intialized zero compiler array created non-static array member initialized c plus plus
Arrays that are static remain the same size throughout the program execution.,4.0,1.0,arrays that are static remain the same size throughout the program execution,"['arrays', 'static', 'remain', 'size', 'throughout', 'program', 'execution']",array static remain size throughout program execut,array static remain size throughout program execution
"a static array will only be initilized once, a non static array will be re-initilized once the program reaches the initilization line again.",5.0,1.0,a static array will only be initilized once a non static array will be re-initilized once the program reaches the initilization line again,"['static', 'array', 'initilized', 'non', 'static', 'array', 're-initilized', 'program', 'reaches', 'initilization', 'line']",static array initil non static array re-initil program reach initil line,static array initilized non static array re-initilized program reach initilization line
An array declared as static is available from beginning of program to end. One with o static declaration disappears if it is not accessed within the right scope.,4.5,1.0,an array declared as static is available from beginning of program to end one with o static declaration disappears if it is not accessed within the right scope,"['array', 'declared', 'static', 'available', 'beginning', 'program', 'end', 'one', 'static', 'declaration', 'disappears', 'accessed', 'within', 'right', 'scope']",array declar static avail begin program end one static declar disappear access within right scope,array declared static available beginning program end one static declaration disappears accessed within right scope
a static array has pre-runtime size and that size cannot be changed. A dynamic array gets its size at runtime.,3.0,0.0,a static array has pre-runtime size and that size cannot be changed a dynamic array gets its size at runtime,"['static', 'array', 'pre-runtime', 'size', 'size', 'changed', 'dynamic', 'array', 'gets', 'size', 'runtime']",static array pre-runtim size size chang dynam array get size runtim,static array pre-runtime size size changed dynamic array get size runtime
"If an array is declared as static, it is not created each time the array is called.",5.0,1.0,if an array is declared as static it is not created each time the array is called,"['array', 'declared', 'static', 'created', 'time', 'array', 'called']",array declar static creat time array call,array declared static created time array called
"An array that is not declared as static will re-initialize every time the function declaring it is called. A static array will initialize only once, at the declaration, and will store the values in it is elements throughout the duration of the program, even if the same function is called multiple times, a static array will only initialize once.",5.0,1.0,an array that is not declared as static will re-initialize every time the function declaring it is called a static array will initialize only once at the declaration and will store the values in it is elements throughout the duration of the program even if the same function is called multiple times a static array will only initialize once,"['array', 'declared', 'static', 're-initialize', 'every', 'time', 'function', 'declaring', 'called', 'static', 'array', 'initialize', 'declaration', 'store', 'values', 'elements', 'throughout', 'duration', 'program', 'even', 'function', 'called', 'multiple', 'times', 'static', 'array', 'initialize']",array declar static re-initi everi time function declar call static array initi declar store valu element throughout durat program even function call multipl time static array initi,array declared static re-initialize every time function declaring called static array initialize declaration store value element throughout duration program even function called multiple time static array initialize
"All elements are initialized to zero if not explicitly initialized, this does not happen for automatic local arrays",4.5,1.0,all elements are initialized to zero if not explicitly initialized this does not happen for automatic local arrays,"['elements', 'initialized', 'zero', 'explicitly', 'initialized', 'happen', 'automatic', 'local', 'arrays']",element initi zero explicitli initi happen automat local array,element initialized zero explicitly initialized happen automatic local array
"All elements are initialized to zero if not explicitly initialized for a static array, while a non-static array is not initialized to zero.",4.5,1.0,all elements are initialized to zero if not explicitly initialized for a static array while a non-static array is not initialized to zero,"['elements', 'initialized', 'zero', 'explicitly', 'initialized', 'static', 'array', 'non-static', 'array', 'initialized', 'zero']",element initi zero explicitli initi static array non-stat array initi zero,element initialized zero explicitly initialized static array non-static array initialized zero
static cannot be changed,3.0,0.0,static cannot be changed,"['static', 'changed']",static chang,static changed
"A static array has a set size that cannot change. The data may not need all of the space assigned, or could go beyond the size.",4.0,1.0,a static array has a set size that cannot change the data may not need all of the space assigned or could go beyond the size,"['static', 'array', 'set', 'size', 'change', 'data', 'may', 'need', 'space', 'assigned', 'could', 'go', 'beyond', 'size']",static array set size chang data may need space assign could go beyond size,static array set size change data may need space assigned could go beyond size
"A static member prevents naming conflictsnot put into global namespacewhile allowing for information hidingprivate, public.",3.0,0.0,a static member prevents naming conflictsnot put into global namespacewhile allowing for information hidingprivate public,"['static', 'member', 'prevents', 'naming', 'conflictsnot', 'put', 'global', 'namespacewhile', 'allowing', 'information', 'hidingprivate', 'public']",static member prevent name conflictsnot put global namespacewhil allow inform hidingpriv public,static member prevents naming conflictsnot put global namespacewhile allowing information hidingprivate public
A static local array exists for the duration of the program and its elements are initialized to 0 if not explicitly initialized. So a static local array 's elements will still be the same when called later unless specifically initialized to something else. This does not happen for automatic arrays.,5.0,1.0,a static local array exists for the duration of the program and its elements are initialized to 0 if not explicitly initialized so a static local array s elements will still be the same when called later unless specifically initialized to something else this does not happen for automatic arrays,"['static', 'local', 'array', 'exists', 'duration', 'program', 'elements', 'initialized', '0', 'explicitly', 'initialized', 'static', 'local', 'array', 'elements', 'still', 'called', 'later', 'unless', 'specifically', 'initialized', 'something', 'else', 'happen', 'automatic', 'arrays']",static local array exist durat program element initi 0 explicitli initi static local array element still call later unless specif initi someth els happen automat array,static local array exists duration program element initialized 0 explicitly initialized static local array element still called later unless specifically initialized something else happen automatic array
"Static arrays are those with a declared size, that is known to the program, whereas non-static arrays leave the size undeclared and open so it can be assigned later. Usually used for input purposes.",3.0,0.0,static arrays are those with a declared size that is known to the program whereas non-static arrays leave the size undeclared and open so it can be assigned later usually used for input purposes,"['static', 'arrays', 'declared', 'size', 'known', 'program', 'whereas', 'non-static', 'arrays', 'leave', 'size', 'undeclared', 'open', 'assigned', 'later', 'usually', 'used', 'input', 'purposes']",static array declar size known program wherea non-stat array leav size undeclar open assign later usual use input purpos,static array declared size known program whereas non-static array leave size undeclared open assigned later usually used input purpose
"static arrays keep the values after the end of a function, while non static reinitialize every time.",5.0,1.0,static arrays keep the values after the end of a function while non static reinitialize every time,"['static', 'arrays', 'keep', 'values', 'end', 'function', 'non', 'static', 'reinitialize', 'every', 'time']",static array keep valu end function non static reiniti everi time,static array keep value end function non static reinitialize every time
"Static arrays are created and initialized only once, and the values are not destroyed when the function terminates in the program. Automatic arrays reset everytime the function is called.",5.0,1.0,static arrays are created and initialized only once and the values are not destroyed when the function terminates in the program automatic arrays reset everytime the function is called,"['static', 'arrays', 'created', 'initialized', 'values', 'destroyed', 'function', 'terminates', 'program', 'automatic', 'arrays', 'reset', 'everytime', 'function', 'called']",static array creat initi valu destroy function termin program automat array reset everytim function call,static array created initialized value destroyed function terminates program automatic array reset everytime function called
"its not created and initialized each time program calls the function, and is not destroyed every time the function ends in the program.",5.0,1.0,its not created and initialized each time program calls the function and is not destroyed every time the function ends in the program,"['created', 'initialized', 'time', 'program', 'calls', 'function', 'destroyed', 'every', 'time', 'function', 'ends', 'program']",creat initi time program call function destroy everi time function end program,created initialized time program call function destroyed every time function end program
"When we declare it static the array is not destroyed after the function is over. When an array is not declared as static, the array is created and initialized every time a function calls it.",5.0,1.0,when we declare it static the array is not destroyed after the function is over when an array is not declared as static the array is created and initialized every time a function calls it,"['declare', 'static', 'array', 'destroyed', 'function', 'array', 'declared', 'static', 'array', 'created', 'initialized', 'every', 'time', 'function', 'calls']",declar static array destroy function array declar static array creat initi everi time function call,declare static array destroyed function array declared static array created initialized every time function call
the static array exists for the duration of the program,4.5,1.0,the static array exists for the duration of the program,"['static', 'array', 'exists', 'duration', 'program']",static array exist durat program,static array exists duration program
an array declared as static can only be declared once,3.5,0.0,an array declared as static can only be declared once,"['array', 'declared', 'static', 'declared']",array declar static declar,array declared static declared
"A static array exists in memory until the program terminates, whereas an automaticor normalarray is removed when the function that created it terminates",5.0,1.0,a static array exists in memory until the program terminates whereas an automaticor normalarray is removed when the function that created it terminates,"['static', 'array', 'exists', 'memory', 'program', 'terminates', 'whereas', 'automaticor', 'normalarray', 'removed', 'function', 'created', 'terminates']",static array exist memori program termin wherea automaticor normalarray remov function creat termin,static array exists memory program terminates whereas automaticor normalarray removed function created terminates
not answered,0.0,0.0,not answered,['answered'],answer,answered
Only constants can be used to declare the size of automatic and static arrays Exists for the duration of the program Is initialized when its declaration is first encountered All elements are initialized to zero if not explicitly initialized,5.0,1.0,only constants can be used to declare the size of automatic and static arrays exists for the duration of the program is initialized when its declaration is first encountered all elements are initialized to zero if not explicitly initialized,"['constants', 'used', 'declare', 'size', 'automatic', 'static', 'arrays', 'exists', 'duration', 'program', 'initialized', 'declaration', 'first', 'encountered', 'elements', 'initialized', 'zero', 'explicitly', 'initialized']",constant use declar size automat static array exist durat program initi declar first encount element initi zero explicitli initi,constant used declare size automatic static array exists duration program initialized declaration first encountered element initialized zero explicitly initialized
A static array cannot be changed in the program.,3.0,0.0,a static array cannot be changed in the program,"['static', 'array', 'changed', 'program']",static array chang program,static array changed program
static arrays are available throughout the program,5.0,1.0,static arrays are available throughout the program,"['static', 'arrays', 'available', 'throughout', 'program']",static array avail throughout program,static array available throughout program
"a static array is allocated when the program starts and is freed when the program exits but has limited scope, while an array that is not declared static is allocated and freed when it comes into and out of scope.",5.0,1.0,a static array is allocated when the program starts and is freed when the program exits but has limited scope while an array that is not declared static is allocated and freed when it comes into and out of scope,"['static', 'array', 'allocated', 'program', 'starts', 'freed', 'program', 'exits', 'limited', 'scope', 'array', 'declared', 'static', 'allocated', 'freed', 'comes', 'scope']",static array alloc program start freed program exit limit scope array declar static alloc freed come scope,static array allocated program start freed program exit limited scope array declared static allocated freed come scope
"if they are declared fixed or static that means they cannot change size once their storage has been allocated, however one that is not or dynamic arrarys can be resized.",3.0,0.0,if they are declared fixed or static that means they cannot change size once their storage has been allocated however one that is not or dynamic arrarys can be resized,"['declared', 'fixed', 'static', 'means', 'change', 'size', 'storage', 'allocated', 'however', 'one', 'dynamic', 'arrarys', 'resized']",declar fix static mean chang size storag alloc howev one dynam arrari resiz,declared fixed static mean change size storage allocated however one dynamic arrarys resized
"at least 2, depending on how many arrays are being used.",2.5,0.0,at least 2 depending on how many arrays are being used,"['least', '2', 'depending', 'many', 'arrays', 'used']",least 2 depend mani array use,least 2 depending many array used
all of them.,3.5,0.0,all of them,[],,
"When passing a multi-dimensional array, all dimensions must be specified except for the first dimension.",5.0,1.0,when passing a multi-dimensional array all dimensions must be specified except for the first dimension,"['passing', 'multi-dimensional', 'array', 'dimensions', 'must', 'specified', 'except', 'first', 'dimension']",pass multi-dimension array dimens must specifi except first dimens,passing multi-dimensional array dimension must specified except first dimension
It depends what parameters you are passing in a multidimensional. A multideminsional can have more than two dimensions.,3.5,0.0,it depends what parameters you are passing in a multidimensional a multideminsional can have more than two dimensions,"['depends', 'parameters', 'passing', 'multidimensional', 'multideminsional', 'two', 'dimensions']",depend paramet pass multidimension multideminsion two dimens,depends parameter passing multidimensional multideminsional two dimension
The first dimension is not required however the subsequent dimensionsare needed for the compiler.,5.0,1.0,the first dimension is not required however the subsequent dimensionsare needed for the compiler,"['first', 'dimension', 'required', 'however', 'subsequent', 'dimensionsare', 'needed', 'compiler']",first dimens requir howev subsequ dimensionsar need compil,first dimension required however subsequent dimensionsare needed compiler
all but the first,5.0,1.0,all but the first,['first'],first,first
All of the dimensions must be specified.,3.5,0.0,all of the dimensions must be specified,"['dimensions', 'must', 'specified']",dimens must specifi,dimension must specified
just the first one at least.,2.0,0.0,just the first one at least,"['first', 'one', 'least']",first one least,first one least
"Two paramaters, the array and how many columns. arraya [], [3]",4.0,1.0,two paramaters the array and how many columns arraya 3,"['two', 'paramaters', 'array', 'many', 'columns', 'arraya', '3']",two paramat array mani column arraya 3,two paramaters array many column arraya 3
"The size of the first dimension can be omitted, same as a regular array. However, for every dimension outside the first, the size of those dimensions must be specified when passed, for example, a multi-dimensional array of [2] [4] [6] with the name MultiArray would be passed as: MultiArray [] [4] [6], 2",4.5,1.0,the size of the first dimension can be omitted same as a regular array however for every dimension outside the first the size of those dimensions must be specified when passed for example a multi-dimensional array of 2 4 6 with the name multiarray would be passed as multiarray 4 6 2,"['size', 'first', 'dimension', 'omitted', 'regular', 'array', 'however', 'every', 'dimension', 'outside', 'first', 'size', 'dimensions', 'must', 'specified', 'passed', 'example', 'multi-dimensional', 'array', '2', '4', '6', 'name', 'multiarray', 'would', 'passed', 'multiarray', '4', '6', '2']",size first dimens omit regular array howev everi dimens outsid first size dimens must specifi pass exampl multi-dimension array 2 4 6 name multiarray would pass multiarray 4 6 2,size first dimension omitted regular array however every dimension outside first size dimension must specified passed example multi-dimensional array 2 4 6 name multiarray would passed multiarray 4 6 2
Size of subsequent dimensions are required. Compiler must know how many elements to skip to move to the second element in the first dimension,4.5,1.0,size of subsequent dimensions are required compiler must know how many elements to skip to move to the second element in the first dimension,"['size', 'subsequent', 'dimensions', 'required', 'compiler', 'must', 'know', 'many', 'elements', 'skip', 'move', 'second', 'element', 'first', 'dimension']",size subsequ dimens requir compil must know mani element skip move second element first dimens,size subsequent dimension required compiler must know many element skip move second element first dimension
Every dimension after the first.,5.0,1.0,every dimension after the first,"['every', 'dimension', 'first']",everi dimens first,every dimension first
both,2.5,0.0,both,[],,
"the size of the first dimension does not need to be specified, but all other dimensions do.",5.0,1.0,the size of the first dimension does not need to be specified but all other dimensions do,"['size', 'first', 'dimension', 'need', 'specified', 'dimensions']",size first dimens need specifi dimens,size first dimension need specified dimension
"when passingin maina multidimensional array to a function, no dimensions need be specified",2.0,0.0,when passingin maina multidimensional array to a function no dimensions need be specified,"['passingin', 'maina', 'multidimensional', 'array', 'function', 'dimensions', 'need', 'specified']",passingin maina multidimension array function dimens need specifi,passingin maina multidimensional array function dimension need specified
"All dimensions except for the first one need to be specified when passing an array to a function, the compiler needs to know how many memory addresses to skip to make it back to the 2nd element in the first dimension. The size of the first dimension does not need to be specified.",5.0,1.0,all dimensions except for the first one need to be specified when passing an array to a function the compiler needs to know how many memory addresses to skip to make it back to the 2nd element in the first dimension the size of the first dimension does not need to be specified,"['dimensions', 'except', 'first', 'one', 'need', 'specified', 'passing', 'array', 'function', 'compiler', 'needs', 'know', 'many', 'memory', 'addresses', 'skip', 'make', 'back', '2nd', 'element', 'first', 'dimension', 'size', 'first', 'dimension', 'need', 'specified']",dimens except first one need specifi pass array function compil need know mani memori address skip make back 2nd element first dimens size first dimens need specifi,dimension except first one need specified passing array function compiler need know many memory address skip make back 2nd element first dimension size first dimension need specified
as many as there are dimensions. Most commonly just rows and columns,3.5,0.0,as many as there are dimensions most commonly just rows and columns,"['many', 'dimensions', 'commonly', 'rows', 'columns']",mani dimens commonli row column,many dimension commonly row column
"at least 2, but it should always equal the number of dimensions that the argument is expecting ... like ... blah [] [] [] [] will require 4 dimensional array input. blah [] [] [] will require a 3 dimensional array. blah [] [] will require a 2 dimensional array.",3.0,0.0,at least 2 but it should always equal the number of dimensions that the argument is expecting like blah will require 4 dimensional array input blah will require a 3 dimensional array blah will require a 2 dimensional array,"['least', '2', 'always', 'equal', 'number', 'dimensions', 'argument', 'expecting', 'like', 'blah', 'require', '4', 'dimensional', 'array', 'input', 'blah', 'require', '3', 'dimensional', 'array', 'blah', 'require', '2', 'dimensional', 'array']",least 2 alway equal number dimens argument expect like blah requir 4 dimension array input blah requir 3 dimension array blah requir 2 dimension array,least 2 always equal number dimension argument expecting like blah require 4 dimensional array input blah require 3 dimensional array blah require 2 dimensional array
"None, just pass the array name.",2.0,0.0,none just pass the array name,"['none', 'pass', 'array', 'name']",none pass array name,none pas array name
all subsequent dimensions after the first dimension. first is not needed to be specified.,5.0,1.0,all subsequent dimensions after the first dimension first is not needed to be specified,"['subsequent', 'dimensions', 'first', 'dimension', 'first', 'needed', 'specified']",subsequ dimens first dimens first need specifi,subsequent dimension first dimension first needed specified
"all dimensions, excluding the first one.",5.0,1.0,all dimensions excluding the first one,"['dimensions', 'excluding', 'first', 'one']",dimens exclud first one,dimension excluding first one
all dimensions but the first,5.0,1.0,all dimensions but the first,"['dimensions', 'first']",dimens first,dimension first
the first needs to be specified by size and the rest need only be statedfirst like this [3] then [] [] [],3.0,0.0,the first needs to be specified by size and the rest need only be statedfirst like this 3 then,"['first', 'needs', 'specified', 'size', 'rest', 'need', 'statedfirst', 'like', '3']",first need specifi size rest need statedfirst like 3,first need specified size rest need statedfirst like 3
one less than the number of dimensions the array contains,4.5,1.0,one less than the number of dimensions the array contains,"['one', 'less', 'number', 'dimensions', 'array', 'contains']",one less number dimens array contain,one le number dimension array contains
not answered,0.0,0.0,not answered,['answered'],answer,answered
one,2.0,0.0,one,['one'],one,one
All subsequent dimensions after the first one.,5.0,1.0,all subsequent dimensions after the first one,"['subsequent', 'dimensions', 'first', 'one']",subsequ dimens first one,subsequent dimension first one
two or more,2.5,0.0,two or more,['two'],two,two
1 less than the total number of dimensions,4.5,1.0,1 less than the total number of dimensions,"['1', 'less', 'total', 'number', 'dimensions']",1 less total number dimens,1 le total number dimension
"Multi dimensional arrays are accessed using more than 1 index, one for each dimension at least.",3.5,0.0,multi dimensional arrays are accessed using more than 1 index one for each dimension at least,"['multi', 'dimensional', 'arrays', 'accessed', 'using', '1', 'index', 'one', 'dimension', 'least']",multi dimension array access use 1 index one dimens least,multi dimensional array accessed using 1 index one dimension least
compilation error,1.0,0.0,compilation error,"['compilation', 'error']",compil error,compilation error
compilation error.,1.0,0.0,compilation error,"['compilation', 'error']",compil error,compilation error
Using an index outside the bounds of the array generates a run-time error.,5.0,1.0,using an index outside the bounds of the array generates a run-time error,"['using', 'index', 'outside', 'bounds', 'array', 'generates', 'run-time', 'error']",use index outsid bound array gener run-tim error,using index outside bound array generates run-time error
run-time error,5.0,1.0,run-time error,"['run-time', 'error']",run-tim error,run-time error
Its a run-time error.,5.0,1.0,its a run-time error,"['run-time', 'error']",run-tim error,run-time error
run time error,5.0,1.0,run time error,"['run', 'time', 'error']",run time error,run time error
Run-time error.,5.0,1.0,run-time error,"['run-time', 'error']",run-tim error,run-time error
run-time error,5.0,1.0,run-time error,"['run-time', 'error']",run-tim error,run-time error
compilation error,1.0,0.0,compilation error,"['compilation', 'error']",compil error,compilation error
"This is a run-time error. The program will compile AND execute, so these errors can be difficult to debug.",5.0,1.0,this is a run-time error the program will compile and execute so these errors can be difficult to debug,"['run-time', 'error', 'program', 'compile', 'execute', 'errors', 'difficult', 'debug']",run-tim error program compil execut error difficult debug,run-time error program compile execute error difficult debug
this is a run-time error or execution-time error.,5.0,1.0,this is a run-time error or execution-time error,"['run-time', 'error', 'execution-time', 'error']",run-tim error execution-tim error,run-time error execution-time error
Run-time.,5.0,1.0,run-time,['run-time'],run-tim,run-time
run time,5.0,1.0,run time,"['run', 'time']",run time,run time
Generates a compilation error. The compiler will complain that the variable you are referring to was never declared.,1.0,0.0,generates a compilation error the compiler will complain that the variable you are referring to was never declared,"['generates', 'compilation', 'error', 'compiler', 'complain', 'variable', 'referring', 'never', 'declared']",gener compil error compil complain variabl refer never declar,generates compilation error compiler complain variable referring never declared
run-time,5.0,1.0,run-time,['run-time'],run-tim,run-time
Run-time error.,5.0,1.0,run-time error,"['run-time', 'error']",run-tim error,run-time error
run time error,5.0,1.0,run time error,"['run', 'time', 'error']",run time error,run time error
runtime error.,5.0,1.0,runtime error,"['runtime', 'error']",runtim error,runtime error
Compilation error.,1.0,0.0,compilation error,"['compilation', 'error']",compil error,compilation error
run-time error,5.0,1.0,run-time error,"['run-time', 'error']",run-tim error,run-time error
run-time error,5.0,1.0,run-time error,"['run-time', 'error']",run-tim error,run-time error
run-time error,5.0,1.0,run-time error,"['run-time', 'error']",run-tim error,run-time error
compilation error.,1.0,0.0,compilation error,"['compilation', 'error']",compil error,compilation error
run-time error,5.0,1.0,run-time error,"['run-time', 'error']",run-tim error,run-time error
not answered,0.0,0.0,not answered,['answered'],answer,answered
run-time error,5.0,1.0,run-time error,"['run-time', 'error']",run-tim error,run-time error
compilation error,1.0,0.0,compilation error,"['compilation', 'error']",compil error,compilation error
compilation error,1.0,0.0,compilation error,"['compilation', 'error']",compil error,compilation error
"It will NOT cause a compilation error. It will either give a run-time error, or will give the value at that actual location in memory, causing a logic error.",5.0,1.0,it will not cause a compilation error it will either give a run-time error or will give the value at that actual location in memory causing a logic error,"['cause', 'compilation', 'error', 'either', 'give', 'run-time', 'error', 'give', 'value', 'actual', 'location', 'memory', 'causing', 'logic', 'error']",caus compil error either give run-tim error give valu actual locat memori caus logic error,cause compilation error either give run-time error give value actual location memory causing logic error
it is a run-time error,5.0,1.0,it is a run-time error,"['run-time', 'error']",run-tim error,run-time error
"usually it is by rows then followed by the column, but it is up to the programmer to determine how values are stored in bi-dimensional arrays.",2.5,0.0,usually it is by rows then followed by the column but it is up to the programmer to determine how values are stored in bi-dimensional arrays,"['usually', 'rows', 'followed', 'column', 'programmer', 'determine', 'values', 'stored', 'bi-dimensional', 'arrays']",usual row follow column programm determin valu store bi-dimension array,usually row followed column programmer determine value stored bi-dimensional array
by rows.,5.0,1.0,by rows,['rows'],row,row
Multi-dimensional arrays are stored in memory by rows.,5.0,1.0,multi-dimensional arrays are stored in memory by rows,"['multi-dimensional', 'arrays', 'stored', 'memory', 'rows']",multi-dimension array store memori row,multi-dimensional array stored memory row
"A bi-dimensional or two-dimensional array is stored in a row-column matrix. Where the first index indicates the row and the second indicates the column. This means that when array elements are accessed in the order in which they are actually stored in memory, the right index changes faster than the left.",4.5,1.0,a bi-dimensional or two-dimensional array is stored in a row-column matrix where the first index indicates the row and the second indicates the column this means that when array elements are accessed in the order in which they are actually stored in memory the right index changes faster than the left,"['bi-dimensional', 'two-dimensional', 'array', 'stored', 'row-column', 'matrix', 'first', 'index', 'indicates', 'row', 'second', 'indicates', 'column', 'means', 'array', 'elements', 'accessed', 'order', 'actually', 'stored', 'memory', 'right', 'index', 'changes', 'faster', 'left']",bi-dimension two-dimension array store row-column matrix first index indic row second indic column mean array element access order actual store memori right index chang faster left,bi-dimensional two-dimensional array stored row-column matrix first index indicates row second indicates column mean array element accessed order actually stored memory right index change faster left
They are stored in memory in rows.,5.0,1.0,they are stored in memory in rows,"['stored', 'memory', 'rows']",store memori row,stored memory row
rows,5.0,1.0,rows,['rows'],row,row
By rows.,5.0,1.0,by rows,['rows'],row,row
by rows,5.0,1.0,by rows,['rows'],row,row
m-by-n. by row-column.,4.0,1.0,m-by-n by row-column,"['m-by-n', 'row-column']",m-by-n row-column,m-by-n row-column
bi-dimensional arrays are stored by rows,5.0,1.0,bi-dimensional arrays are stored by rows,"['bi-dimensional', 'arrays', 'stored', 'rows']",bi-dimension array store row,bi-dimensional array stored row
By rows.,5.0,1.0,by rows,['rows'],row,row
By column.,1.0,0.0,by column,['column'],column,column
columns,1.0,0.0,columns,['columns'],column,column
By rows,5.0,1.0,by rows,['rows'],row,row
by-dimensional arrays are stored by row,5.0,1.0,by-dimensional arrays are stored by row,"['by-dimensional', 'arrays', 'stored', 'row']",by-dimension array store row,by-dimensional array stored row
"x by y is row by column. So x is rows, and y is columns. Since the length of the row is not needed when passing the array to the function, this leads me to believe that bi-dimensional arrays are stored by rows at a time.",5.0,1.0,x by y is row by column so x is rows and y is columns since the length of the row is not needed when passing the array to the function this leads me to believe that bi-dimensional arrays are stored by rows at a time,"['x', 'row', 'column', 'x', 'rows', 'columns', 'since', 'length', 'row', 'needed', 'passing', 'array', 'function', 'leads', 'believe', 'bi-dimensional', 'arrays', 'stored', 'rows', 'time']",x row column x row column sinc length row need pass array function lead believ bi-dimension array store row time,x row column x row column since length row needed passing array function lead believe bi-dimensional array stored row time
"Both, they are stored in seperate sections.",2.5,0.0,both they are stored in seperate sections,"['stored', 'seperate', 'sections']",store seper section,stored seperate section
"by rows, then columns.",4.5,1.0,by rows then columns,"['rows', 'columns']",row column,row column
Rows,5.0,1.0,rows,['rows'],row,row
by rows of rows,5.0,1.0,by rows of rows,"['rows', 'rows']",row row,row row
by rows,5.0,1.0,by rows,['rows'],row,row
rows,5.0,1.0,rows,['rows'],row,row
stored by rows,5.0,1.0,stored by rows,"['stored', 'rows']",store row,stored row
by rows,5.0,1.0,by rows,['rows'],row,row
by rows,5.0,1.0,by rows,['rows'],row,row
by rows,5.0,1.0,by rows,['rows'],row,row
rows,5.0,1.0,rows,['rows'],row,row
by row and column,2.5,0.0,by row and column,"['row', 'column']",row column,row column
by rows,5.0,1.0,by rows,['rows'],row,row
No answer,1.0,0.0,no answer,['answer'],answer,answer
"Takes an element of an array and compares it with the next element, depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array.",3.0,0.0,takes an element of an array and compares it with the next element depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array,"['takes', 'element', 'array', 'compares', 'next', 'element', 'depending', 'values', 'two', 'elements', 'switch', 'program', 'compare', 'new', 'switched', 'element', 'next', 'one', 'array']",take element array compar next element depend valu two element switch program compar new switch element next one array,take element array compare next element depending value two element switch program compare new switched element next one array
"Insertion sort divides the list into sorted and unsorted regions, then takes each item from the unsorted region and inserts it into its correct order in the sorted region.",5.0,1.0,insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region,"['insertion', 'sort', 'divides', 'list', 'sorted', 'unsorted', 'regions', 'takes', 'item', 'unsorted', 'region', 'inserts', 'correct', 'order', 'sorted', 'region']",insert sort divid list sort unsort region take item unsort region insert correct order sort region,insertion sort divide list sorted unsorted region take item unsorted region insert correct order sorted region
The sorted array or list is built one entry at a time.,3.5,0.0,the sorted array or list is built one entry at a time,"['sorted', 'array', 'list', 'built', 'one', 'entry', 'time']",sort array list built one entri time,sorted array list built one entry time
It starts with the second element and checks it to see if it is less than the elementsto the left of it and if it is it inserts it into its corrected position.,5.0,1.0,it starts with the second element and checks it to see if it is less than the elementsto the left of it and if it is it inserts it into its corrected position,"['starts', 'second', 'element', 'checks', 'see', 'less', 'elementsto', 'left', 'inserts', 'corrected', 'position']",start second element check see less elementsto left insert correct posit,start second element check see le elementsto left insert corrected position
Compare two numbers at a time and swap until the entire list is sorted.,2.0,0.0,compare two numbers at a time and swap until the entire list is sorted,"['compare', 'two', 'numbers', 'time', 'swap', 'entire', 'list', 'sorted']",compar two number time swap entir list sort,compare two number time swap entire list sorted
"Assume the first number is sorted, then move down the list and insert the numbers you come across into the corresponding place on the sorted side of the list.",5.0,1.0,assume the first number is sorted then move down the list and insert the numbers you come across into the corresponding place on the sorted side of the list,"['assume', 'first', 'number', 'sorted', 'move', 'list', 'insert', 'numbers', 'come', 'across', 'corresponding', 'place', 'sorted', 'side', 'list']",assum first number sort move list insert number come across correspond place sort side list,assume first number sorted move list insert number come across corresponding place sorted side list
insertion sort is were after k iterations the first k items in the array are sorted it take the k plus 1 item and inserts it into the correct position in the already sorted k elements.,4.5,1.0,insertion sort is were after k iterations the first k items in the array are sorted it take the k plus 1 item and inserts it into the correct position in the already sorted k elements,"['insertion', 'sort', 'k', 'iterations', 'first', 'k', 'items', 'array', 'sorted', 'take', 'k', 'plus', '1', 'item', 'inserts', 'correct', 'position', 'already', 'sorted', 'k', 'elements']",insert sort k iter first k item array sort take k plu 1 item insert correct posit alreadi sort k element,insertion sort k iteration first k item array sorted take k plus 1 item insert correct position already sorted k element
Looking at the 2nd element move forward and place the element in the correct spot.,4.5,1.0,looking at the 2nd element move forward and place the element in the correct spot,"['looking', '2nd', 'element', 'move', 'forward', 'place', 'element', 'correct', 'spot']",look 2nd element move forward place element correct spot,looking 2nd element move forward place element correct spot
"Starting at the beginning of an array, take each element in order and place it in it is correct position relative to all previously sorted elements.",5.0,1.0,starting at the beginning of an array take each element in order and place it in it is correct position relative to all previously sorted elements,"['starting', 'beginning', 'array', 'take', 'element', 'order', 'place', 'correct', 'position', 'relative', 'previously', 'sorted', 'elements']",start begin array take element order place correct posit rel previous sort element,starting beginning array take element order place correct position relative previously sorted element
To sort the elements in an array by removing an element from the input data and inserting it at the correct position.,5.0,1.0,to sort the elements in an array by removing an element from the input data and inserting it at the correct position,"['sort', 'elements', 'array', 'removing', 'element', 'input', 'data', 'inserting', 'correct', 'position']",sort element array remov element input data insert correct posit,sort element array removing element input data inserting correct position
"Insertion sort removes an element from the data, and inserts it at the correct position in the already sorted list.",5.0,1.0,insertion sort removes an element from the data and inserts it at the correct position in the already sorted list,"['insertion', 'sort', 'removes', 'element', 'data', 'inserts', 'correct', 'position', 'already', 'sorted', 'list']",insert sort remov element data insert correct posit alreadi sort list,insertion sort remove element data insert correct position already sorted list
Take a number and choose a pivot point and insert the number in the correct position from the pivot point.,3.0,0.0,take a number and choose a pivot point and insert the number in the correct position from the pivot point,"['take', 'number', 'choose', 'pivot', 'point', 'insert', 'number', 'correct', 'position', 'pivot', 'point']",take number choos pivot point insert number correct posit pivot point,take number choose pivot point insert number correct position pivot point
have a marker and sort everything to the left of the value for every new value when moving to the right.,3.0,0.0,have a marker and sort everything to the left of the value for every new value when moving to the right,"['marker', 'sort', 'everything', 'left', 'value', 'every', 'new', 'value', 'moving', 'right']",marker sort everyth left valu everi new valu move right,marker sort everything left value every new value moving right
The main idea behind insertion sort is to take a random variable from the right and insert it in order to the left.,4.5,1.0,the main idea behind insertion sort is to take a random variable from the right and insert it in order to the left,"['main', 'idea', 'behind', 'insertion', 'sort', 'take', 'random', 'variable', 'right', 'insert', 'order', 'left']",main idea behind insert sort take random variabl right insert order left,main idea behind insertion sort take random variable right insert order left
Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements.,4.5,1.0,insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements,"['insertion', 'sort', 'progresses', 'list', 'elements', 'determines', 'next', 'element', 'inserted', 'already', 'sorted', 'array', 'starting', 'sorting', 'using', 'first', 'two', 'elements']",insert sort progress list element determin next element insert alreadi sort array start sort use first two element,insertion sort progress list element determines next element inserted already sorted array starting sorting using first two element
"it goes through the list only once, picking each integer and putting it in its desired position, then continuing.",4.0,1.0,it goes through the list only once picking each integer and putting it in its desired position then continuing,"['goes', 'list', 'picking', 'integer', 'putting', 'desired', 'position', 'continuing']",goe list pick integ put desir posit continu,go list picking integer putting desired position continuing
Inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array.,3.5,0.0,inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array,"['inserting', 'array', 'items', 'appropriate', 'positions', 'smallest', 'largest', 'pivot', 'starts', 'second', 'element', 'array']",insert array item appropri posit smallest largest pivot start second element array,inserting array item appropriate position smallest largest pivot start second element array
Insert the item into its proper position by shifting larger sorted array values to the right.,3.0,0.0,insert the item into its proper position by shifting larger sorted array values to the right,"['insert', 'item', 'proper', 'position', 'shifting', 'larger', 'sorted', 'array', 'values', 'right']",insert item proper posit shift larger sort array valu right,insert item proper position shifting larger sorted array value right
a comparison sort in which the sorted array is built one entry at a time,4.0,1.0,a comparison sort in which the sorted array is built one entry at a time,"['comparison', 'sort', 'sorted', 'array', 'built', 'one', 'entry', 'time']",comparison sort sort array built one entri time,comparison sort sorted array built one entry time
"Insertion sort is an algorithm where the first element of the array is in the sorted list, all the other pick one by one and taken from the unsorted array, to the sorted array.",4.5,1.0,insertion sort is an algorithm where the first element of the array is in the sorted list all the other pick one by one and taken from the unsorted array to the sorted array,"['insertion', 'sort', 'algorithm', 'first', 'element', 'array', 'sorted', 'list', 'pick', 'one', 'one', 'taken', 'unsorted', 'array', 'sorted', 'array']",insert sort algorithm first element array sort list pick one one taken unsort array sort array,insertion sort algorithm first element array sorted list pick one one taken unsorted array sorted array
"Every iteration of an insertion sort takes away an element from the input data, inserting it at the right position in the sorted list.",5.0,1.0,every iteration of an insertion sort takes away an element from the input data inserting it at the right position in the sorted list,"['every', 'iteration', 'insertion', 'sort', 'takes', 'away', 'element', 'input', 'data', 'inserting', 'right', 'position', 'sorted', 'list']",everi iter insert sort take away element input data insert right posit sort list,every iteration insertion sort take away element input data inserting right position sorted list
the insertion sort creates a new array and inserts each item in its place with respect to the new array.,4.0,1.0,the insertion sort creates a new array and inserts each item in its place with respect to the new array,"['insertion', 'sort', 'creates', 'new', 'array', 'inserts', 'item', 'place', 'respect', 'new', 'array']",insert sort creat new array insert item place respect new array,insertion sort creates new array insert item place respect new array
"Insertion sort takes each entitity of an unsorted array in order, and sorts it into the correct position between the entities it has sorted.",5.0,1.0,insertion sort takes each entitity of an unsorted array in order and sorts it into the correct position between the entities it has sorted,"['insertion', 'sort', 'takes', 'entitity', 'unsorted', 'array', 'order', 'sorts', 'correct', 'position', 'entities', 'sorted']",insert sort take entit unsort array order sort correct posit entiti sort,insertion sort take entitity unsorted array order sort correct position entity sorted
"it takes the second element and swaps it with the 1st if it is less and keeps it there if its larger, then it goes to the third element and inserts it in the right places with respect to the first 2 elements and so on ...",5.0,1.0,it takes the second element and swaps it with the 1st if it is less and keeps it there if its larger then it goes to the third element and inserts it in the right places with respect to the first 2 elements and so on,"['takes', 'second', 'element', 'swaps', '1st', 'less', 'keeps', 'larger', 'goes', 'third', 'element', 'inserts', 'right', 'places', 'respect', 'first', '2', 'elements']",take second element swap 1st less keep larger goe third element insert right place respect first 2 element,take second element swap 1st le keep larger go third element insert right place respect first 2 element
"Starting with the first element in the array, each following element is put in place by determining if it is smaller or larger than the starting element.",4.0,1.0,starting with the first element in the array each following element is put in place by determining if it is smaller or larger than the starting element,"['starting', 'first', 'element', 'array', 'following', 'element', 'put', 'place', 'determining', 'smaller', 'larger', 'starting', 'element']",start first element array follow element put place determin smaller larger start element,starting first element array following element put place determining smaller larger starting element
"one by one, each item is taken and placed into the correct place in the sorted portion of the array until there are no more items",4.5,1.0,one by one each item is taken and placed into the correct place in the sorted portion of the array until there are no more items,"['one', 'one', 'item', 'taken', 'placed', 'correct', 'place', 'sorted', 'portion', 'array', 'items']",one one item taken place correct place sort portion array item,one one item taken placed correct place sorted portion array item
you take each element and insert it in the correct position with respect to all the elements before it,5.0,1.0,you take each element and insert it in the correct position with respect to all the elements before it,"['take', 'element', 'insert', 'correct', 'position', 'respect', 'elements']",take element insert correct posit respect element,take element insert correct position respect element
"Insertion sort is a simple sorting algorithm, a comparison sort in which the sorted arrayor listis built one entry at a time.",4.0,1.0,insertion sort is a simple sorting algorithm a comparison sort in which the sorted arrayor listis built one entry at a time,"['insertion', 'sort', 'simple', 'sorting', 'algorithm', 'comparison', 'sort', 'sorted', 'arrayor', 'listis', 'built', 'one', 'entry', 'time']",insert sort simpl sort algorithm comparison sort sort arrayor listi built one entri time,insertion sort simple sorting algorithm comparison sort sorted arrayor listis built one entry time
Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,5.0,1.0,searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,"['searches', 'array', 'largest', 'smallest', 'element', 'moved', 'front', 'array', 'search', 'next', 'largest', 'smallest', 'element', 'move', 'front']",search array largest smallest element move front array search next largest smallest element move front,search array largest smallest element moved front array search next largest smallest element move front
"Selection sort searches the whole array for the largest item and puts it at the end of the array, then searches for the second largest item and puts it at the second to last spot and so on.",4.5,1.0,selection sort searches the whole array for the largest item and puts it at the end of the array then searches for the second largest item and puts it at the second to last spot and so on,"['selection', 'sort', 'searches', 'whole', 'array', 'largest', 'item', 'puts', 'end', 'array', 'searches', 'second', 'largest', 'item', 'puts', 'second', 'last', 'spot']",select sort search whole array largest item put end array search second largest item put second last spot,selection sort search whole array largest item put end array search second largest item put second last spot
Finds the minimum value and swap it with the value in the first position.,5.0,1.0,finds the minimum value and swap it with the value in the first position,"['finds', 'minimum', 'value', 'swap', 'value', 'first', 'position']",find minimum valu swap valu first posit,find minimum value swap value first position
It finds the minimum element in the array and swaps it with the first element then repeats this step swapping the minimum element with nth positions in the array.,5.0,1.0,it finds the minimum element in the array and swaps it with the first element then repeats this step swapping the minimum element with nth positions in the array,"['finds', 'minimum', 'element', 'array', 'swaps', 'first', 'element', 'repeats', 'step', 'swapping', 'minimum', 'element', 'nth', 'positions', 'array']",find minimum element array swap first element repeat step swap minimum element nth posit array,find minimum element array swap first element repeat step swapping minimum element nth position array
"Find the lowest value and place it at the front, then find the next lowest and place it in front of the last value, etc.",4.5,1.0,find the lowest value and place it at the front then find the next lowest and place it in front of the last value etc,"['find', 'lowest', 'value', 'place', 'front', 'find', 'next', 'lowest', 'place', 'front', 'last', 'value', 'etc']",find lowest valu place front find next lowest place front last valu etc,find lowest value place front find next lowest place front last value etc
"Cycle through the unsorted list, place the minimum in the next slot in the sorted list, and repeat.",4.5,1.0,cycle through the unsorted list place the minimum in the next slot in the sorted list and repeat,"['cycle', 'unsorted', 'list', 'place', 'minimum', 'next', 'slot', 'sorted', 'list', 'repeat']",cycl unsort list place minimum next slot sort list repeat,cycle unsorted list place minimum next slot sorted list repeat
find the minimum value in the list swap it with the first element in the list the find the second largest and swap it with the second element in the array continue like this until the array is sorted.,5.0,1.0,find the minimum value in the list swap it with the first element in the list the find the second largest and swap it with the second element in the array continue like this until the array is sorted,"['find', 'minimum', 'value', 'list', 'swap', 'first', 'element', 'list', 'find', 'second', 'largest', 'swap', 'second', 'element', 'array', 'continue', 'like', 'array', 'sorted']",find minimum valu list swap first element list find second largest swap second element array continu like array sort,find minimum value list swap first element list find second largest swap second element array continue like array sorted
Find the smallest and put it in the current position till you get to the end.,5.0,1.0,find the smallest and put it in the current position till you get to the end,"['find', 'smallest', 'put', 'current', 'position', 'till', 'get', 'end']",find smallest put current posit till get end,find smallest put current position till get end
Find the lowest unsorted value in the array and place it at the current positionstarting at the first element in the arrayand advance the current position by one.,5.0,1.0,find the lowest unsorted value in the array and place it at the current positionstarting at the first element in the arrayand advance the current position by one,"['find', 'lowest', 'unsorted', 'value', 'array', 'place', 'current', 'positionstarting', 'first', 'element', 'arrayand', 'advance', 'current', 'position', 'one']",find lowest unsort valu array place current positionstart first element arrayand advanc current posit one,find lowest unsorted value array place current positionstarting first element arrayand advance current position one
To sort the elements by comparing two elements and swapping the smaller one to sort the elements in the array.,3.5,0.0,to sort the elements by comparing two elements and swapping the smaller one to sort the elements in the array,"['sort', 'elements', 'comparing', 'two', 'elements', 'swapping', 'smaller', 'one', 'sort', 'elements', 'array']",sort element compar two element swap smaller one sort element array,sort element comparing two element swapping smaller one sort element array
"Selection sort finds the minimum value in the list, swaps it with the first value in the list, and repeats throughout the list.",4.5,1.0,selection sort finds the minimum value in the list swaps it with the first value in the list and repeats throughout the list,"['selection', 'sort', 'finds', 'minimum', 'value', 'list', 'swaps', 'first', 'value', 'list', 'repeats', 'throughout', 'list']",select sort find minimum valu list swap first valu list repeat throughout list,selection sort find minimum value list swap first value list repeat throughout list
"Select the minimum number from the array and put it in the current position, then move on",5.0,1.0,select the minimum number from the array and put it in the current position then move on,"['select', 'minimum', 'number', 'array', 'put', 'current', 'position', 'move']",select minimum number array put current posit move,select minimum number array put current position move
Find the lowest value and place it in the front of the list and swap it with that value. Continue moving right.,5.0,1.0,find the lowest value and place it in the front of the list and swap it with that value continue moving right,"['find', 'lowest', 'value', 'place', 'front', 'list', 'swap', 'value', 'continue', 'moving', 'right']",find lowest valu place front list swap valu continu move right,find lowest value place front list swap value continue moving right
The main idea behind selection sort is to take the least variable from the right and put it directly to the left.,4.5,1.0,the main idea behind selection sort is to take the least variable from the right and put it directly to the left,"['main', 'idea', 'behind', 'selection', 'sort', 'take', 'least', 'variable', 'right', 'put', 'directly', 'left']",main idea behind select sort take least variabl right put directli left,main idea behind selection sort take least variable right put directly left
"Find the smallest value in the list and make it the first element, then find the smallest value of the leftover list and make it the first element of the leftover list and continue until the list is sorted.",5.0,1.0,find the smallest value in the list and make it the first element then find the smallest value of the leftover list and make it the first element of the leftover list and continue until the list is sorted,"['find', 'smallest', 'value', 'list', 'make', 'first', 'element', 'find', 'smallest', 'value', 'leftover', 'list', 'make', 'first', 'element', 'leftover', 'list', 'continue', 'list', 'sorted']",find smallest valu list make first element find smallest valu leftov list make first element leftov list continu list sort,find smallest value list make first element find smallest value leftover list make first element leftover list continue list sorted
It runs through and finds the lowestor highestvalue and puts it in its desired position.,4.5,1.0,it runs through and finds the lowestor highestvalue and puts it in its desired position,"['runs', 'finds', 'lowestor', 'highestvalue', 'puts', 'desired', 'position']",run find lowestor highestvalu put desir posit,run find lowestor highestvalue put desired position
"Places the smallest item in the list at position 1, and then proceeds to each value until the last position of the ray is reached.",5.0,1.0,places the smallest item in the list at position 1 and then proceeds to each value until the last position of the ray is reached,"['places', 'smallest', 'item', 'list', 'position', '1', 'proceeds', 'value', 'last', 'position', 'ray', 'reached']",place smallest item list posit 1 proce valu last posit ray reach,place smallest item list position 1 proceeds value last position ray reached
Search for the largest item in an array and swap it with the last unsorted item.,4.5,1.0,search for the largest item in an array and swap it with the last unsorted item,"['search', 'largest', 'item', 'array', 'swap', 'last', 'unsorted', 'item']",search largest item array swap last unsort item,search largest item array swap last unsorted item
finds the smallest element and places in 1st position. then the process is repeated on the rest of the array.,5.0,1.0,finds the smallest element and places in 1st position then the process is repeated on the rest of the array,"['finds', 'smallest', 'element', 'places', '1st', 'position', 'process', 'repeated', 'rest', 'array']",find smallest element place 1st posit process repeat rest array,find smallest element place 1st position process repeated rest array
Selection sort is an algorithm that selects the larges item the array and puts it in its place; then select the next largest until the array is sorted,4.5,1.0,selection sort is an algorithm that selects the larges item the array and puts it in its place then select the next largest until the array is sorted,"['selection', 'sort', 'algorithm', 'selects', 'larges', 'item', 'array', 'puts', 'place', 'select', 'next', 'largest', 'array', 'sorted']",select sort algorithm select larg item array put place select next largest array sort,selection sort algorithm selects large item array put place select next largest array sorted
Select the smallest number in the list and move it to the front of the list and then advance to the next number.,5.0,1.0,select the smallest number in the list and move it to the front of the list and then advance to the next number,"['select', 'smallest', 'number', 'list', 'move', 'front', 'list', 'advance', 'next', 'number']",select smallest number list move front list advanc next number,select smallest number list move front list advance next number
the selection sort chooses the largest or smallest value in an unsorted list and creates a new list using the selection depending on how it is sorted.,4.5,1.0,the selection sort chooses the largest or smallest value in an unsorted list and creates a new list using the selection depending on how it is sorted,"['selection', 'sort', 'chooses', 'largest', 'smallest', 'value', 'unsorted', 'list', 'creates', 'new', 'list', 'using', 'selection', 'depending', 'sorted']",select sort choos largest smallest valu unsort list creat new list use select depend sort,selection sort chooses largest smallest value unsorted list creates new list using selection depending sorted
"Selection sort finds the smallest number left unsorted in an array, and puts it at the end of what it has sorted",4.5,1.0,selection sort finds the smallest number left unsorted in an array and puts it at the end of what it has sorted,"['selection', 'sort', 'finds', 'smallest', 'number', 'left', 'unsorted', 'array', 'puts', 'end', 'sorted']",select sort find smallest number left unsort array put end sort,selection sort find smallest number left unsorted array put end sorted
"selects the minimum from the remaining elements of the array, and palces the miminum in the current position and moves to the next position",5.0,1.0,selects the minimum from the remaining elements of the array and palces the miminum in the current position and moves to the next position,"['selects', 'minimum', 'remaining', 'elements', 'array', 'palces', 'miminum', 'current', 'position', 'moves', 'next', 'position']",select minimum remain element array palc miminum current posit move next posit,selects minimum remaining element array palces miminum current position move next position
"To put the biggest element at the end of the list and place the next highest element behind it, and so on.",3.5,0.0,to put the biggest element at the end of the list and place the next highest element behind it and so on,"['put', 'biggest', 'element', 'end', 'list', 'place', 'next', 'highest', 'element', 'behind']",put biggest element end list place next highest element behind,put biggest element end list place next highest element behind
"the sort finds the largest item and places it at the end, then then next largest is found and placed next to last, continue until there is only one number left, this is the beginning of the sorted array",4.5,1.0,the sort finds the largest item and places it at the end then then next largest is found and placed next to last continue until there is only one number left this is the beginning of the sorted array,"['sort', 'finds', 'largest', 'item', 'places', 'end', 'next', 'largest', 'found', 'placed', 'next', 'last', 'continue', 'one', 'number', 'left', 'beginning', 'sorted', 'array']",sort find largest item place end next largest found place next last continu one number left begin sort array,sort find largest item place end next largest found placed next last continue one number left beginning sorted array
"you loop through the entire list, and for each iteration you find the smallest element and move it to the current position.",5.0,1.0,you loop through the entire list and for each iteration you find the smallest element and move it to the current position,"['loop', 'entire', 'list', 'iteration', 'find', 'smallest', 'element', 'move', 'current', 'position']",loop entir list iter find smallest element move current posit,loop entire list iteration find smallest element move current position
Find the minimum value in the list swap it with the value in the first position; repeat the steps above for remainder of the liststarting in the second position.,5.0,1.0,find the minimum value in the list swap it with the value in the first position repeat the steps above for remainder of the liststarting in the second position,"['find', 'minimum', 'value', 'list', 'swap', 'value', 'first', 'position', 'repeat', 'steps', 'remainder', 'liststarting', 'second', 'position']",find minimum valu list swap valu first posit repeat step remaind liststart second posit,find minimum value list swap value first position repeat step remainder liststarting second position
"The run time for this sorting program is n to the power of 2. Best case is the list is already sorted, worst case is the list is sorted but in reverse.",3.5,0.0,the run time for this sorting program is n to the power of 2 best case is the list is already sorted worst case is the list is sorted but in reverse,"['run', 'time', 'sorting', 'program', 'n', 'power', '2', 'best', 'case', 'list', 'already', 'sorted', 'worst', 'case', 'list', 'sorted', 'reverse']",run time sort program n power 2 best case list alreadi sort worst case list sort revers,run time sorting program n power 2 best case list already sorted worst case list sorted reverse
"Insertion sort is Onand performs n minus 1 operations in the best-case scenario, which is when the list or array is already sorted.",4.5,1.0,insertion sort is onand performs n minus 1 operations in the best-case scenario which is when the list or array is already sorted,"['insertion', 'sort', 'onand', 'performs', 'n', 'minus', '1', 'operations', 'best-case', 'scenario', 'list', 'array', 'already', 'sorted']",insert sort onand perform n minu 1 oper best-cas scenario list array alreadi sort,insertion sort onand performs n minus 1 operation best-case scenario list array already sorted
"The number of operations for insertions sort, under best-case, is nn minus 1divided by 2. The best case for insertion sort is on a sorted list where it runs is On.",3.0,0.0,the number of operations for insertions sort under best-case is nn minus 1divided by 2 the best case for insertion sort is on a sorted list where it runs is on,"['number', 'operations', 'insertions', 'sort', 'best-case', 'nn', 'minus', '1divided', '2', 'best', 'case', 'insertion', 'sort', 'sorted', 'list', 'runs']",number oper insert sort best-cas nn minu 1divid 2 best case insert sort sort list run,number operation insertion sort best-case nn minus 1divided 2 best case insertion sort sorted list run
"Best case would be Onor n minus 1, because that is what it takes to scan the array and make one swap. The array would then be sorted and would take only 1 operation.",4.0,1.0,best case would be onor n minus 1 because that is what it takes to scan the array and make one swap the array would then be sorted and would take only 1 operation,"['best', 'case', 'would', 'onor', 'n', 'minus', '1', 'takes', 'scan', 'array', 'make', 'one', 'swap', 'array', 'would', 'sorted', 'would', 'take', '1', 'operation']",best case would onor n minu 1 take scan array make one swap array would sort would take 1 oper,best case would onor n minus 1 take scan array make one swap array would sorted would take 1 operation
Best case-1 Worst Case-N,2.0,0.0,best case-1 worst case-n,"['best', 'case-1', 'worst', 'case-n']",best case-1 worst case-n,best case-1 worst case-n
It will donoperations wherenis the number of elements in the array. Best case is when all the elements are already sorted.,5.0,1.0,it will donoperations wherenis the number of elements in the array best case is when all the elements are already sorted,"['donoperations', 'wherenis', 'number', 'elements', 'array', 'best', 'case', 'elements', 'already', 'sorted']",donoper whereni number element array best case element alreadi sort,donoperations wherenis number element array best case element already sorted
On,3.5,0.0,on,[],,
Best case is all elements sorted. n minus 1.,4.0,1.0,best case is all elements sorted n minus 1,"['best', 'case', 'elements', 'sorted', 'n', 'minus', '1']",best case element sort n minu 1,best case element sorted n minus 1
"The best case scenario for an insertion sort, where all the elements of the array have been already sorted, will cause the for loop to iterate x timesx being the number of elements in the arrayand the while loop to never have to iterate, resulting in the insertion sort to require x operations.",5.0,1.0,the best case scenario for an insertion sort where all the elements of the array have been already sorted will cause the for loop to iterate x timesx being the number of elements in the arrayand the while loop to never have to iterate resulting in the insertion sort to require x operations,"['best', 'case', 'scenario', 'insertion', 'sort', 'elements', 'array', 'already', 'sorted', 'cause', 'loop', 'iterate', 'x', 'timesx', 'number', 'elements', 'arrayand', 'loop', 'never', 'iterate', 'resulting', 'insertion', 'sort', 'require', 'x', 'operations']",best case scenario insert sort element array alreadi sort caus loop iter x timesx number element arrayand loop never iter result insert sort requir x oper,best case scenario insertion sort element array already sorted cause loop iterate x timesx number element arrayand loop never iterate resulting insertion sort require x operation
1 operation. the best case scenario s where it is already sorted and does one comparision.,3.0,0.0,1 operation the best case scenario s where it is already sorted and does one comparision,"['1', 'operation', 'best', 'case', 'scenario', 'already', 'sorted', 'one', 'comparision']",1 oper best case scenario alreadi sort one comparis,1 operation best case scenario already sorted one comparision
"n operations, where n is the number of items.",4.0,1.0,n operations where n is the number of items,"['n', 'operations', 'n', 'number', 'items']",n oper n number item,n operation n number item
n minus 1,3.5,0.0,n minus 1,"['n', 'minus', '1']",n minu 1,n minus 1
"On, the list is already sorted.",4.5,1.0,on the list is already sorted,"['list', 'already', 'sorted']",list alreadi sort,list already sorted
Insertion sort will take n minus 1 operations if the array is in reverse order.,4.0,1.0,insertion sort will take n minus 1 operations if the array is in reverse order,"['insertion', 'sort', 'take', 'n', 'minus', '1', 'operations', 'array', 'reverse', 'order']",insert sort take n minu 1 oper array revers order,insertion sort take n minus 1 operation array reverse order
"In the best case scenario of an already sorted list, insertion sort will progress once through the list. So the number of operations is directly proportional to the number of elements in the list. Also noted as Onin big o notation.",5.0,1.0,in the best case scenario of an already sorted list insertion sort will progress once through the list so the number of operations is directly proportional to the number of elements in the list also noted as onin big o notation,"['best', 'case', 'scenario', 'already', 'sorted', 'list', 'insertion', 'sort', 'progress', 'list', 'number', 'operations', 'directly', 'proportional', 'number', 'elements', 'list', 'also', 'noted', 'onin', 'big', 'notation']",best case scenario alreadi sort list insert sort progress list number oper directli proport number element list also note onin big notat,best case scenario already sorted list insertion sort progress list number operation directly proportional number element list also noted onin big notation
1 where there is a list of two ints and only one must be moved.,2.5,0.0,1 where there is a list of two ints and only one must be moved,"['1', 'list', 'two', 'ints', 'one', 'must', 'moved']",1 list two int one must move,1 list two ints one must moved
"Best case is N, while the worst case is N factorial.",3.0,0.0,best case is n while the worst case is n factorial,"['best', 'case', 'n', 'worst', 'case', 'n', 'factorial']",best case n worst case n factori,best case n worst case n factorial
n minus 1 The best case is when the array is already sorted.,4.5,1.0,n minus 1 the best case is when the array is already sorted,"['n', 'minus', '1', 'best', 'case', 'array', 'already', 'sorted']",n minu 1 best case array alreadi sort,n minus 1 best case array already sorted
worst case its equals Ontime best case its equals On to the power of 2time,3.0,0.0,worst case its equals ontime best case its equals on to the power of 2time,"['worst', 'case', 'equals', 'ontime', 'best', 'case', 'equals', 'power', '2time']",worst case equal ontim best case equal power 2time,worst case equal ontime best case equal power 2time
On,3.5,0.0,on,[],,
N number of times. Where N equals the number of elements in the list. Best-case scenario is that the elements in the list are already sorted.,5.0,1.0,n number of times where n equals the number of elements in the list best-case scenario is that the elements in the list are already sorted,"['n', 'number', 'times', 'n', 'equals', 'number', 'elements', 'list', 'best-case', 'scenario', 'elements', 'list', 'already', 'sorted']",n number time n equal number element list best-cas scenario element list alreadi sort,n number time n equal number element list best-case scenario element list already sorted
the best case scenario for insertion sort is a list that is already sorted. the number of operations would be the same as the number of elements,5.0,1.0,the best case scenario for insertion sort is a list that is already sorted the number of operations would be the same as the number of elements,"['best', 'case', 'scenario', 'insertion', 'sort', 'list', 'already', 'sorted', 'number', 'operations', 'would', 'number', 'elements']",best case scenario insert sort list alreadi sort number oper would number element,best case scenario insertion sort list already sorted number operation would number element
"insertion sort will make zero operationsand length 1 comparisonsin the best case scenario, that is, when the array its given is already in order.",3.5,0.0,insertion sort will make zero operationsand length 1 comparisonsin the best case scenario that is when the array its given is already in order,"['insertion', 'sort', 'make', 'zero', 'operationsand', 'length', '1', 'comparisonsin', 'best', 'case', 'scenario', 'array', 'given', 'already', 'order']",insert sort make zero operationsand length 1 comparisonsin best case scenario array given alreadi order,insertion sort make zero operationsand length 1 comparisonsin best case scenario array given already order
thetanthe best case senario is that everything is already sorted,4.5,1.0,thetanthe best case senario is that everything is already sorted,"['thetanthe', 'best', 'case', 'senario', 'everything', 'already', 'sorted']",thetanth best case senario everyth alreadi sort,thetanthe best case senario everything already sorted
n operations The best case scenario is when all the numbers are in increasing order.,5.0,1.0,n operations the best case scenario is when all the numbers are in increasing order,"['n', 'operations', 'best', 'case', 'scenario', 'numbers', 'increasing', 'order']",n oper best case scenario number increas order,n operation best case scenario number increasing order
"it could be considered that having only one item would be the easiest to sort, but this could also be a trivial result as nothing is moved having two items allows the algorithm to sort the items into the correct order",2.5,0.0,it could be considered that having only one item would be the easiest to sort but this could also be a trivial result as nothing is moved having two items allows the algorithm to sort the items into the correct order,"['could', 'considered', 'one', 'item', 'would', 'easiest', 'sort', 'could', 'also', 'trivial', 'result', 'nothing', 'moved', 'two', 'items', 'allows', 'algorithm', 'sort', 'items', 'correct', 'order']",could consid one item would easiest sort could also trivial result noth move two item allow algorithm sort item correct order,could considered one item would easiest sort could also trivial result nothing moved two item allows algorithm sort item correct order
the best case is if it only has to look through the list once. The best case scenario is when it goes through the list and does not have to make any changesthe list is already sorted,4.0,1.0,the best case is if it only has to look through the list once the best case scenario is when it goes through the list and does not have to make any changesthe list is already sorted,"['best', 'case', 'look', 'list', 'best', 'case', 'scenario', 'goes', 'list', 'make', 'changesthe', 'list', 'already', 'sorted']",best case look list best case scenario goe list make changesth list alreadi sort,best case look list best case scenario go list make changesthe list already sorted
very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over. best case is01,2.5,0.0,very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over best case is01,"['simplistic', 'moves', 'one', 'element', 'list', 'one', 'inserting', 'correct', 'position', 'new', 'slot', 'starting', 'best', 'case', 'is01']",simplist move one element list one insert correct posit new slot start best case is01,simplistic move one element list one inserting correct position new slot starting best case is01
"The base case for a recursive merge sort is one number. One number by itself is a sorted list, regardless of what number it is.",5.0,1.0,the base case for a recursive merge sort is one number one number by itself is a sorted list regardless of what number it is,"['base', 'case', 'recursive', 'merge', 'sort', 'one', 'number', 'one', 'number', 'sorted', 'list', 'regardless', 'number']",base case recurs merg sort one number one number sort list regardless number,base case recursive merge sort one number one number sorted list regardless number
The base case for a recursive implementation of merge sort is when the sequence being passed to merge sort has less than 2 elements.,5.0,1.0,the base case for a recursive implementation of merge sort is when the sequence being passed to merge sort has less than 2 elements,"['base', 'case', 'recursive', 'implementation', 'merge', 'sort', 'sequence', 'passed', 'merge', 'sort', 'less', '2', 'elements']",base case recurs implement merg sort sequenc pass merg sort less 2 element,base case recursive implementation merge sort sequence passed merge sort le 2 element
The base case for a recursive implementation of merge sort is one.,5.0,1.0,the base case for a recursive implementation of merge sort is one,"['base', 'case', 'recursive', 'implementation', 'merge', 'sort', 'one']",base case recurs implement merg sort one,base case recursive implementation merge sort one
The best case is the same as the worst case On log nfor a recursive merge sort.,2.0,0.0,the best case is the same as the worst case on log nfor a recursive merge sort,"['best', 'case', 'worst', 'case', 'log', 'nfor', 'recursive', 'merge', 'sort']",best case worst case log nfor recurs merg sort,best case worst case log nfor recursive merge sort
there is one object in the split array to sort.,5.0,1.0,there is one object in the split array to sort,"['one', 'object', 'split', 'array', 'sort']",one object split array sort,one object split array sort
The base case is when the length of the current array is 1.,5.0,1.0,the base case is when the length of the current array is 1,"['base', 'case', 'length', 'current', 'array', '1']",base case length current array 1,base case length current array 1
Onlogn,2.5,0.0,onlogn,['onlogn'],onlogn,onlogn
Best case is one element. One element is sorted.,5.0,1.0,best case is one element one element is sorted,"['best', 'case', 'one', 'element', 'one', 'element', 'sorted']",best case one element one element sort,best case one element one element sorted
If the array being sorted has 0 or 1 elements,4.5,1.0,if the array being sorted has 0 or 1 elements,"['array', 'sorted', '0', '1', 'elements']",array sort 0 1 element,array sorted 0 1 element
"Tnequals 0, if n is less than 2.",4.0,1.0,tnequals 0 if n is less than 2,"['tnequals', '0', 'n', 'less', '2']",tnequal 0 n less 2,tnequals 0 n le 2
"A list size of 1, where it is already sorted.",5.0,1.0,a list size of 1 where it is already sorted,"['list', 'size', '1', 'already', 'sorted']",list size 1 alreadi sort,list size 1 already sorted
Single element in the array,5.0,1.0,single element in the array,"['single', 'element', 'array']",singl element array,single element array
Onlogn,2.0,0.0,onlogn,['onlogn'],onlogn,onlogn
n multiplied by logn,2.0,0.0,n multiplied by logn,"['n', 'multiplied', 'logn']",n multipli logn,n multiplied logn
A list or array of only 1 element.,5.0,1.0,a list or array of only 1 element,"['list', 'array', '1', 'element']",list array 1 element,list array 1 element
where you only must merge sort once,3.5,0.0,where you only must merge sort once,"['must', 'merge', 'sort']",must merg sort,must merge sort
A single Element on the Array.,5.0,1.0,a single element on the array,"['single', 'element', 'array']",singl element array,single element array
There is only one element in the subarray.,5.0,1.0,there is only one element in the subarray,"['one', 'element', 'subarray']",one element subarray,one element subarray
"if the array length is less than or equal to 1, then that array is returned to the other array and merged together",4.5,1.0,if the array length is less than or equal to 1 then that array is returned to the other array and merged together,"['array', 'length', 'less', 'equal', '1', 'array', 'returned', 'array', 'merged', 'together']",array length less equal 1 array return array merg togeth,array length le equal 1 array returned array merged together
"ifright is greater than leftmid equalsright plus leftdivided by 2; m sortnumbers, temp, left, mid; m sortnumbers, temp, mid plus 1, right; mergenumbers, temp, left, mid plus 1, right;",2.0,0.0,ifright is greater than leftmid equalsright plus leftdivided by 2 m sortnumbers temp left mid m sortnumbers temp mid plus 1 right mergenumbers temp left mid plus 1 right,"['ifright', 'greater', 'leftmid', 'equalsright', 'plus', 'leftdivided', '2', 'sortnumbers', 'temp', 'left', 'mid', 'sortnumbers', 'temp', 'mid', 'plus', '1', 'right', 'mergenumbers', 'temp', 'left', 'mid', 'plus', '1', 'right']",ifright greater leftmid equalsright plu leftdivid 2 sortnumb temp left mid sortnumb temp mid plu 1 right mergenumb temp left mid plu 1 right,ifright greater leftmid equalsright plus leftdivided 2 sortnumbers temp left mid sortnumbers temp mid plus 1 right mergenumbers temp left mid plus 1 right
The sequence of numbers has zero or one elements.,5.0,1.0,the sequence of numbers has zero or one elements,"['sequence', 'numbers', 'zero', 'one', 'elements']",sequenc number zero one element,sequence number zero one element
one element in an array,5.0,1.0,one element in an array,"['one', 'element', 'array']",one element array,one element array
array of length 1,5.0,1.0,array of length 1,"['array', 'length', '1']",array length 1,array length 1
the array has one element,5.0,1.0,the array has one element,"['array', 'one', 'element']",array one element,array one element
"When there is only one element in the array, or when the starting element in the array is the same as the ending element.",4.5,1.0,when there is only one element in the array or when the starting element in the array is the same as the ending element,"['one', 'element', 'array', 'starting', 'element', 'array', 'ending', 'element']",one element array start element array end element,one element array starting element array ending element
"when each half or the original array has nothing else to sort, and puts the halfs back together",2.5,0.0,when each half or the original array has nothing else to sort and puts the halfs back together,"['half', 'original', 'array', 'nothing', 'else', 'sort', 'puts', 'halfs', 'back', 'together']",half origin array noth els sort put half back togeth,half original array nothing else sort put half back together
the size of the list being sent is is less than or equal to 1,4.5,1.0,the size of the list being sent is is less than or equal to 1,"['size', 'list', 'sent', 'less', 'equal', '1']",size list sent less equal 1,size list sent le equal 1
On log n,2.0,0.0,on log n,"['log', 'n']",log n,log n
Its a location in memory that contains the memory address of another location in memory that contains information.,5.0,1.0,its a location in memory that contains the memory address of another location in memory that contains information,"['location', 'memory', 'contains', 'memory', 'address', 'another', 'location', 'memory', 'contains', 'information']",locat memori contain memori address anoth locat memori contain inform,location memory contains memory address another location memory contains information
A pointer is a variable that contains a memory address as its value.,5.0,1.0,a pointer is a variable that contains a memory address as its value,"['pointer', 'variable', 'contains', 'memory', 'address', 'value']",pointer variabl contain memori address valu,pointer variable contains memory address value
A pointer is a variable which stores the address of another variable.,5.0,1.0,a pointer is a variable which stores the address of another variable,"['pointer', 'variable', 'stores', 'address', 'another', 'variable']",pointer variabl store address anoth variabl,pointer variable store address another variable
Pointers are variables that contain as their values memory addresses of other variables.,5.0,1.0,pointers are variables that contain as their values memory addresses of other variables,"['pointers', 'variables', 'contain', 'values', 'memory', 'addresses', 'variables']",pointer variabl contain valu memori address variabl,pointer variable contain value memory address variable
A data type whose value refers to another value stored elsewhere in the computer memory using its address.,4.5,1.0,a data type whose value refers to another value stored elsewhere in the computer memory using its address,"['data', 'type', 'whose', 'value', 'refers', 'another', 'value', 'stored', 'elsewhere', 'computer', 'memory', 'using', 'address']",data type whose valu refer anoth valu store elsewher comput memori use address,data type whose value refers another value stored elsewhere computer memory using address
a pointer holds a memory location,4.5,1.0,a pointer holds a memory location,"['pointer', 'holds', 'memory', 'location']",pointer hold memori locat,pointer hold memory location
a name that represents actual location or value of a data type. int star of bPtr points to an integer value.,4.5,1.0,a name that represents actual location or value of a data type int star of bptr points to an integer value,"['name', 'represents', 'actual', 'location', 'value', 'data', 'type', 'int', 'star', 'bptr', 'points', 'integer', 'value']",name repres actual locat valu data type int star bptr point integ valu,name represents actual location value data type int star bptr point integer value
A variable that stores the address of another variable,5.0,1.0,a variable that stores the address of another variable,"['variable', 'stores', 'address', 'another', 'variable']",variabl store address anoth variabl,variable store address another variable
a pointer is a programming language data type whose value refers directly toor points toanother value stored elsewhere in the computer memory using its address,5.0,1.0,a pointer is a programming language data type whose value refers directly toor points toanother value stored elsewhere in the computer memory using its address,"['pointer', 'programming', 'language', 'data', 'type', 'whose', 'value', 'refers', 'directly', 'toor', 'points', 'toanother', 'value', 'stored', 'elsewhere', 'computer', 'memory', 'using', 'address']",pointer program languag data type whose valu refer directli toor point toanoth valu store elsewher comput memori use address,pointer programming language data type whose value refers directly toor point toanother value stored elsewhere computer memory using address
A data type whose value refers to another value stored somewhere else in the computer memory using its address.,5.0,1.0,a data type whose value refers to another value stored somewhere else in the computer memory using its address,"['data', 'type', 'whose', 'value', 'refers', 'another', 'value', 'stored', 'somewhere', 'else', 'computer', 'memory', 'using', 'address']",data type whose valu refer anoth valu store somewher els comput memori use address,data type whose value refers another value stored somewhere else computer memory using address
"It is like a variable however instead of holding data, it holds a location in memory.",4.5,1.0,it is like a variable however instead of holding data it holds a location in memory,"['like', 'variable', 'however', 'instead', 'holding', 'data', 'holds', 'location', 'memory']",like variabl howev instead hold data hold locat memori,like variable however instead holding data hold location memory
A pointer is a reference to a location in memory,5.0,1.0,a pointer is a reference to a location in memory,"['pointer', 'reference', 'location', 'memory']",pointer refer locat memori,pointer reference location memory
A pointer is a reference to the memory location of an object.,4.5,1.0,a pointer is a reference to the memory location of an object,"['pointer', 'reference', 'memory', 'location', 'object']",pointer refer memori locat object,pointer reference memory location object
A pointer is a variable that contains the memory address of a variable that has a value.,5.0,1.0,a pointer is a variable that contains the memory address of a variable that has a value,"['pointer', 'variable', 'contains', 'memory', 'address', 'variable', 'value']",pointer variabl contain memori address variabl valu,pointer variable contains memory address variable value
"It is a variable that contains not only a star of value but has a memory address associated with it, and can be moved along a string or an array by jumping up one memory address.",3.5,0.0,it is a variable that contains not only a star of value but has a memory address associated with it and can be moved along a string or an array by jumping up one memory address,"['variable', 'contains', 'star', 'value', 'memory', 'address', 'associated', 'moved', 'along', 'string', 'array', 'jumping', 'one', 'memory', 'address']",variabl contain star valu memori address associ move along string array jump one memori address,variable contains star value memory address associated moved along string array jumping one memory address
Contains a variable 's memory address as a value.,5.0,1.0,contains a variable s memory address as a value,"['contains', 'variable', 'memory', 'address', 'value']",contain variabl memori address valu,contains variable memory address value
variable that points to the memory address of another variable and it is type specific.,5.0,1.0,variable that points to the memory address of another variable and it is type specific,"['variable', 'points', 'memory', 'address', 'another', 'variable', 'type', 'specific']",variabl point memori address anoth variabl type specif,variable point memory address another variable type specific
An element that references a memory cell,5.0,1.0,an element that references a memory cell,"['element', 'references', 'memory', 'cell']",element refer memori cell,element reference memory cell
Is a reference call to the place in memory where the object is stored.,4.0,1.0,is a reference call to the place in memory where the object is stored,"['reference', 'call', 'place', 'memory', 'object', 'stored']",refer call place memori object store,reference call place memory object stored
a variable that contains the address of another variable,5.0,1.0,a variable that contains the address of another variable,"['variable', 'contains', 'address', 'another', 'variable']",variabl contain address anoth variabl,variable contains address another variable
"A pointer variable contains the number of a memory address as its value, which may be null or 0, or the address of some value stored in memory.",5.0,1.0,a pointer variable contains the number of a memory address as its value which may be null or 0 or the address of some value stored in memory,"['pointer', 'variable', 'contains', 'number', 'memory', 'address', 'value', 'may', 'null', '0', 'address', 'value', 'stored', 'memory']",pointer variabl contain number memori address valu may null 0 address valu store memori,pointer variable contains number memory address value may null 0 address value stored memory
A pointer is a variable that contains a memory address of anther variable,5.0,1.0,a pointer is a variable that contains a memory address of anther variable,"['pointer', 'variable', 'contains', 'memory', 'address', 'anther', 'variable']",pointer variabl contain memori address anther variabl,pointer variable contains memory address anther variable
A variable that contains the memory address of another variable that contains a specific value.,5.0,1.0,a variable that contains the memory address of another variable that contains a specific value,"['variable', 'contains', 'memory', 'address', 'another', 'variable', 'contains', 'specific', 'value']",variabl contain memori address anoth variabl contain specif valu,variable contains memory address another variable contains specific value
a variable with a memory address as the value,4.5,1.0,a variable with a memory address as the value,"['variable', 'memory', 'address', 'value']",variabl memori address valu,variable memory address value
it is a type that points to something else. It is the memory address of something else,4.5,1.0,it is a type that points to something else it is the memory address of something else,"['type', 'points', 'something', 'else', 'memory', 'address', 'something', 'else']",type point someth els memori address someth els,type point something else memory address something else
A pointer is a way to get at another object. Essentially it is a way to grab an instance of an object and then either pass that instance a message or retreive some data from that object. A pointer is actually just an address of where an instance is held in memory.,4.5,1.0,a pointer is a way to get at another object essentially it is a way to grab an instance of an object and then either pass that instance a message or retreive some data from that object a pointer is actually just an address of where an instance is held in memory,"['pointer', 'way', 'get', 'another', 'object', 'essentially', 'way', 'grab', 'instance', 'object', 'either', 'pass', 'instance', 'message', 'retreive', 'data', 'object', 'pointer', 'actually', 'address', 'instance', 'held', 'memory']",pointer way get anoth object essenti way grab instanc object either pass instanc messag retreiv data object pointer actual address instanc held memori,pointer way get another object essentially way grab instance object either pas instance message retreive data object pointer actually address instance held memory
This operator returns the memory address of its operand.,5.0,1.0,this operator returns the memory address of its operand,"['operator', 'returns', 'memory', 'address', 'operand']",oper return memori address operand,operator return memory address operand
The address operator returns the memory address of its operand.,5.0,1.0,the address operator returns the memory address of its operand,"['address', 'operator', 'returns', 'memory', 'address', 'operand']",address oper return memori address operand,address operator return memory address operand
Returns memory address of its operand.,5.0,1.0,returns memory address of its operand,"['returns', 'memory', 'address', 'operand']",return memori address operand,return memory address operand
The addressADDRESSoperator returns the memory address of its operand.,5.0,1.0,the addressaddressoperator returns the memory address of its operand,"['addressaddressoperator', 'returns', 'memory', 'address', 'operand']",addressaddressoper return memori address operand,addressaddressoperator return memory address operand
Returns the memory address of its operand.,5.0,1.0,returns the memory address of its operand,"['returns', 'memory', 'address', 'operand']",return memori address operand,return memory address operand
returns the place in memory of that element,4.0,1.0,returns the place in memory of that element,"['returns', 'place', 'memory', 'element']",return place memori element,return place memory element
The address of the where the data is stored: address of b will return the address of b.,4.5,1.0,the address of the where the data is stored address of b will return the address of b,"['address', 'data', 'stored', 'address', 'b', 'return', 'address', 'b']",address data store address b return address b,address data stored address b return address b
The ADDRESS operator returns the address of a variable,5.0,1.0,the address operator returns the address of a variable,"['address', 'operator', 'returns', 'address', 'variable']",address oper return address variabl,address operator return address variable
"the ampersandADDRESSmeans pass by reference. When the function is called, a pointer to the variable, instead of the variable itself, will be passed into the function.",3.0,0.0,the ampersandaddressmeans pass by reference when the function is called a pointer to the variable instead of the variable itself will be passed into the function,"['ampersandaddressmeans', 'pass', 'reference', 'function', 'called', 'pointer', 'variable', 'instead', 'variable', 'passed', 'function']",ampersandaddressmean pass refer function call pointer variabl instead variabl pass function,ampersandaddressmeans pas reference function called pointer variable instead variable passed function
ADDRESS returns the memory address of its operand.,5.0,1.0,address returns the memory address of its operand,"['address', 'returns', 'memory', 'address', 'operand']",address return memori address operand,address return memory address operand
the address of the variable in memory,5.0,1.0,the address of the variable in memory,"['address', 'variable', 'memory']",address variabl memori,address variable memory
Returns the address location in memory of the item.,4.5,1.0,returns the address location in memory of the item,"['returns', 'address', 'location', 'memory', 'item']",return address locat memori item,return address location memory item
The address operator returns the memory address of its operand.,5.0,1.0,the address operator returns the memory address of its operand,"['address', 'operator', 'returns', 'memory', 'address', 'operand']",address oper return memori address operand,address operator return memory address operand
The ADDRESS operator returns the memory address of the variable it precedes.,5.0,1.0,the address operator returns the memory address of the variable it precedes,"['address', 'operator', 'returns', 'memory', 'address', 'variable', 'precedes']",address oper return memori address variabl preced,address operator return memory address variable precedes
"The memory address of operand, 0x 000000 or something along those lines.",4.5,1.0,the memory address of operand 0x 000000 or something along those lines,"['memory', 'address', 'operand', '0x', '000000', 'something', 'along', 'lines']",memori address operand 0x 000000 someth along line,memory address operand 0x 000000 something along line
The object 's memory address.,4.5,1.0,the object s memory address,"['object', 'memory', 'address']",object memori address,object memory address
the reference to a variable,4.5,1.0,the reference to a variable,"['reference', 'variable']",refer variabl,reference variable
returns the memory address of its operand,5.0,1.0,returns the memory address of its operand,"['returns', 'memory', 'address', 'operand']",return memori address operand,return memory address operand
memory address of its operand,5.0,1.0,memory address of its operand,"['memory', 'address', 'operand']",memori address operand,memory address operand
returns the address number of the specified variable,4.5,1.0,returns the address number of the specified variable,"['returns', 'address', 'number', 'specified', 'variable']",return address number specifi variabl,return address number specified variable
"It returns the memory address of it is operand. That is, if applied to a normal variable, it gives the variable 's memory address, just as a pointer variable might.",4.5,1.0,it returns the memory address of it is operand that is if applied to a normal variable it gives the variable s memory address just as a pointer variable might,"['returns', 'memory', 'address', 'operand', 'applied', 'normal', 'variable', 'gives', 'variable', 'memory', 'address', 'pointer', 'variable', 'might']",return memori address operand appli normal variabl give variabl memori address pointer variabl might,return memory address operand applied normal variable give variable memory address pointer variable might
The ADDRESS is a unary operator that returns the memory address of its operand,5.0,1.0,the address is a unary operator that returns the memory address of its operand,"['address', 'unary', 'operator', 'returns', 'memory', 'address', 'operand']",address unari oper return memori address operand,address unary operator return memory address operand
the address of the variable it is attached to,4.0,1.0,the address of the variable it is attached to,"['address', 'variable', 'attached']",address variabl attach,address variable attached
the memory address of its operand,5.0,1.0,the memory address of its operand,"['memory', 'address', 'operand']",memori address operand,memory address operand
returns the address of what it is put in front of,4.5,1.0,returns the address of what it is put in front of,"['returns', 'address', 'put', 'front']",return address put front,return address put front
returns a pointer,3.5,0.0,returns a pointer,"['returns', 'pointer']",return pointer,return pointer
returns a synonym for the object to which its pointer operand points.,5.0,1.0,returns a synonym for the object to which its pointer operand points,"['returns', 'synonym', 'object', 'pointer', 'operand', 'points']",return synonym object pointer operand point,return synonym object pointer operand point
The star operator returns a synonym for the object to which its pointer operand points.,5.0,1.0,the star operator returns a synonym for the object to which its pointer operand points,"['star', 'operator', 'returns', 'synonym', 'object', 'pointer', 'operand', 'points']",star oper return synonym object pointer operand point,star operator return synonym object pointer operand point
Returns synonym for the object its operand points to.,5.0,1.0,returns synonym for the object its operand points to,"['returns', 'synonym', 'object', 'operand', 'points']",return synonym object operand point,return synonym object operand point
"It returns a synonym, alias or nickname of the name of the object that its operand points to in memorydereferencing the pointer.",5.0,1.0,it returns a synonym alias or nickname of the name of the object that its operand points to in memorydereferencing the pointer,"['returns', 'synonym', 'alias', 'nickname', 'name', 'object', 'operand', 'points', 'memorydereferencing', 'pointer']",return synonym alia nicknam name object operand point memorydereferenc pointer,return synonym alias nickname name object operand point memorydereferencing pointer
Returns an alias or nickname for the object to which the pointer operand points.,5.0,1.0,returns an alias or nickname for the object to which the pointer operand points,"['returns', 'alias', 'nickname', 'object', 'pointer', 'operand', 'points']",return alia nicknam object pointer operand point,return alias nickname object pointer operand point
the STAR operator returns the value in the memory address the element points to.,4.0,1.0,the star operator returns the value in the memory address the element points to,"['star', 'operator', 'returns', 'value', 'memory', 'address', 'element', 'points']",star oper return valu memori address element point,star operator return value memory address element point
The STAR returns the value,4.0,1.0,the star returns the value,"['star', 'returns', 'value']",star return valu,star return value
The STAR operator returns the dereferenced pointer variableie: it returns the value of whatever variable the pointer is pointing to,5.0,1.0,the star operator returns the dereferenced pointer variableie it returns the value of whatever variable the pointer is pointing to,"['star', 'operator', 'returns', 'dereferenced', 'pointer', 'variableie', 'returns', 'value', 'whatever', 'variable', 'pointer', 'pointing']",star oper return dereferenc pointer variablei return valu whatev variabl pointer point,star operator return dereferenced pointer variableie return value whatever variable pointer pointing
The dereferencing operator returns the dereferenced object.,4.5,1.0,the dereferencing operator returns the dereferenced object,"['dereferencing', 'operator', 'returns', 'dereferenced', 'object']",dereferenc oper return dereferenc object,dereferencing operator return dereferenced object
multiplied by returns the synonym for the object its operand points to.,5.0,1.0,multiplied by returns the synonym for the object its operand points to,"['multiplied', 'returns', 'synonym', 'object', 'operand', 'points']",multipli return synonym object operand point,multiplied return synonym object operand point
it returns the information in the address the pointer points to.,4.0,1.0,it returns the information in the address the pointer points to,"['returns', 'information', 'address', 'pointer', 'points']",return inform address pointer point,return information address pointer point
the star operator returns the value at the memory address the pointer is pointing at.,4.5,1.0,the star operator returns the value at the memory address the pointer is pointing at,"['star', 'operator', 'returns', 'value', 'memory', 'address', 'pointer', 'pointing']",star oper return valu memori address pointer point,star operator return value memory address pointer pointing
The star operator returns the object at that memory location.,4.0,1.0,the star operator returns the object at that memory location,"['star', 'operator', 'returns', 'object', 'memory', 'location']",star oper return object memori locat,star operator return object memory location
The STAR operator returns the value of the object 's memory address it precedes.,3.5,0.0,the star operator returns the value of the object s memory address it precedes,"['star', 'operator', 'returns', 'value', 'object', 'memory', 'address', 'precedes']",star oper return valu object memori address preced,star operator return value object memory address precedes
The value of the object that the operand points to,4.5,1.0,the value of the object that the operand points to,"['value', 'object', 'operand', 'points']",valu object operand point,value object operand point
The value stored in the object being pointed to.,4.0,1.0,the value stored in the object being pointed to,"['value', 'stored', 'object', 'pointed']",valu store object point,value stored object pointed
the value of the variable the pointer points to.,4.0,1.0,the value of the variable the pointer points to,"['value', 'variable', 'pointer', 'points']",valu variabl pointer point,value variable pointer point
returns synonym for the object its operand points to,5.0,1.0,returns synonym for the object its operand points to,"['returns', 'synonym', 'object', 'operand', 'points']",return synonym object operand point,return synonym object operand point
synonym for the object its operand points to,5.0,1.0,synonym for the object its operand points to,"['synonym', 'object', 'operand', 'points']",synonym object operand point,synonym object operand point
Returns synonym for the object its operand points to,5.0,1.0,returns synonym for the object its operand points to,"['returns', 'synonym', 'object', 'operand', 'points']",return synonym object operand point,return synonym object operand point
"It dereferences a pointer, meaning it returns the value stored in the memory address a pointer refers to.",4.5,1.0,it dereferences a pointer meaning it returns the value stored in the memory address a pointer refers to,"['dereferences', 'pointer', 'meaning', 'returns', 'value', 'stored', 'memory', 'address', 'pointer', 'refers']",derefer pointer mean return valu store memori address pointer refer,dereferences pointer meaning return value stored memory address pointer refers
It is unary operator that returns the value of the variable located at the address,4.0,1.0,it is unary operator that returns the value of the variable located at the address,"['unary', 'operator', 'returns', 'value', 'variable', 'located', 'address']",unari oper return valu variabl locat address,unary operator return value variable located address
a reference to a equals variable,2.0,0.0,a reference to a equals variable,"['reference', 'equals', 'variable']",refer equal variabl,reference equal variable
a synonym for the object to which its pointer operand points,5.0,1.0,a synonym for the object to which its pointer operand points,"['synonym', 'object', 'pointer', 'operand', 'points']",synonym object pointer operand point,synonym object pointer operand point
it returns the actual data at the address pointed to,3.5,0.0,it returns the actual data at the address pointed to,"['returns', 'actual', 'data', 'address', 'pointed']",return actual data address point,return actual data address pointed
will return zero or many characters placed before the operator,2.0,0.0,will return zero or many characters placed before the operator,"['return', 'zero', 'many', 'characters', 'placed', 'operator']",return zero mani charact place oper,return zero many character placed operator
The array itself can be signed to a pointer or each element of the array can be assigned to a pointer.,3.0,0.0,the array itself can be signed to a pointer or each element of the array can be assigned to a pointer,"['array', 'signed', 'pointer', 'element', 'array', 'assigned', 'pointer']",array sign pointer element array assign pointer,array signed pointer element array assigned pointer
An array can be addressed in pointer or offset notation by setting a pointer variable equal to the variable name of the array. Elements of the array can then be accessed by adding an offset value to the pointer variable.,4.5,1.0,an array can be addressed in pointer or offset notation by setting a pointer variable equal to the variable name of the array elements of the array can then be accessed by adding an offset value to the pointer variable,"['array', 'addressed', 'pointer', 'offset', 'notation', 'setting', 'pointer', 'variable', 'equal', 'variable', 'name', 'array', 'elements', 'array', 'accessed', 'adding', 'offset', 'value', 'pointer', 'variable']",array address pointer offset notat set pointer variabl equal variabl name array element array access ad offset valu pointer variabl,array addressed pointer offset notation setting pointer variable equal variable name array element array accessed adding offset value pointer variable
Element b [n] can be accessed by multiplied bybPtr plus n.,4.0,1.0,element b n can be accessed by multiplied bybptr plus n,"['element', 'b', 'n', 'accessed', 'multiplied', 'bybptr', 'plus', 'n']",element b n access multipli bybptr plu n,element b n accessed multiplied bybptr plus n
Using either the name of the array as a pointer or using a separate pointer that points to the array.,3.0,0.0,using either the name of the array as a pointer or using a separate pointer that points to the array,"['using', 'either', 'name', 'array', 'pointer', 'using', 'separate', 'pointer', 'points', 'array']",use either name array pointer use separ pointer point array,using either name array pointer using separate pointer point array
An element b [3] can be referenced by using multiplied bybPtr plus 3instead.,4.0,1.0,an element b 3 can be referenced by using multiplied bybptr plus 3instead,"['element', 'b', '3', 'referenced', 'using', 'multiplied', 'bybptr', 'plus', '3instead']",element b 3 referenc use multipli bybptr plu 3instead,element b 3 referenced using multiplied bybptr plus 3instead
you get the memory location of the first element and the you add an offset to it to get other elements.,5.0,1.0,you get the memory location of the first element and the you add an offset to it to get other elements,"['get', 'memory', 'location', 'first', 'element', 'add', 'offset', 'get', 'elements']",get memori locat first element add offset get element,get memory location first element add offset get element
yes multiplied byarray plus offset,4.0,1.0,yes multiplied byarray plus offset,"['yes', 'multiplied', 'byarray', 'plus', 'offset']",ye multipli byarray plu offset,yes multiplied byarray plus offset
"The name of an array is considered to be a pointer in C plus plus, and can be passed as such in functions parameters. Declaring int a [10]; creates a pointer a which stores the address of a [0].",3.5,0.0,the name of an array is considered to be a pointer in c plus plus and can be passed as such in functions parameters declaring int a 10 creates a pointer a which stores the address of a 0,"['name', 'array', 'considered', 'pointer', 'c', 'plus', 'plus', 'passed', 'functions', 'parameters', 'declaring', 'int', '10', 'creates', 'pointer', 'stores', 'address', '0']",name array consid pointer c plu plu pass function paramet declar int 10 creat pointer store address 0,name array considered pointer c plus plus passed function parameter declaring int 10 creates pointer store address 0
Element b [n] can be accessed by multiplied bybPtr plus nis an example of how an array can be addressed as pointer or offset notation.,4.5,1.0,element b n can be accessed by multiplied bybptr plus nis an example of how an array can be addressed as pointer or offset notation,"['element', 'b', 'n', 'accessed', 'multiplied', 'bybptr', 'plus', 'nis', 'example', 'array', 'addressed', 'pointer', 'offset', 'notation']",element b n access multipli bybptr plu ni exampl array address pointer offset notat,element b n accessed multiplied bybptr plus ni example array addressed pointer offset notation
multiplied byarray plus element,4.0,1.0,multiplied byarray plus element,"['multiplied', 'byarray', 'plus', 'element']",multipli byarray plu element,multiplied byarray plus element
multiplied by f [3],2.5,0.0,multiplied by f 3,"['multiplied', 'f', '3']",multipli f 3,multiplied f 3
you can have a pointer to the front of the array and add to the memory locationor offset from the initial value.,5.0,1.0,you can have a pointer to the front of the array and add to the memory locationor offset from the initial value,"['pointer', 'front', 'array', 'add', 'memory', 'locationor', 'offset', 'initial', 'value']",pointer front array add memori locationor offset initi valu,pointer front array add memory locationor offset initial value
"The pointer to the array will initially point to the first element of that array. When the pointer is incremented, it will point to the next element, and so on.",3.5,0.0,the pointer to the array will initially point to the first element of that array when the pointer is incremented it will point to the next element and so on,"['pointer', 'array', 'initially', 'point', 'first', 'element', 'array', 'pointer', 'incremented', 'point', 'next', 'element']",pointer array initi point first element array pointer increment point next element,pointer array initially point first element array pointer incremented point next element
With int x [10]; int star of xPtr; xPtr equals x; Address address of x [1] is the same as xPtr plus 1.,4.0,1.0,with int x 10 int star of xptr xptr equals x address address of x 1 is the same as xptr plus 1,"['int', 'x', '10', 'int', 'star', 'xptr', 'xptr', 'equals', 'x', 'address', 'address', 'x', '1', 'xptr', 'plus', '1']",int x 10 int star xptr xptr equal x address address x 1 xptr plu 1,int x 10 int star xptr xptr equal x address address x 1 xptr plus 1
Takes the number of array elements and points to each at a time,2.0,0.0,takes the number of array elements and points to each at a time,"['takes', 'number', 'array', 'elements', 'points', 'time']",take number array element point time,take number array element point time
The array can act as a pointer or be referenced by a pointer. multiplied byarrayPtr plus 3or multiplied byarray plus 3,4.0,1.0,the array can act as a pointer or be referenced by a pointer multiplied byarrayptr plus 3or multiplied byarray plus 3,"['array', 'act', 'pointer', 'referenced', 'pointer', 'multiplied', 'byarrayptr', 'plus', '3or', 'multiplied', 'byarray', 'plus', '3']",array act pointer referenc pointer multipli byarrayptr plu 3or multipli byarray plu 3,array act pointer referenced pointer multiplied byarrayptr plus 3or multiplied byarray plus 3
by using the multiplied bypointer plus element-index,4.0,1.0,by using the multiplied bypointer plus element-index,"['using', 'multiplied', 'bypointer', 'plus', 'element-index']",use multipli bypoint plu element-index,using multiplied bypointer plus element-index
using the star operator. array: b [n] can be accessed by multiplied bybpointer plus n,4.5,1.0,using the star operator array b n can be accessed by multiplied bybpointer plus n,"['using', 'star', 'operator', 'array', 'b', 'n', 'accessed', 'multiplied', 'bybpointer', 'plus', 'n']",use star oper array b n access multipli bybpoint plu n,using star operator array b n accessed multiplied bybpointer plus n
Element A [n] can be accessed by multiplied byAPtr plus n,4.0,1.0,element a n can be accessed by multiplied byaptr plus n,"['element', 'n', 'accessed', 'multiplied', 'byaptr', 'plus', 'n']",element n access multipli byaptr plu n,element n accessed multiplied byaptr plus n
"by referencing a pointer and referring to other pointers relative to the first pointerpointer plus 1, pointer plus 2, etc",3.0,0.0,by referencing a pointer and referring to other pointers relative to the first pointerpointer plus 1 pointer plus 2 etc,"['referencing', 'pointer', 'referring', 'pointers', 'relative', 'first', 'pointerpointer', 'plus', '1', 'pointer', 'plus', '2', 'etc']",referenc pointer refer pointer rel first pointerpoint plu 1 pointer plu 2 etc,referencing pointer referring pointer relative first pointerpointer plus 1 pointer plus 2 etc
"First, some pointer variable must reference the first entity in the array. Any variable in the array can then be accessed by referring to that first entity 's address plus some offset. i. e. ptrToArray equals array; nthEntity equals multiplied byptrToArray plus n;",5.0,1.0,first some pointer variable must reference the first entity in the array any variable in the array can then be accessed by referring to that first entity s address plus some offset i e ptrtoarray equals array nthentity equals multiplied byptrtoarray plus n,"['first', 'pointer', 'variable', 'must', 'reference', 'first', 'entity', 'array', 'variable', 'array', 'accessed', 'referring', 'first', 'entity', 'address', 'plus', 'offset', 'e', 'ptrtoarray', 'equals', 'array', 'nthentity', 'equals', 'multiplied', 'byptrtoarray', 'plus', 'n']",first pointer variabl must refer first entiti array variabl array access refer first entiti address plu offset e ptrtoarray equal array nthentiti equal multipli byptrtoarray plu n,first pointer variable must reference first entity array variable array accessed referring first entity address plus offset e ptrtoarray equal array nthentity equal multiplied byptrtoarray plus n
ADDRESS [b 3] is as bptr plus 3. Array can be treated as pointer,3.5,0.0,address b 3 is as bptr plus 3 array can be treated as pointer,"['address', 'b', '3', 'bptr', 'plus', '3', 'array', 'treated', 'pointer']",address b 3 bptr plu 3 array treat pointer,address b 3 bptr plus 3 array treated pointer
a [i] equals multiplied bya plus i,4.0,1.0,a i equals multiplied bya plus i,"['equals', 'multiplied', 'bya', 'plus']",equal multipli bya plu,equal multiplied bya plus
address of b [3] bPtr plus 3,4.0,1.0,address of b 3 bptr plus 3,"['address', 'b', '3', 'bptr', 'plus', '3']",address b 3 bptr plu 3,address b 3 bptr plus 3
multiplied byarrayName plus index,4.0,1.0,multiplied byarrayname plus index,"['multiplied', 'byarrayname', 'plus', 'index']",multipli byarraynam plu index,multiplied byarrayname plus index
multi-dimensional array,1.0,0.0,multi-dimensional array,"['multi-dimensional', 'array']",multi-dimension array,multi-dimensional array
the number of bytes of an array during program compilation.,4.5,1.0,the number of bytes of an array during program compilation,"['number', 'bytes', 'array', 'program', 'compilation']",number byte array program compil,number byte array program compilation
The sizeof operator returns the size of the operand.,4.0,1.0,the sizeof operator returns the size of the operand,"['sizeof', 'operator', 'returns', 'size', 'operand']",sizeof oper return size operand,sizeof operator return size operand
Returns size of operand in bytes.,5.0,1.0,returns size of operand in bytes,"['returns', 'size', 'operand', 'bytes']",return size operand byte,return size operand byte
It returns the size of an array in bytes.,4.5,1.0,it returns the size of an array in bytes,"['returns', 'size', 'array', 'bytes']",return size array byte,return size array byte
Returns the size of the array in bytes during the program compilation.,4.5,1.0,returns the size of the array in bytes during the program compilation,"['returns', 'size', 'array', 'bytes', 'program', 'compilation']",return size array byte program compil,return size array byte program compilation
it returns the size of the argument passed in,4.0,1.0,it returns the size of the argument passed in,"['returns', 'size', 'argument', 'passed']",return size argument pass,return size argument passed
The byte size of the date stored ina variable.,4.5,1.0,the byte size of the date stored ina variable,"['byte', 'size', 'date', 'stored', 'ina', 'variable']",byte size date store ina variabl,byte size date stored ina variable
sizeof returns the size of the operand in bytes,5.0,1.0,sizeof returns the size of the operand in bytes,"['sizeof', 'returns', 'size', 'operand', 'bytes']",sizeof return size operand byte,sizeof return size operand byte
"The amount of memory required for a specific parameter such as ints, doubles.",3.5,0.0,the amount of memory required for a specific parameter such as ints doubles,"['amount', 'memory', 'required', 'specific', 'parameter', 'ints', 'doubles']",amount memori requir specif paramet int doubl,amount memory required specific parameter ints double
sizeof returns the size of the operand in bytes.,5.0,1.0,sizeof returns the size of the operand in bytes,"['sizeof', 'returns', 'size', 'operand', 'bytes']",sizeof return size operand byte,sizeof return size operand byte
the size of the information in bits.,2.5,0.0,the size of the information in bits,"['size', 'information', 'bits']",size inform bit,size information bit
the size of the string.,3.0,0.0,the size of the string,"['size', 'string']",size string,size string
sizeof returns the size in bytes of the respective object.,4.5,1.0,sizeof returns the size in bytes of the respective object,"['sizeof', 'returns', 'size', 'bytes', 'respective', 'object']",sizeof return size byte respect object,sizeof return size byte respective object
The sizeof operator returns the total number of bytes of its operand.,5.0,1.0,the sizeof operator returns the total number of bytes of its operand,"['sizeof', 'operator', 'returns', 'total', 'number', 'bytes', 'operand']",sizeof oper return total number byte operand,sizeof operator return total number byte operand
"The size of an operand in bytes. Used with variable names, type names, and constant values",5.0,1.0,the size of an operand in bytes used with variable names type names and constant values,"['size', 'operand', 'bytes', 'used', 'variable', 'names', 'type', 'names', 'constant', 'values']",size operand byte use variabl name type name constant valu,size operand byte used variable name type name constant value
the size in bytes needed to store the object in memory,4.5,1.0,the size in bytes needed to store the object in memory,"['size', 'bytes', 'needed', 'store', 'object', 'memory']",size byte need store object memori,size byte needed store object memory
the size of the list object.,3.0,0.0,the size of the list object,"['size', 'list', 'object']",size list object,size list object
the sizeof operator returns the size in bytes of an array parameter,4.0,1.0,the sizeof operator returns the size in bytes of an array parameter,"['sizeof', 'operator', 'returns', 'size', 'bytes', 'array', 'parameter']",sizeof oper return size byte array paramet,sizeof operator return size byte array parameter
the size of operand in bytes,5.0,1.0,the size of operand in bytes,"['size', 'operand', 'bytes']",size operand byte,size operand byte
returns the size in bytes of the specified data,4.5,1.0,returns the size in bytes of the specified data,"['returns', 'size', 'bytes', 'specified', 'data']",return size byte specifi data,return size byte specified data
"It returns the size of an operand in memory, which is checked at compiler-time.",4.0,1.0,it returns the size of an operand in memory which is checked at compiler-time,"['returns', 'size', 'operand', 'memory', 'checked', 'compiler-time']",return size operand memori check compiler-tim,return size operand memory checked compiler-time
Return size of operand in bytes,5.0,1.0,return size of operand in bytes,"['return', 'size', 'operand', 'bytes']",return size operand byte,return size operand byte
the total number of bytes of an object.,4.5,1.0,the total number of bytes of an object,"['total', 'number', 'bytes', 'object']",total number byte object,total number byte object
total number of bytes in the array,4.5,1.0,total number of bytes in the array,"['total', 'number', 'bytes', 'array']",total number byte array,total number byte array
it returns the size in bytes of a certain variable type,4.5,1.0,it returns the size in bytes of a certain variable type,"['returns', 'size', 'bytes', 'certain', 'variable', 'type']",return size byte certain variabl type,return size byte certain variable type
"it yields the size in bytes of the operand, which can be an expression or the parenthesized name of a type",4.0,1.0,it yields the size in bytes of the operand which can be an expression or the parenthesized name of a type,"['yields', 'size', 'bytes', 'operand', 'expression', 'parenthesized', 'name', 'type']",yield size byte operand express parenthes name type,yield size byte operand expression parenthesized name type
They can be passed by value or by reference,2.5,0.0,they can be passed by value or by reference,"['passed', 'value', 'reference']",pass valu refer,passed value reference
"Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, constant pointer to constant data.",5.0,1.0,nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,"['nonconstant', 'pointer', 'nonconstant', 'data', 'nonconstant', 'pointer', 'constant', 'data', 'constant', 'pointer', 'nonconstant', 'data', 'constant', 'pointer', 'constant', 'data']",nonconst pointer nonconst data nonconst pointer constant data constant pointer nonconst data constant pointer constant data,nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data
Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data,5.0,1.0,nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,"['nonconstant', 'pointer', 'nonconstant', 'data', 'nonconstant', 'pointer', 'constant', 'data', 'constant', 'pointer', 'nonconstant', 'data', 'constant', 'pointer', 'constant', 'data']",nonconst pointer nonconst data nonconst pointer constant data constant pointer nonconst data constant pointer constant data,nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data
"Four different ways: Nonconstant pointer to nonconstant data, a nonconstant pointer to constant data, a constant pointer to nonconstant data and a constant pointer to constant data.",5.0,1.0,four different ways nonconstant pointer to nonconstant data a nonconstant pointer to constant data a constant pointer to nonconstant data and a constant pointer to constant data,"['four', 'different', 'ways', 'nonconstant', 'pointer', 'nonconstant', 'data', 'nonconstant', 'pointer', 'constant', 'data', 'constant', 'pointer', 'nonconstant', 'data', 'constant', 'pointer', 'constant', 'data']",four differ way nonconst pointer nonconst data nonconst pointer constant data constant pointer nonconst data constant pointer constant data,four different way nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data
Pass-by-value or pass-by-reference.,2.5,0.0,pass-by-value or pass-by-reference,"['pass-by-value', 'pass-by-reference']",pass-by-valu pass-by-refer,pass-by-value pass-by-reference
you can pass a pointer to a pointer or pass a reference to pointer.,2.5,0.0,you can pass a pointer to a pointer or pass a reference to pointer,"['pass', 'pointer', 'pointer', 'pass', 'reference', 'pointer']",pass pointer pointer pass refer pointer,pas pointer pointer pas reference pointer
by address address of bPtr or directly bPtr.,2.5,0.0,by address address of bptr or directly bptr,"['address', 'address', 'bptr', 'directly', 'bptr']",address address bptr directli bptr,address address bptr directly bptr
"Nonconstant pointer to nonconstant data, constant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to constant data.",5.0,1.0,nonconstant pointer to nonconstant data constant pointer to nonconstant data nonconstant pointer to constant data constant pointer to constant data,"['nonconstant', 'pointer', 'nonconstant', 'data', 'constant', 'pointer', 'nonconstant', 'data', 'nonconstant', 'pointer', 'constant', 'data', 'constant', 'pointer', 'constant', 'data']",nonconst pointer nonconst data constant pointer nonconst data nonconst pointer constant data constant pointer constant data,nonconstant pointer nonconstant data constant pointer nonconstant data nonconstant pointer constant data constant pointer constant data
By argument and reference.,2.0,0.0,by argument and reference,"['argument', 'reference']",argument refer,argument reference
"Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, and constant pointer to constant data.",5.0,1.0,nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data and constant pointer to constant data,"['nonconstant', 'pointer', 'nonconstant', 'data', 'nonconstant', 'pointer', 'constant', 'data', 'constant', 'pointer', 'nonconstant', 'data', 'constant', 'pointer', 'constant', 'data']",nonconst pointer nonconst data nonconst pointer constant data constant pointer nonconst data constant pointer constant data,nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data
pass by value and pass by reference with reference or pointer arguments.,2.5,0.0,pass by value and pass by reference with reference or pointer arguments,"['pass', 'value', 'pass', 'reference', 'reference', 'pointer', 'arguments']",pass valu pass refer refer pointer argument,pas value pas reference reference pointer argument
you can pass them with the pointerSTARor the memory addressADDRESS,2.5,0.0,you can pass them with the pointerstaror the memory addressaddress,"['pass', 'pointerstaror', 'memory', 'addressaddress']",pass pointerstaror memori addressaddress,pas pointerstaror memory addressaddress
nonconst implies nonconst const implies nonconst nonconst implies const const implies const,5.0,1.0,nonconst implies nonconst const implies nonconst nonconst implies const const implies const,"['nonconst', 'implies', 'nonconst', 'const', 'implies', 'nonconst', 'nonconst', 'implies', 'const', 'const', 'implies', 'const']",nonconst impli nonconst const impli nonconst nonconst impli const const impli const,nonconst implies nonconst const implies nonconst nonconst implies const const implies const
Nonconstant pointer to nonconstant data Constant pointer to nonconstant data Nonconstant pointer to constant data Constant point to constant data,5.0,1.0,nonconstant pointer to nonconstant data constant pointer to nonconstant data nonconstant pointer to constant data constant point to constant data,"['nonconstant', 'pointer', 'nonconstant', 'data', 'constant', 'pointer', 'nonconstant', 'data', 'nonconstant', 'pointer', 'constant', 'data', 'constant', 'point', 'constant', 'data']",nonconst pointer nonconst data constant pointer nonconst data nonconst pointer constant data constant point constant data,nonconstant pointer nonconstant data constant pointer nonconstant data nonconstant pointer constant data constant point constant data
"Non-constant pointer to non-constant data, non-constant pointer to constant data, constant pointer to constant data, constant pointer to non-constant data.",5.0,1.0,non-constant pointer to non-constant data non-constant pointer to constant data constant pointer to constant data constant pointer to non-constant data,"['non-constant', 'pointer', 'non-constant', 'data', 'non-constant', 'pointer', 'constant', 'data', 'constant', 'pointer', 'constant', 'data', 'constant', 'pointer', 'non-constant', 'data']",non-const pointer non-const data non-const pointer constant data constant pointer constant data constant pointer non-const data,non-constant pointer non-constant data non-constant pointer constant data constant pointer constant data constant pointer non-constant data
Pass by reference with reference arguments. functionint ADDRESSPass by reference with pointer arguments. functionint STAR,2.5,0.0,pass by reference with reference arguments functionint addresspass by reference with pointer arguments functionint star,"['pass', 'reference', 'reference', 'arguments', 'functionint', 'addresspass', 'reference', 'pointer', 'arguments', 'functionint', 'star']",pass refer refer argument functionint addresspass refer pointer argument functionint star,pas reference reference argument functionint addresspass reference pointer argument functionint star
you can pass the reference or the dereference in a function,2.0,0.0,you can pass the reference or the dereference in a function,"['pass', 'reference', 'dereference', 'function']",pass refer derefer function,pas reference dereference function
1. nonconstant pointer to nonconstant data. Its delcaration does no include const qualifier. 2. nonconstant pointer to constant data. Provides the performance of pass-by-reference and the protection of pass-by-value 3. Constant pointer to nonconstant data. 4. Constant pointer to constant date.,5.0,1.0,1 nonconstant pointer to nonconstant data its delcaration does no include const qualifier 2 nonconstant pointer to constant data provides the performance of pass-by-reference and the protection of pass-by-value 3 constant pointer to nonconstant data 4 constant pointer to constant date,"['1', 'nonconstant', 'pointer', 'nonconstant', 'data', 'delcaration', 'include', 'const', 'qualifier', '2', 'nonconstant', 'pointer', 'constant', 'data', 'provides', 'performance', 'pass-by-reference', 'protection', 'pass-by-value', '3', 'constant', 'pointer', 'nonconstant', 'data', '4', 'constant', 'pointer', 'constant', 'date']",1 nonconst pointer nonconst data delcar includ const qualifi 2 nonconst pointer constant data provid perform pass-by-refer protect pass-by-valu 3 constant pointer nonconst data 4 constant pointer constant date,1 nonconstant pointer nonconstant data delcaration include const qualifier 2 nonconstant pointer constant data provides performance pass-by-reference protection pass-by-value 3 constant pointer nonconstant data 4 constant pointer constant date
"constant pointer to constant data, constant pointer to nonconstant data, nonconstant pointer to constant data, nonconstant pointer to nonconstant data",5.0,1.0,constant pointer to constant data constant pointer to nonconstant data nonconstant pointer to constant data nonconstant pointer to nonconstant data,"['constant', 'pointer', 'constant', 'data', 'constant', 'pointer', 'nonconstant', 'data', 'nonconstant', 'pointer', 'constant', 'data', 'nonconstant', 'pointer', 'nonconstant', 'data']",constant pointer constant data constant pointer nonconst data nonconst pointer constant data nonconst pointer nonconst data,constant pointer constant data constant pointer nonconstant data nonconstant pointer constant data nonconstant pointer nonconstant data
Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data,5.0,1.0,nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,"['nonconstant', 'pointer', 'nonconstant', 'data', 'nonconstant', 'pointer', 'constant', 'data', 'constant', 'pointer', 'nonconstant', 'data', 'constant', 'pointer', 'constant', 'data']",nonconst pointer nonconst data nonconst pointer constant data constant pointer nonconst data constant pointer constant data,nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data
"Pointers may be passed to functions by value, by reference with reference arguments, or by reference with pointer arguments.",2.5,0.0,pointers may be passed to functions by value by reference with reference arguments or by reference with pointer arguments,"['pointers', 'may', 'passed', 'functions', 'value', 'reference', 'reference', 'arguments', 'reference', 'pointer', 'arguments']",pointer may pass function valu refer refer argument refer pointer argument,pointer may passed function value reference reference argument reference pointer argument
There are four way to pass pointer to a function 1. non constant pointer to non constant data 2. non constant pointer to constant data. 3. constant pointer to non constant data. 4. constant pointer to constant data.,5.0,1.0,there are four way to pass pointer to a function 1 non constant pointer to non constant data 2 non constant pointer to constant data 3 constant pointer to non constant data 4 constant pointer to constant data,"['four', 'way', 'pass', 'pointer', 'function', '1', 'non', 'constant', 'pointer', 'non', 'constant', 'data', '2', 'non', 'constant', 'pointer', 'constant', 'data', '3', 'constant', 'pointer', 'non', 'constant', 'data', '4', 'constant', 'pointer', 'constant', 'data']",four way pass pointer function 1 non constant pointer non constant data 2 non constant pointer constant data 3 constant pointer non constant data 4 constant pointer constant data,four way pas pointer function 1 non constant pointer non constant data 2 non constant pointer constant data 3 constant pointer non constant data 4 constant pointer constant data
nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,5.0,1.0,nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,"['nonconstant', 'pointer', 'nonconstant', 'data', 'nonconstant', 'pointer', 'constant', 'data', 'constant', 'pointer', 'nonconstant', 'data', 'constant', 'pointer', 'constant', 'data']",nonconst pointer nonconst data nonconst pointer constant data constant pointer nonconst data constant pointer constant data,nonconstant pointer nonconstant data nonconstant pointer constant data constant pointer nonconstant data constant pointer constant data
"pass by value, pass by reference with reference arguments, pass by reference with pointer arguments",2.5,0.0,pass by value pass by reference with reference arguments pass by reference with pointer arguments,"['pass', 'value', 'pass', 'reference', 'reference', 'arguments', 'pass', 'reference', 'pointer', 'arguments']",pass valu pass refer refer argument pass refer pointer argument,pas value pas reference reference argument pas reference pointer argument
"you can pass it where either the pointer cant be moved, the data pointed to cant be changed, or both or neither",4.0,1.0,you can pass it where either the pointer cant be moved the data pointed to cant be changed or both or neither,"['pass', 'either', 'pointer', 'cant', 'moved', 'data', 'pointed', 'cant', 'changed', 'neither']",pass either pointer cant move data point cant chang neither,pas either pointer cant moved data pointed cant changed neither
"there are only two ways to pass something, by value and by reference. Use of dot or pointer operators within the receiving function and use of  ADDRESS operator inside the passing function",2.5,0.0,there are only two ways to pass something by value and by reference use of dot or pointer operators within the receiving function and use of address operator inside the passing function,"['two', 'ways', 'pass', 'something', 'value', 'reference', 'use', 'dot', 'pointer', 'operators', 'within', 'receiving', 'function', 'use', 'address', 'operator', 'inside', 'passing', 'function']",two way pass someth valu refer use dot pointer oper within receiv function use address oper insid pass function,two way pas something value reference use dot pointer operator within receiving function use address operator inside passing function
A pointer that points to the memory address of the beginning part of a functions. pretty much the pointer points to the function so it can be called to execute.,5.0,1.0,a pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,"['pointer', 'points', 'memory', 'address', 'beginning', 'part', 'functions', 'pretty', 'much', 'pointer', 'points', 'function', 'called', 'execute']",pointer point memori address begin part function pretti much pointer point function call execut,pointer point memory address beginning part function pretty much pointer point function called execute
A function pointer is a pointer that contains the address of the function in memory.,5.0,1.0,a function pointer is a pointer that contains the address of the function in memory,"['function', 'pointer', 'pointer', 'contains', 'address', 'function', 'memory']",function pointer pointer contain address function memori,function pointer pointer contains address function memory
"Function Pointers are pointers, i. e. variables, which point to the address of a function.",5.0,1.0,function pointers are pointers i e variables which point to the address of a function,"['function', 'pointers', 'pointers', 'e', 'variables', 'point', 'address', 'function']",function pointer pointer e variabl point address function,function pointer pointer e variable point address function
"A pointer to a function is the address where the code for the function resides. They can be passed to functions, returned from functions, stored in arrays and assigned to other pointers.",5.0,1.0,a pointer to a function is the address where the code for the function resides they can be passed to functions returned from functions stored in arrays and assigned to other pointers,"['pointer', 'function', 'address', 'code', 'function', 'resides', 'passed', 'functions', 'returned', 'functions', 'stored', 'arrays', 'assigned', 'pointers']",pointer function address code function resid pass function return function store array assign pointer,pointer function address code function resides passed function returned function stored array assigned pointer
It contains the address of the function in memory.,5.0,1.0,it contains the address of the function in memory,"['contains', 'address', 'function', 'memory']",contain address function memori,contains address function memory
when it is dereferenced a function pointer calls its function with zero or more arguments.,3.5,0.0,when it is dereferenced a function pointer calls its function with zero or more arguments,"['dereferenced', 'function', 'pointer', 'calls', 'function', 'zero', 'arguments']",dereferenc function pointer call function zero argument,dereferenced function pointer call function zero argument
a pointer to a function,3.5,0.0,a pointer to a function,"['pointer', 'function']",pointer function,pointer function
"A pointer to a function itself, contains the address of the function and can be used to call that function",5.0,1.0,a pointer to a function itself contains the address of the function and can be used to call that function,"['pointer', 'function', 'contains', 'address', 'function', 'used', 'call', 'function']",pointer function contain address function use call function,pointer function contains address function used call function
"Function Pointers are pointers, i. e. variables, which point to the address of a function.",5.0,1.0,function pointers are pointers i e variables which point to the address of a function,"['function', 'pointers', 'pointers', 'e', 'variables', 'point', 'address', 'function']",function pointer pointer e variabl point address function,function pointer pointer e variable point address function
A pointer to a function that contains the addresses of the function.,5.0,1.0,a pointer to a function that contains the addresses of the function,"['pointer', 'function', 'contains', 'addresses', 'function']",pointer function contain address function,pointer function contains address function
a pointer that contains the address of a function,5.0,1.0,a pointer that contains the address of a function,"['pointer', 'contains', 'address', 'function']",pointer contain address function,pointer contains address function
a function pointer is a pointer to a function. It can be used in substitution for calling a function.,5.0,1.0,a function pointer is a pointer to a function it can be used in substitution for calling a function,"['function', 'pointer', 'pointer', 'function', 'used', 'substitution', 'calling', 'function']",function pointer pointer function use substitut call function,function pointer pointer function used substitution calling function
Points to the memory address of a function. Kind of like breaking a branch off of a tree object and hitting other objects with it.,5.0,1.0,points to the memory address of a function kind of like breaking a branch off of a tree object and hitting other objects with it,"['points', 'memory', 'address', 'function', 'kind', 'like', 'breaking', 'branch', 'tree', 'object', 'hitting', 'objects']",point memori address function kind like break branch tree object hit object,point memory address function kind like breaking branch tree object hitting object
"They are pointers that contain the addresses to functions, they can be passed and returned from functions, as well as stored in arrays and assigned to other function pointers.",5.0,1.0,they are pointers that contain the addresses to functions they can be passed and returned from functions as well as stored in arrays and assigned to other function pointers,"['pointers', 'contain', 'addresses', 'functions', 'passed', 'returned', 'functions', 'well', 'stored', 'arrays', 'assigned', 'function', 'pointers']",pointer contain address function pass return function well store array assign function pointer,pointer contain address function passed returned function well stored array assigned function pointer
Pointer variables that point to function addresses.,5.0,1.0,pointer variables that point to function addresses,"['pointer', 'variables', 'point', 'function', 'addresses']",pointer variabl point function address,pointer variable point function address
Contains the address of the function in memory.,5.0,1.0,contains the address of the function in memory,"['contains', 'address', 'function', 'memory']",contain address function memori,contains address function memory
"a pointer that points to a function itself, which allows passing a function as a parameter to another function.",4.0,1.0,a pointer that points to a function itself which allows passing a function as a parameter to another function,"['pointer', 'points', 'function', 'allows', 'passing', 'function', 'parameter', 'another', 'function']",pointer point function allow pass function paramet anoth function,pointer point function allows passing function parameter another function
pointers that contain the addresses of functions.,5.0,1.0,pointers that contain the addresses of functions,"['pointers', 'contain', 'addresses', 'functions']",pointer contain address function,pointer contain address function
is a pointer that contains the address of a function,5.0,1.0,is a pointer that contains the address of a function,"['pointer', 'contains', 'address', 'function']",pointer contain address function,pointer contains address function
a pointer that contains the address of the function definition,4.5,1.0,a pointer that contains the address of the function definition,"['pointer', 'contains', 'address', 'function', 'definition']",pointer contain address function definit,pointer contains address function definition
"A function pointer contains the memory address of a function. Using a function pointer, a function can be passed to or returned by another function. Function pointers can also be stored in arrays.",5.0,1.0,a function pointer contains the memory address of a function using a function pointer a function can be passed to or returned by another function function pointers can also be stored in arrays,"['function', 'pointer', 'contains', 'memory', 'address', 'function', 'using', 'function', 'pointer', 'function', 'passed', 'returned', 'another', 'function', 'function', 'pointers', 'also', 'stored', 'arrays']",function pointer contain memori address function use function pointer function pass return anoth function function pointer also store array,function pointer contains memory address function using function pointer function passed returned another function function pointer also stored array
Function pointer is a pointer to a function. function pointer contains address of functions,5.0,1.0,function pointer is a pointer to a function function pointer contains address of functions,"['function', 'pointer', 'pointer', 'function', 'function', 'pointer', 'contains', 'address', 'functions']",function pointer pointer function function pointer contain address function,function pointer pointer function function pointer contains address function
a pointer that contains the address of a function in memory.,5.0,1.0,a pointer that contains the address of a function in memory,"['pointer', 'contains', 'address', 'function', 'memory']",pointer contain address function memori,pointer contains address function memory
it contains the address of the function in memory,5.0,1.0,it contains the address of the function in memory,"['contains', 'address', 'function', 'memory']",contain address function memori,contains address function memory
it is a pointer that points to the address of a function.,5.0,1.0,it is a pointer that points to the address of a function,"['pointer', 'points', 'address', 'function']",pointer point address function,pointer point address function
"When dereferenced, a function pointer invokes a function, passing it zero or more arguments just like a normal function. In programming languages like C, function pointers can be used to simplify code, such as replacing large switch statements.",4.0,1.0,when dereferenced a function pointer invokes a function passing it zero or more arguments just like a normal function in programming languages like c function pointers can be used to simplify code such as replacing large switch statements,"['dereferenced', 'function', 'pointer', 'invokes', 'function', 'passing', 'zero', 'arguments', 'like', 'normal', 'function', 'programming', 'languages', 'like', 'c', 'function', 'pointers', 'used', 'simplify', 'code', 'replacing', 'large', 'switch', 'statements']",dereferenc function pointer invok function pass zero argument like normal function program languag like c function pointer use simplifi code replac larg switch statement,dereferenced function pointer invokes function passing zero argument like normal function programming language like c function pointer used simplify code replacing large switch statement
"Consists of sequence of nodes, each containing a number of data fields and one or two links called pointers that point to the next or previous nodes.",4.5,1.0,consists of sequence of nodes each containing a number of data fields and one or two links called pointers that point to the next or previous nodes,"['consists', 'sequence', 'nodes', 'containing', 'number', 'data', 'fields', 'one', 'two', 'links', 'called', 'pointers', 'point', 'next', 'previous', 'nodes']",consist sequenc node contain number data field one two link call pointer point next previou node,consists sequence node containing number data field one two link called pointer point next previous node
A linked list is a list in which each item in the list points to the next item in the list.,4.5,1.0,a linked list is a list in which each item in the list points to the next item in the list,"['linked', 'list', 'list', 'item', 'list', 'points', 'next', 'item', 'list']",link list list item list point next item list,linked list list item list point next item list
"A linked list is a chain of structs or records called nodes and you have the ability to add, delete, or retrieve items.",4.5,1.0,a linked list is a chain of structs or records called nodes and you have the ability to add delete or retrieve items,"['linked', 'list', 'chain', 'structs', 'records', 'called', 'nodes', 'ability', 'add', 'delete', 'retrieve', 'items']",link list chain struct record call node abil add delet retriev item,linked list chain structs record called node ability add delete retrieve item
"A list of elements, or nodes, that are linked to one another such that each element points to the next element.",4.5,1.0,a list of elements or nodes that are linked to one another such that each element points to the next element,"['list', 'elements', 'nodes', 'linked', 'one', 'another', 'element', 'points', 'next', 'element']",list element node link one anoth element point next element,list element node linked one another element point next element
"A sequence of nodes, each containing data fieldsspecified by programmerand pointerswhich can point to the next or previous nodes.",4.5,1.0,a sequence of nodes each containing data fieldsspecified by programmerand pointerswhich can point to the next or previous nodes,"['sequence', 'nodes', 'containing', 'data', 'fieldsspecified', 'programmerand', 'pointerswhich', 'point', 'next', 'previous', 'nodes']",sequenc node contain data fieldsspecifi programmerand pointerswhich point next previou node,sequence node containing data fieldsspecified programmerand pointerswhich point next previous node
a list of nodes where each node contains a data member and also a pointer to the next node.,4.5,1.0,a list of nodes where each node contains a data member and also a pointer to the next node,"['list', 'nodes', 'node', 'contains', 'data', 'member', 'also', 'pointer', 'next', 'node']",list node node contain data member also pointer next node,list node node contains data member also pointer next node
A list of items linked together. Each item is linked to its successor.,4.5,1.0,a list of items linked together each item is linked to its successor,"['list', 'items', 'linked', 'together', 'item', 'linked', 'successor']",list item link togeth item link successor,list item linked together item linked successor
A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list.,4.5,1.0,a linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list,"['linked', 'list', 'chain', 'nodes', 'store', 'single', 'piece', 'data', 'pointer', 'variables', 'point', 'nodes', 'list']",link list chain node store singl piec data pointer variabl point node list,linked list chain node store single piece data pointer variable point node list
"one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two referenceslinkspointing to the next and previous nodes.",4.5,1.0,one of the fundamental data structures and can be used to implement other data structures it consists of a sequence of nodes each containing arbitrary data fields and one or two referenceslinkspointing to the next and previous nodes,"['one', 'fundamental', 'data', 'structures', 'used', 'implement', 'data', 'structures', 'consists', 'sequence', 'nodes', 'containing', 'arbitrary', 'data', 'fields', 'one', 'two', 'referenceslinkspointing', 'next', 'previous', 'nodes']",one fundament data structur use implement data structur consist sequenc node contain arbitrari data field one two referenceslinkspoint next previou node,one fundamental data structure used implement data structure consists sequence node containing arbitrary data field one two referenceslinkspointing next previous node
"A data structure in a sequence of nodes, each containing arbitrary data fields and one or two referenceslinkspointing to the next and previous nodes.",4.5,1.0,a data structure in a sequence of nodes each containing arbitrary data fields and one or two referenceslinkspointing to the next and previous nodes,"['data', 'structure', 'sequence', 'nodes', 'containing', 'arbitrary', 'data', 'fields', 'one', 'two', 'referenceslinkspointing', 'next', 'previous', 'nodes']",data structur sequenc node contain arbitrari data field one two referenceslinkspoint next previou node,data structure sequence node containing arbitrary data field one two referenceslinkspointing next previous node
Information in memory linked to the next piece of information and can only be linked forwards and not backwards.,3.5,0.0,information in memory linked to the next piece of information and can only be linked forwards and not backwards,"['information', 'memory', 'linked', 'next', 'piece', 'information', 'linked', 'forwards', 'backwards']",inform memori link next piec inform link forward backward,information memory linked next piece information linked forward backwards
"A linked list is a data structure that is not necessarily in the same contiguous memory spacesuch as arrays. It holds the data type and points to the next data item in the list, or in a doubly linked list also to the previous item.",5.0,1.0,a linked list is a data structure that is not necessarily in the same contiguous memory spacesuch as arrays it holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item,"['linked', 'list', 'data', 'structure', 'necessarily', 'contiguous', 'memory', 'spacesuch', 'arrays', 'holds', 'data', 'type', 'points', 'next', 'data', 'item', 'list', 'doubly', 'linked', 'list', 'also', 'previous', 'item']",link list data structur necessarili contigu memori spacesuch array hold data type point next data item list doubli link list also previou item,linked list data structure necessarily contiguous memory spacesuch array hold data type point next data item list doubly linked list also previous item
A linked list is a data structure containing one or more data elements with a pointer to the next node.,4.5,1.0,a linked list is a data structure containing one or more data elements with a pointer to the next node,"['linked', 'list', 'data', 'structure', 'containing', 'one', 'data', 'elements', 'pointer', 'next', 'node']",link list data structur contain one data element pointer next node,linked list data structure containing one data element pointer next node
"A series of Nodes structures with a value and a pointer that point to a similar Node. Not quite an array, but still can carry a list of values.",4.5,1.0,a series of nodes structures with a value and a pointer that point to a similar node not quite an array but still can carry a list of values,"['series', 'nodes', 'structures', 'value', 'pointer', 'point', 'similar', 'node', 'quite', 'array', 'still', 'carry', 'list', 'values']",seri node structur valu pointer point similar node quit array still carri list valu,series node structure value pointer point similar node quite array still carry list value
A data type that contains a pointer to at least the next element in a list.,4.5,1.0,a data type that contains a pointer to at least the next element in a list,"['data', 'type', 'contains', 'pointer', 'least', 'next', 'element', 'list']",data type contain pointer least next element list,data type contains pointer least next element list
Each component contains a Node a data item and a pointer to the next item in the list,4.5,1.0,each component contains a node a data item and a pointer to the next item in the list,"['component', 'contains', 'node', 'data', 'item', 'pointer', 'next', 'item', 'list']",compon contain node data item pointer next item list,component contains node data item pointer next item list
"A linked list is a chain of structs or records called nodes. Each node has at least two members, one of which points to the next item or node in the list.",4.5,1.0,a linked list is a chain of structs or records called nodes each node has at least two members one of which points to the next item or node in the list,"['linked', 'list', 'chain', 'structs', 'records', 'called', 'nodes', 'node', 'least', 'two', 'members', 'one', 'points', 'next', 'item', 'node', 'list']",link list chain struct record call node node least two member one point next item node list,linked list chain structs record called node node least two member one point next item node list
"An array based list that uses an implicit ordering scheme, often using pointers.",2.5,0.0,an array based list that uses an implicit ordering scheme often using pointers,"['array', 'based', 'list', 'uses', 'implicit', 'ordering', 'scheme', 'often', 'using', 'pointers']",array base list use implicit order scheme often use pointer,array based list us implicit ordering scheme often using pointer
a series of structures containing data items and a pointer that links the structure to the next structure.,4.5,1.0,a series of structures containing data items and a pointer that links the structure to the next structure,"['series', 'structures', 'containing', 'data', 'items', 'pointer', 'links', 'structure', 'next', 'structure']",seri structur contain data item pointer link structur next structur,series structure containing data item pointer link structure next structure
"A linked list is a collection of Objects each containing at least one data member, and a pointer to the next object in the listand the previous object in the case of a doubly linked list",4.5,1.0,a linked list is a collection of objects each containing at least one data member and a pointer to the next object in the listand the previous object in the case of a doubly linked list,"['linked', 'list', 'collection', 'objects', 'containing', 'least', 'one', 'data', 'member', 'pointer', 'next', 'object', 'listand', 'previous', 'object', 'case', 'doubly', 'linked', 'list']",link list collect object contain least one data member pointer next object listand previou object case doubli link list,linked list collection object containing least one data member pointer next object listand previous object case doubly linked list
A link list is a data structure which is built from structures and pointers. It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together,4.0,1.0,a link list is a data structure which is built from structures and pointers it forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together,"['link', 'list', 'data', 'structure', 'built', 'structures', 'pointers', 'forms', 'chain', 'nodes', 'pointers', 'representing', 'links', 'chain', 'holding', 'entire', 'thing', 'together']",link list data structur built structur pointer form chain node pointer repres link chain hold entir thing togeth,link list data structure built structure pointer form chain node pointer representing link chain holding entire thing together
its a list of pointers that are linked 2 each other. every pointer points to the next pointer which has the next element,4.5,1.0,its a list of pointers that are linked 2 each other every pointer points to the next pointer which has the next element,"['list', 'pointers', 'linked', '2', 'every', 'pointer', 'points', 'next', 'pointer', 'next', 'element']",list pointer link 2 everi pointer point next pointer next element,list pointer linked 2 every pointer point next pointer next element
linear collection of self-referential nodes connected by pointers.,4.0,1.0,linear collection of self-referential nodes connected by pointers,"['linear', 'collection', 'self-referential', 'nodes', 'connected', 'pointers']",linear collect self-referenti node connect pointer,linear collection self-referential node connected pointer
the items of a data structure are linked to each other using pointers,4.5,1.0,the items of a data structure are linked to each other using pointers,"['items', 'data', 'structure', 'linked', 'using', 'pointers']",item data structur link use pointer,item data structure linked using pointer
A list of objects where each object contains a link to the next item in the list,4.5,1.0,a list of objects where each object contains a link to the next item in the list,"['list', 'objects', 'object', 'contains', 'link', 'next', 'item', 'list']",list object object contain link next item list,list object object contains link next item list
"A linked list is one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two referenceslinkspointing to the next and previous nodes.",4.5,1.0,a linked list is one of the fundamental data structures and can be used to implement other data structures it consists of a sequence of nodes each containing arbitrary data fields and one or two referenceslinkspointing to the next and previous nodes,"['linked', 'list', 'one', 'fundamental', 'data', 'structures', 'used', 'implement', 'data', 'structures', 'consists', 'sequence', 'nodes', 'containing', 'arbitrary', 'data', 'fields', 'one', 'two', 'referenceslinkspointing', 'next', 'previous', 'nodes']",link list one fundament data structur use implement data structur consist sequenc node contain arbitrari data field one two referenceslinkspoint next previou node,linked list one fundamental data structure used implement data structure consists sequence node containing arbitrary data field one two referenceslinkspointing next previous node
Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be.,5.0,1.0,elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,"['elements', 'inserted', 'link', 'list', 'point', 'need', 'resized', 'unlike', 'array', 'needs']",element insert link list point need resiz unlik array need,element inserted link list point need resized unlike array need
"Unlike arrays, linked lists can insert and delete without shifting data and change in size easily.",5.0,1.0,unlike arrays linked lists can insert and delete without shifting data and change in size easily,"['unlike', 'arrays', 'linked', 'lists', 'insert', 'delete', 'without', 'shifting', 'data', 'change', 'size', 'easily']",unlik array link list insert delet without shift data chang size easili,unlike array linked list insert delete without shifting data change size easily
"Array size is fixed, but Linked is not fixed.",5.0,1.0,array size is fixed but linked is not fixed,"['array', 'size', 'fixed', 'linked', 'fixed']",array size fix link fix,array size fixed linked fixed
You can insert into and delete items from a pointer-based linked list without shifting data.,4.5,1.0,you can insert into and delete items from a pointer-based linked list without shifting data,"['insert', 'delete', 'items', 'pointer-based', 'linked', 'list', 'without', 'shifting', 'data']",insert delet item pointer-bas link list without shift data,insert delete item pointer-based linked list without shifting data
Arrays must be of a defined size ... elements can be added to a linked list with o defining any size.,5.0,1.0,arrays must be of a defined size elements can be added to a linked list with o defining any size,"['arrays', 'must', 'defined', 'size', 'elements', 'added', 'linked', 'list', 'defining', 'size']",array must defin size element ad link list defin size,array must defined size element added linked list defining size
"The principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk, allowing the list of items to be traversed in a different order. A linked list is a self-referential datatype because it contains a pointer or link to another datum of the same type. Linked lists permit insertion and removal of nodes at any point in the list in constant time",4.0,1.0,the principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk allowing the list of items to be traversed in a different order a linked list is a self-referential datatype because it contains a pointer or link to another datum of the same type linked lists permit insertion and removal of nodes at any point in the list in constant time,"['principal', 'benefit', 'linked', 'list', 'conventional', 'array', 'order', 'linked', 'items', 'may', 'different', 'order', 'data', 'items', 'stored', 'memory', 'disk', 'allowing', 'list', 'items', 'traversed', 'different', 'order', 'linked', 'list', 'self-referential', 'datatype', 'contains', 'pointer', 'link', 'another', 'datum', 'type', 'linked', 'lists', 'permit', 'insertion', 'removal', 'nodes', 'point', 'list', 'constant', 'time']",princip benefit link list convent array order link item may differ order data item store memori disk allow list item travers differ order link list self-referenti datatyp contain pointer link anoth datum type link list permit insert remov node point list constant time,principal benefit linked list conventional array order linked item may different order data item stored memory disk allowing list item traversed different order linked list self-referential datatype contains pointer link another datum type linked list permit insertion removal node point list constant time
You can expand when you need it. You do not have to predetermine the size.,5.0,1.0,you can expand when you need it you do not have to predetermine the size,"['expand', 'need', 'predetermine', 'size']",expand need predetermin size,expand need predetermine size
Linked lists are able to grow and shrink in size as needed,5.0,1.0,linked lists are able to grow and shrink in size as needed,"['linked', 'lists', 'able', 'grow', 'shrink', 'size', 'needed']",link list abl grow shrink size need,linked list able grow shrink size needed
Linked list is able to grow in size as needed. Does not require the shifting of items during insertions and deletions,5.0,1.0,linked list is able to grow in size as needed does not require the shifting of items during insertions and deletions,"['linked', 'list', 'able', 'grow', 'size', 'needed', 'require', 'shifting', 'items', 'insertions', 'deletions']",link list abl grow size need requir shift item insert delet,linked list able grow size needed require shifting item insertion deletion
"A linked list is not fixed in size, and does not require the shifting of items during insertions and deletions.",5.0,1.0,a linked list is not fixed in size and does not require the shifting of items during insertions and deletions,"['linked', 'list', 'fixed', 'size', 'require', 'shifting', 'items', 'insertions', 'deletions']",link list fix size requir shift item insert delet,linked list fixed size require shifting item insertion deletion
There is no limit as to how many you create where an array can only hold a given amount of information.,3.0,0.0,there is no limit as to how many you create where an array can only hold a given amount of information,"['limit', 'many', 'create', 'array', 'hold', 'given', 'amount', 'information']",limit mani creat array hold given amount inform,limit many create array hold given amount information
Linked lists have constant time insertion and deletion,3.5,0.0,linked lists have constant time insertion and deletion,"['linked', 'lists', 'constant', 'time', 'insertion', 'deletion']",link list constant time insert delet,linked list constant time insertion deletion
"Linked lists can be grown dynamically, items do not require shifting, and they have a greater awesome factor than that of arrays.",5.0,1.0,linked lists can be grown dynamically items do not require shifting and they have a greater awesome factor than that of arrays,"['linked', 'lists', 'grown', 'dynamically', 'items', 'require', 'shifting', 'greater', 'awesome', 'factor', 'arrays']",link list grown dynam item requir shift greater awesom factor array,linked list grown dynamically item require shifting greater awesome factor array
Linked lists have an indefinite size. They can be added to and taken away from very easily with little difficulty in the shifting of data.,5.0,1.0,linked lists have an indefinite size they can be added to and taken away from very easily with little difficulty in the shifting of data,"['linked', 'lists', 'indefinite', 'size', 'added', 'taken', 'away', 'easily', 'little', 'difficulty', 'shifting', 'data']",link list indefinit size ad taken away easili littl difficulti shift data,linked list indefinite size added taken away easily little difficulty shifting data
"Nearly infinite size, limited only by system memory and also the ability to expand the size dynamically.",5.0,1.0,nearly infinite size limited only by system memory and also the ability to expand the size dynamically,"['nearly', 'infinite', 'size', 'limited', 'system', 'memory', 'also', 'ability', 'expand', 'size', 'dynamically']",nearli infinit size limit system memori also abil expand size dynam,nearly infinite size limited system memory also ability expand size dynamically
"They grow as needed, while arrays are of fixed size.",5.0,1.0,they grow as needed while arrays are of fixed size,"['grow', 'needed', 'arrays', 'fixed', 'size']",grow need array fix size,grow needed array fixed size
Does not have a fixed size. Linked list is able to grow as needed. The time to access an array bases list takes a contant amount of time where as an linked-base like depends on i,5.0,1.0,does not have a fixed size linked list is able to grow as needed the time to access an array bases list takes a contant amount of time where as an linked-base like depends on i,"['fixed', 'size', 'linked', 'list', 'able', 'grow', 'needed', 'time', 'access', 'array', 'bases', 'list', 'takes', 'contant', 'amount', 'time', 'linked-base', 'like', 'depends']",fix size link list abl grow need time access array base list take contant amount time linked-bas like depend,fixed size linked list able grow needed time access array base list take contant amount time linked-base like depends
Linked lists can grow and shrink as you need them to. Arrays have a fixed size.,5.0,1.0,linked lists can grow and shrink as you need them to arrays have a fixed size,"['linked', 'lists', 'grow', 'shrink', 'need', 'arrays', 'fixed', 'size']",link list grow shrink need array fix size,linked list grow shrink need array fixed size
more memory can be allocated on the fly for more items,4.5,1.0,more memory can be allocated on the fly for more items,"['memory', 'allocated', 'fly', 'items']",memori alloc fli item,memory allocated fly item
"A linked list may be increased in size as needed, while an array 's size is set when it is created",5.0,1.0,a linked list may be increased in size as needed while an array s size is set when it is created,"['linked', 'list', 'may', 'increased', 'size', 'needed', 'array', 'size', 'set', 'created']",link list may increas size need array size set creat,linked list may increased size needed array size set created
"Array has a fixed size, but linked list is able to grow in size as needed",5.0,1.0,array has a fixed size but linked list is able to grow in size as needed,"['array', 'fixed', 'size', 'linked', 'list', 'able', 'grow', 'size', 'needed']",array fix size link list abl grow size need,array fixed size linked list able grow size needed
its resizeable,5.0,1.0,its resizeable,['resizeable'],resiz,resizeable
Linked lists do not have a set size and can grow or shrink as needed.,5.0,1.0,linked lists do not have a set size and can grow or shrink as needed,"['linked', 'lists', 'set', 'size', 'grow', 'shrink', 'needed']",link list set size grow shrink need,linked list set size grow shrink needed
linked lists are abe to grow as needed to a new size,5.0,1.0,linked lists are abe to grow as needed to a new size,"['linked', 'lists', 'abe', 'grow', 'needed', 'new', 'size']",link list abe grow need new size,linked list abe grow needed new size
"The size is not fixed, easier sorting because of no shifting, easier to insert items into the list",5.0,1.0,the size is not fixed easier sorting because of no shifting easier to insert items into the list,"['size', 'fixed', 'easier', 'sorting', 'shifting', 'easier', 'insert', 'items', 'list']",size fix easier sort shift easier insert item list,size fixed easier sorting shifting easier insert item list
The size of array is restricted to declaration. Insertion or Deletion of values in middle of array is not possible.,5.0,1.0,the size of array is restricted to declaration insertion or deletion of values in middle of array is not possible,"['size', 'array', 'restricted', 'declaration', 'insertion', 'deletion', 'values', 'middle', 'array', 'possible']",size array restrict declar insert delet valu middl array possibl,size array restricted declaration insertion deletion value middle array possible
Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node.,5.0,1.0,array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node,"['array', 'retrieve', 'memory', 'place', 'list', 'link', 'list', 'traverse', 'individual', 'node']",array retriev memori place list link list travers individu node,array retrieve memory place list link list traverse individual node
"Arrays require less memory than linked lists and allow direct access to a specified item. Also, insertion and deletion in arrays does not require a list traversal.",4.5,1.0,arrays require less memory than linked lists and allow direct access to a specified item also insertion and deletion in arrays does not require a list traversal,"['arrays', 'require', 'less', 'memory', 'linked', 'lists', 'allow', 'direct', 'access', 'specified', 'item', 'also', 'insertion', 'deletion', 'arrays', 'require', 'list', 'traversal']",array requir less memori link list allow direct access specifi item also insert delet array requir list travers,array require le memory linked list allow direct access specified item also insertion deletion array require list traversal
"Access to a particular element is very fast, because its location in memory can be determined mathematically and accessed directly.",5.0,1.0,access to a particular element is very fast because its location in memory can be determined mathematically and accessed directly,"['access', 'particular', 'element', 'fast', 'location', 'memory', 'determined', 'mathematically', 'accessed', 'directly']",access particular element fast locat memori determin mathemat access directli,access particular element fast location memory determined mathematically accessed directly
Arrays are good for random access and good for sequential access which are both in constant time. Where linked lists are linear for random access. Arrays are faster in this case.,5.0,1.0,arrays are good for random access and good for sequential access which are both in constant time where linked lists are linear for random access arrays are faster in this case,"['arrays', 'good', 'random', 'access', 'good', 'sequential', 'access', 'constant', 'time', 'linked', 'lists', 'linear', 'random', 'access', 'arrays', 'faster', 'case']",array good random access good sequenti access constant time link list linear random access array faster case,array good random access good sequential access constant time linked list linear random access array faster case
"An array is capable of accessing any part of that array based on the index. The link list must be traversed from the beginning or the end, that is, data can only be accessed if it is adjacent to the previous or next nodes.",5.0,1.0,an array is capable of accessing any part of that array based on the index the link list must be traversed from the beginning or the end that is data can only be accessed if it is adjacent to the previous or next nodes,"['array', 'capable', 'accessing', 'part', 'array', 'based', 'index', 'link', 'list', 'must', 'traversed', 'beginning', 'end', 'data', 'accessed', 'adjacent', 'previous', 'next', 'nodes']",array capabl access part array base index link list must travers begin end data access adjac previou next node,array capable accessing part array based index link list must traversed beginning end data accessed adjacent previous next node
"On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.",5.0,1.0,on the other hand arrays allow random access while linked lists allow only sequential access to elements singly-linked lists in fact can only be traversed in one direction,"['hand', 'arrays', 'allow', 'random', 'access', 'linked', 'lists', 'allow', 'sequential', 'access', 'elements', 'singly-linked', 'lists', 'fact', 'traversed', 'one', 'direction']",hand array allow random access link list allow sequenti access element singly-link list fact travers one direct,hand array allow random access linked list allow sequential access element singly-linked list fact traversed one direction
You have to keep up with the head of the list.,2.0,0.0,you have to keep up with the head of the list,"['keep', 'head', 'list']",keep head list,keep head list
Arrays are easier to implement and require less memory,3.5,0.0,arrays are easier to implement and require less memory,"['arrays', 'easier', 'implement', 'require', 'less', 'memory']",array easier implement requir less memori,array easier implement require le memory
Linked list has an increase complexity of the implementation. The linked list has an array that keeps growing which leads to a increase in memory.,2.5,0.0,linked list has an increase complexity of the implementation the linked list has an array that keeps growing which leads to a increase in memory,"['linked', 'list', 'increase', 'complexity', 'implementation', 'linked', 'list', 'array', 'keeps', 'growing', 'leads', 'increase', 'memory']",link list increas complex implement link list array keep grow lead increas memori,linked list increase complexity implementation linked list array keep growing lead increase memory
You do not have to iterate through the entire list to access elements.,4.5,1.0,you do not have to iterate through the entire list to access elements,"['iterate', 'entire', 'list', 'access', 'elements']",iter entir list access element,iterate entire list access element
you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data.,3.0,0.0,you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data,"['go', 'forwards', 'backwards', 'point', 'piece', 'data', 'given', 'time', 'linked', 'lists', 'point', 'next', 'piece', 'data']",go forward backward point piec data given time link list point next piec data,go forward backwards point piece data given time linked list point next piece data
Take up less memory and are contiguously stored,4.0,1.0,take up less memory and are contiguously stored,"['take', 'less', 'memory', 'contiguously', 'stored']",take less memori contigu store,take le memory contiguously stored
"Arrays, being fixed, are less error prone.",2.0,0.0,arrays being fixed are less error prone,"['arrays', 'fixed', 'less', 'error', 'prone']",array fix less error prone,array fixed le error prone
"Arrays have a set list of values. Meaning you can pick a spot in the array such as a [7] picks the 8th spot in the array. With linked lists you have to keep track with pointers if you want to take specific nodes out, otherwise you must traverse the entire list.",5.0,1.0,arrays have a set list of values meaning you can pick a spot in the array such as a 7 picks the 8th spot in the array with linked lists you have to keep track with pointers if you want to take specific nodes out otherwise you must traverse the entire list,"['arrays', 'set', 'list', 'values', 'meaning', 'pick', 'spot', 'array', '7', 'picks', '8th', 'spot', 'array', 'linked', 'lists', 'keep', 'track', 'pointers', 'want', 'take', 'specific', 'nodes', 'otherwise', 'must', 'traverse', 'entire', 'list']",array set list valu mean pick spot array 7 pick 8th spot array link list keep track pointer want take specif node otherwis must travers entir list,array set list value meaning pick spot array 7 pick 8th spot array linked list keep track pointer want take specific node otherwise must traverse entire list
"direct access to elements, and speed, linked lists have increased search times to access elements even if the list is sorted.like getting the last element without a pointer directly to the end of the list.",4.5,1.0,direct access to elements and speed linked lists have increased search times to access elements even if the list is sortedlike getting the last element without a pointer directly to the end of the list,"['direct', 'access', 'elements', 'speed', 'linked', 'lists', 'increased', 'search', 'times', 'access', 'elements', 'even', 'list', 'sortedlike', 'getting', 'last', 'element', 'without', 'pointer', 'directly', 'end', 'list']",direct access element speed link list increas search time access element even list sortedlik get last element without pointer directli end list,direct access element speed linked list increased search time access element even list sortedlike getting last element without pointer directly end list
Array items are accessed directly with equal access time,5.0,1.0,array items are accessed directly with equal access time,"['array', 'items', 'accessed', 'directly', 'equal', 'access', 'time']",array item access directli equal access time,array item accessed directly equal access time
Array-bases implementations require less memory than a pointer-bases one.,3.5,0.0,array-bases implementations require less memory than a pointer-bases one,"['array-bases', 'implementations', 'require', 'less', 'memory', 'pointer-bases', 'one']",array-bas implement requir less memori pointer-bas one,array-bases implementation require le memory pointer-bases one
You can access specific elements quickly in an array. In a linked list you must traverse the list to get access the same element.,5.0,1.0,you can access specific elements quickly in an array in a linked list you must traverse the list to get access the same element,"['access', 'specific', 'elements', 'quickly', 'array', 'linked', 'list', 'must', 'traverse', 'list', 'get', 'access', 'element']",access specif element quickli array link list must travers list get access element,access specific element quickly array linked list must traverse list get access element
link lists only allow sequential access where arrays allow random access,4.5,1.0,link lists only allow sequential access where arrays allow random access,"['link', 'lists', 'allow', 'sequential', 'access', 'arrays', 'allow', 'random', 'access']",link list allow sequenti access array allow random access,link list allow sequential access array allow random access
"Any entitiy in an array may accessed immediately, whereas a linked list must be traversed one item at a time because each object only points adjacent objects",5.0,1.0,any entitiy in an array may accessed immediately whereas a linked list must be traversed one item at a time because each object only points adjacent objects,"['entitiy', 'array', 'may', 'accessed', 'immediately', 'whereas', 'linked', 'list', 'must', 'traversed', 'one', 'item', 'time', 'object', 'points', 'adjacent', 'objects']",entitiy array may access immedi wherea link list must travers one item time object point adjac object,entitiy array may accessed immediately whereas linked list must traversed one item time object point adjacent object
Array based implementation requires less memory than lined lists based implementation,3.5,0.0,array based implementation requires less memory than lined lists based implementation,"['array', 'based', 'implementation', 'requires', 'less', 'memory', 'lined', 'lists', 'based', 'implementation']",array base implement requir less memori line list base implement,array based implementation requires le memory lined list based implementation
Array-based implementations require less memory than a pointer-based ones,3.5,0.0,array-based implementations require less memory than a pointer-based ones,"['array-based', 'implementations', 'require', 'less', 'memory', 'pointer-based', 'ones']",array-bas implement requir less memori pointer-bas one,array-based implementation require le memory pointer-based one
"You can go up and down an array, but you can only go one direction while traversing a linked list.",3.0,0.0,you can go up and down an array but you can only go one direction while traversing a linked list,"['go', 'array', 'go', 'one', 'direction', 'traversing', 'linked', 'list']",go array go one direct travers link list,go array go one direction traversing linked list
"arrays allow for the random access of any item cotained a any time, linked lists must be gone through toget to the desired item",5.0,1.0,arrays allow for the random access of any item cotained a any time linked lists must be gone through toget to the desired item,"['arrays', 'allow', 'random', 'access', 'item', 'cotained', 'time', 'linked', 'lists', 'must', 'gone', 'toget', 'desired', 'item']",array allow random access item cotain time link list must gone toget desir item,array allow random access item cotained time linked list must gone toget desired item
"In arrays you have direct access to each element, but in linked lists you have to traverse the list up to the element that you need.",5.0,1.0,in arrays you have direct access to each element but in linked lists you have to traverse the list up to the element that you need,"['arrays', 'direct', 'access', 'element', 'linked', 'lists', 'traverse', 'list', 'element', 'need']",array direct access element link list travers list element need,array direct access element linked list traverse list element need
"Array size is fixed. But Linked is not fixed, data is also accessed quicker in array list, also memory requirement is less and no pointers required. Arrays have random access and less overheads compared to Linked list have sequential access only with too much overheads and no cache memory support. On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.",5.0,1.0,array size is fixed but linked is not fixed data is also accessed quicker in array list also memory requirement is less and no pointers required arrays have random access and less overheads compared to linked list have sequential access only with too much overheads and no cache memory support on the other hand arrays allow random access while linked lists allow only sequential access to elements singly-linked lists in fact can only be traversed in one direction,"['array', 'size', 'fixed', 'linked', 'fixed', 'data', 'also', 'accessed', 'quicker', 'array', 'list', 'also', 'memory', 'requirement', 'less', 'pointers', 'required', 'arrays', 'random', 'access', 'less', 'overheads', 'compared', 'linked', 'list', 'sequential', 'access', 'much', 'overheads', 'cache', 'memory', 'support', 'hand', 'arrays', 'allow', 'random', 'access', 'linked', 'lists', 'allow', 'sequential', 'access', 'elements', 'singly-linked', 'lists', 'fact', 'traversed', 'one', 'direction']",array size fix link fix data also access quicker array list also memori requir less pointer requir array random access less overhead compar link list sequenti access much overhead cach memori support hand array allow random access link list allow sequenti access element singly-link list fact travers one direct,array size fixed linked fixed data also accessed quicker array list also memory requirement le pointer required array random access le overhead compared linked list sequential access much overhead cache memory support hand array allow random access linked list allow sequential access element singly-linked list fact traversed one direction
They are passed by reference because you want the function to change the pointer,4.5,1.0,they are passed by reference because you want the function to change the pointer,"['passed', 'reference', 'want', 'function', 'change', 'pointer']",pass refer want function chang pointer,passed reference want function change pointer
Linked lists are passed as arguments to a function by passing the head pointer of the list by reference.,5.0,1.0,linked lists are passed as arguments to a function by passing the head pointer of the list by reference,"['linked', 'lists', 'passed', 'arguments', 'function', 'passing', 'head', 'pointer', 'list', 'reference']",link list pass argument function pass head pointer list refer,linked list passed argument function passing head pointer list reference
minus A function with access to a linked list 's head pointer has access to the entire list. Pass the head ponter to a function as a reference argument.,5.0,1.0,minus a function with access to a linked list s head pointer has access to the entire list pass the head ponter to a function as a reference argument,"['minus', 'function', 'access', 'linked', 'list', 'head', 'pointer', 'access', 'entire', 'list', 'pass', 'head', 'ponter', 'function', 'reference', 'argument']",minu function access link list head pointer access entir list pass head ponter function refer argument,minus function access linked list head pointer access entire list pas head ponter function reference argument
By using a node.,2.5,0.0,by using a node,"['using', 'node']",use node,using node
Pass-by-reference,5.0,1.0,pass-by-reference,['pass-by-reference'],pass-by-refer,pass-by-reference
you send a pointer to an object of the LinkedList class,2.5,0.0,you send a pointer to an object of the linkedlist class,"['send', 'pointer', 'object', 'linkedlist', 'class']",send pointer object linkedlist class,send pointer object linkedlist class
Passed as a pointer to the head.,4.0,1.0,passed as a pointer to the head,"['passed', 'pointer', 'head']",pass pointer head,passed pointer head
Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list,4.5,1.0,passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list,"['passing', 'head', 'pointer', 'linked', 'list', 'function', 'gives', 'function', 'access', 'nodes', 'linked', 'list']",pass head pointer link list function give function access node link list,passing head pointer linked list function give function access node linked list
You have to pass the head pointer to a function since it has access to the entire list.,4.0,1.0,you have to pass the head pointer to a function since it has access to the entire list,"['pass', 'head', 'pointer', 'function', 'since', 'access', 'entire', 'list']",pass head pointer function sinc access entir list,pas head pointer function since access entire list
You pass the head pointer to a function as a reference argument.,5.0,1.0,you pass the head pointer to a function as a reference argument,"['pass', 'head', 'pointer', 'function', 'reference', 'argument']",pass head pointer function refer argument,pas head pointer function reference argument
not answered,0.0,0.0,not answered,['answered'],answer,answered
passes a pointer to a linked list object,2.5,0.0,passes a pointer to a linked list object,"['passes', 'pointer', 'linked', 'list', 'object']",pass pointer link list object,pass pointer linked list object
"The linked list object contains the head, through which the other elements are accessible.",3.5,0.0,the linked list object contains the head through which the other elements are accessible,"['linked', 'list', 'object', 'contains', 'head', 'elements', 'accessible']",link list object contain head element access,linked list object contains head element accessible
By the head of the list. It takes the head address and traverses from there on in.,4.0,1.0,by the head of the list it takes the head address and traverses from there on in,"['head', 'list', 'takes', 'head', 'address', 'traverses']",head list take head address travers,head list take head address traverse
as a pointer node.,3.0,0.0,as a pointer node,"['pointer', 'node']",pointer node,pointer node
A method with access to a linked list 's head pointer as access to the entire list,4.0,1.0,a method with access to a linked list s head pointer as access to the entire list,"['method', 'access', 'linked', 'list', 'head', 'pointer', 'access', 'entire', 'list']",method access link list head pointer access entir list,method access linked list head pointer access entire list
A function with access to a linked list 's head pointer has access to the entire list. Pass the head pointer to a function as a reference argument,5.0,1.0,a function with access to a linked list s head pointer has access to the entire list pass the head pointer to a function as a reference argument,"['function', 'access', 'linked', 'list', 'head', 'pointer', 'access', 'entire', 'list', 'pass', 'head', 'pointer', 'function', 'reference', 'argument']",function access link list head pointer access entir list pass head pointer function refer argument,function access linked list head pointer access entire list pas head pointer function reference argument
the head pointer is passed to a function as a reference argument.,5.0,1.0,the head pointer is passed to a function as a reference argument,"['head', 'pointer', 'passed', 'function', 'reference', 'argument']",head pointer pass function refer argument,head pointer passed function reference argument
the pointer to the first element is passed to a function,4.0,1.0,the pointer to the first element is passed to a function,"['pointer', 'first', 'element', 'passed', 'function']",pointer first element pass function,pointer first element passed function
"linked lists are passed by reference, specificly the Head pointer",5.0,1.0,linked lists are passed by reference specificly the head pointer,"['linked', 'lists', 'passed', 'reference', 'specificly', 'head', 'pointer']",link list pass refer specificli head pointer,linked list passed reference specificly head pointer
Pass the head pointer to a function as a reference argument,5.0,1.0,pass the head pointer to a function as a reference argument,"['pass', 'head', 'pointer', 'function', 'reference', 'argument']",pass head pointer function refer argument,pas head pointer function reference argument
by refrenece,5.0,1.0,by refrenece,['refrenece'],refrenec,refrenece
By passing the head pointer and going through the list as needed inside the function.,4.0,1.0,by passing the head pointer and going through the list as needed inside the function,"['passing', 'head', 'pointer', 'going', 'list', 'needed', 'inside', 'function']",pass head pointer go list need insid function,passing head pointer going list needed inside function
linked lists are passed by using pointers,3.0,0.0,linked lists are passed by using pointers,"['linked', 'lists', 'passed', 'using', 'pointers']",link list pass use pointer,linked list passed using pointer
the head object is passed to the function,3.5,0.0,the head object is passed to the function,"['head', 'object', 'passed', 'function']",head object pass function,head object passed function
"Linked lists permit insertion and removal of nodes at any point in the list in constant time, [1] but do not allow random access.",1.5,0.0,linked lists permit insertion and removal of nodes at any point in the list in constant time 1 but do not allow random access,"['linked', 'lists', 'permit', 'insertion', 'removal', 'nodes', 'point', 'list', 'constant', 'time', '1', 'allow', 'random', 'access']",link list permit insert remov node point list constant time 1 allow random access,linked list permit insertion removal node point list constant time 1 allow random access
They are passed by reference because you want the function to change the pointer,0.5,0.0,they are passed by reference because you want the function to change the pointer,"['passed', 'reference', 'want', 'function', 'change', 'pointer']",pass refer want function chang pointer,passed reference want function change pointer
"In a circular linked list, every node has a successor which means that the last node 's successor is the head or first node.",5.0,1.0,in a circular linked list every node has a successor which means that the last node s successor is the head or first node,"['circular', 'linked', 'list', 'every', 'node', 'successor', 'means', 'last', 'node', 'successor', 'head', 'first', 'node']",circular link list everi node successor mean last node successor head first node,circular linked list every node successor mean last node successor head first node
A circular linked list is a linked list that links items in a continuous circle. This allows the full list to be traversed by starting at any item in the list; a fixed head or tail is not required.,4.5,1.0,a circular linked list is a linked list that links items in a continuous circle this allows the full list to be traversed by starting at any item in the list a fixed head or tail is not required,"['circular', 'linked', 'list', 'linked', 'list', 'links', 'items', 'continuous', 'circle', 'allows', 'full', 'list', 'traversed', 'starting', 'item', 'list', 'fixed', 'head', 'tail', 'required']",circular link list link list link item continu circl allow full list travers start item list fix head tail requir,circular linked list linked list link item continuous circle allows full list traversed starting item list fixed head tail required
"In a circular linked list, the last node points to the first node.",5.0,1.0,in a circular linked list the last node points to the first node,"['circular', 'linked', 'list', 'last', 'node', 'points', 'first', 'node']",circular link list last node point first node,circular linked list last node point first node
"On a circular linked list, the end element points to the head, thus making the circle. A basic link list has nothing pointing to the head, and the last element points to null.",5.0,1.0,on a circular linked list the end element points to the head thus making the circle a basic link list has nothing pointing to the head and the last element points to null,"['circular', 'linked', 'list', 'end', 'element', 'points', 'head', 'thus', 'making', 'circle', 'basic', 'link', 'list', 'nothing', 'pointing', 'head', 'last', 'element', 'points', 'null']",circular link list end element point head thu make circl basic link list noth point head last element point null,circular linked list end element point head thus making circle basic link list nothing pointing head last element point null
the circular linked list 's last node points to the begining of the list while a standard linked list points to NULL,5.0,1.0,the circular linked list s last node points to the begining of the list while a standard linked list points to null,"['circular', 'linked', 'list', 'last', 'node', 'points', 'begining', 'list', 'standard', 'linked', 'list', 'points', 'null']",circular link list last node point begin list standard link list point null,circular linked list last node point begining list standard linked list point null
The last item in the list points to the head,5.0,1.0,the last item in the list points to the head,"['last', 'item', 'list', 'points', 'head']",last item list point head,last item list point head
"In a circular linked list, the last node points back to the first node, there is no NULL",5.0,1.0,in a circular linked list the last node points back to the first node there is no null,"['circular', 'linked', 'list', 'last', 'node', 'points', 'back', 'first', 'node', 'null']",circular link list last node point back first node null,circular linked list last node point back first node null
"Circular linked lists are most useful for describing naturally circular structures, and have the advantage of regular structure and being able to traverse the list starting at any point.",2.5,0.0,circular linked lists are most useful for describing naturally circular structures and have the advantage of regular structure and being able to traverse the list starting at any point,"['circular', 'linked', 'lists', 'useful', 'describing', 'naturally', 'circular', 'structures', 'advantage', 'regular', 'structure', 'able', 'traverse', 'list', 'starting', 'point']",circular link list use describ natur circular structur advantag regular structur abl travers list start point,circular linked list useful describing naturally circular structure advantage regular structure able traverse list starting point
A circular linked list has the last node point back to the head of the linked list.,5.0,1.0,a circular linked list has the last node point back to the head of the linked list,"['circular', 'linked', 'list', 'last', 'node', 'point', 'back', 'head', 'linked', 'list']",circular link list last node point back head link list,circular linked list last node point back head linked list
Basic linked list points to a NULL at the end and circular points to the head at the end.,5.0,1.0,basic linked list points to a null at the end and circular points to the head at the end,"['basic', 'linked', 'list', 'points', 'null', 'end', 'circular', 'points', 'head', 'end']",basic link list point null end circular point head end,basic linked list point null end circular point head end
in a circular linked list the the last item points to the first item.,5.0,1.0,in a circular linked list the the last item points to the first item,"['circular', 'linked', 'list', 'last', 'item', 'points', 'first', 'item']",circular link list last item point first item,circular linked list last item point first item
"The circular linked list 's tail points to the head, whereas the basic linked list 's tail points to a NULL.",5.0,1.0,the circular linked list s tail points to the head whereas the basic linked list s tail points to a null,"['circular', 'linked', 'list', 'tail', 'points', 'head', 'whereas', 'basic', 'linked', 'list', 'tail', 'points', 'null']",circular link list tail point head wherea basic link list tail point null,circular linked list tail point head whereas basic linked list tail point null
a basic linked list has an end with a null value where a circular linked list has a pointer from the end to the beginning,5.0,1.0,a basic linked list has an end with a null value where a circular linked list has a pointer from the end to the beginning,"['basic', 'linked', 'list', 'end', 'null', 'value', 'circular', 'linked', 'list', 'pointer', 'end', 'beginning']",basic link list end null valu circular link list pointer end begin,basic linked list end null value circular linked list pointer end beginning
"how to determine the end of the list, in basic linked lists the last element links to a null pointer, while circular linked lists link to the head element at the end.",5.0,1.0,how to determine the end of the list in basic linked lists the last element links to a null pointer while circular linked lists link to the head element at the end,"['determine', 'end', 'list', 'basic', 'linked', 'lists', 'last', 'element', 'links', 'null', 'pointer', 'circular', 'linked', 'lists', 'link', 'head', 'element', 'end']",determin end list basic link list last element link null pointer circular link list link head element end,determine end list basic linked list last element link null pointer circular linked list link head element end
"No Node in a circular linked list contains NULL, the last Node points pack to a Node within the list.",5.0,1.0,no node in a circular linked list contains null the last node points pack to a node within the list,"['node', 'circular', 'linked', 'list', 'contains', 'null', 'last', 'node', 'points', 'pack', 'node', 'within', 'list']",node circular link list contain null last node point pack node within list,node circular linked list contains null last node point pack node within list
"The difference between a circular linked list and a basic linked list is that a circular linked list, the last node references the first node. Every node in a circular linked list has a successor and no node in a circular linked list contains NULL.",5.0,1.0,the difference between a circular linked list and a basic linked list is that a circular linked list the last node references the first node every node in a circular linked list has a successor and no node in a circular linked list contains null,"['difference', 'circular', 'linked', 'list', 'basic', 'linked', 'list', 'circular', 'linked', 'list', 'last', 'node', 'references', 'first', 'node', 'every', 'node', 'circular', 'linked', 'list', 'successor', 'node', 'circular', 'linked', 'list', 'contains', 'null']",differ circular link list basic link list circular link list last node refer first node everi node circular link list successor node circular link list contain null,difference circular linked list basic linked list circular linked list last node reference first node every node circular linked list successor node circular linked list contains null
No node in a circular linked list contains NULL.,3.5,0.0,no node in a circular linked list contains null,"['node', 'circular', 'linked', 'list', 'contains', 'null']",node circular link list contain null,node circular linked list contains null
in a circular linked list the last element points to the head of the list,5.0,1.0,in a circular linked list the last element points to the head of the list,"['circular', 'linked', 'list', 'last', 'element', 'points', 'head', 'list']",circular link list last element point head list,circular linked list last element point head list
"In a regular linked list the last object points to NULL. In a circular linked list, the last object points back to the beginning of the list",5.0,1.0,in a regular linked list the last object points to null in a circular linked list the last object points back to the beginning of the list,"['regular', 'linked', 'list', 'last', 'object', 'points', 'null', 'circular', 'linked', 'list', 'last', 'object', 'points', 'back', 'beginning', 'list']",regular link list last object point null circular link list last object point back begin list,regular linked list last object point null circular linked list last object point back beginning list
"In circular linked list each node has successor, no node contains NULL, while in basic linked list last node contain NULL.",3.0,0.0,in circular linked list each node has successor no node contains null while in basic linked list last node contain null,"['circular', 'linked', 'list', 'node', 'successor', 'node', 'contains', 'null', 'basic', 'linked', 'list', 'last', 'node', 'contain', 'null']",circular link list node successor node contain null basic link list last node contain null,circular linked list node successor node contains null basic linked list last node contain null
"in a circular linked lists, the last element points to the first",5.0,1.0,in a circular linked lists the last element points to the first,"['circular', 'linked', 'lists', 'last', 'element', 'points', 'first']",circular link list last element point first,circular linked list last element point first
"A circular linked list does not have a last element. Instead, it is last item points to the head of the list.",5.0,1.0,a circular linked list does not have a last element instead it is last item points to the head of the list,"['circular', 'linked', 'list', 'last', 'element', 'instead', 'last', 'item', 'points', 'head', 'list']",circular link list last element instead last item point head list,circular linked list last element instead last item point head list
"in a circular linked list, the last node contains a pointer that goes back to the first node; in a basic linked list, the last node contains a null pointer",5.0,1.0,in a circular linked list the last node contains a pointer that goes back to the first node in a basic linked list the last node contains a null pointer,"['circular', 'linked', 'list', 'last', 'node', 'contains', 'pointer', 'goes', 'back', 'first', 'node', 'basic', 'linked', 'list', 'last', 'node', 'contains', 'null', 'pointer']",circular link list last node contain pointer goe back first node basic link list last node contain null pointer,circular linked list last node contains pointer go back first node basic linked list last node contains null pointer
"in a circular linked list, the last object is linked back to the first object.",5.0,1.0,in a circular linked list the last object is linked back to the first object,"['circular', 'linked', 'list', 'last', 'object', 'linked', 'back', 'first', 'object']",circular link list last object link back first object,circular linked list last object linked back first object
"In the case of a non circular link list, if you are at the last node of the list and u want to move to first u need to go to one, step back till u reach to first. But in circular link list from last to first you need to make only one move. In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward.",3.5,0.0,in the case of a non circular link list if you are at the last node of the list and u want to move to first u need to go to one step back till u reach to first but in circular link list from last to first you need to make only one move in a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward,"['case', 'non', 'circular', 'link', 'list', 'last', 'node', 'list', 'u', 'want', 'move', 'first', 'u', 'need', 'go', 'one', 'step', 'back', 'till', 'u', 'reach', 'first', 'circular', 'link', 'list', 'last', 'first', 'need', 'make', 'one', 'move', 'single', 'link', 'list', 'u', 'move', 'one', 'direction', 'double', 'link', 'list', 'u', 'move', 'direction', 'back', 'forward', 'forward']",case non circular link list last node list u want move first u need go one step back till u reach first circular link list last first need make one move singl link list u move one direct doubl link list u move direct back forward forward,case non circular link list last node list u want move first u need go one step back till u reach first circular link list last first need make one move single link list u move one direction double link list u move direction back forward forward
they can traverse in both directions,3.5,0.0,they can traverse in both directions,"['traverse', 'directions']",travers direct,traverse direction
In a doubly linked list you can delete a node without having to traverse the list.,4.5,1.0,in a doubly linked list you can delete a node without having to traverse the list,"['doubly', 'linked', 'list', 'delete', 'node', 'without', 'traverse', 'list']",doubli link list delet node without travers list,doubly linked list delete node without traverse list
A doubly-linked list allows you to delete a node without traversing the list to establish a trailing pointer.,4.5,1.0,a doubly-linked list allows you to delete a node without traversing the list to establish a trailing pointer,"['doubly-linked', 'list', 'allows', 'delete', 'node', 'without', 'traversing', 'list', 'establish', 'trailing', 'pointer']",doubly-link list allow delet node without travers list establish trail pointer,doubly-linked list allows delete node without traversing list establish trailing pointer
A doubly linked list allows you to traverse the list in either direction. Each node points to its successor as well as to its predecessor.,3.5,0.0,a doubly linked list allows you to traverse the list in either direction each node points to its successor as well as to its predecessor,"['doubly', 'linked', 'list', 'allows', 'traverse', 'list', 'either', 'direction', 'node', 'points', 'successor', 'well', 'predecessor']",doubli link list allow travers list either direct node point successor well predecessor,doubly linked list allows traverse list either direction node point successor well predecessor
"Doubly-linked lists can traverse backwards, though they still cannot access data at any point in the list, it can be shorter to traverse backwards.",3.5,0.0,doubly-linked lists can traverse backwards though they still cannot access data at any point in the list it can be shorter to traverse backwards,"['doubly-linked', 'lists', 'traverse', 'backwards', 'though', 'still', 'access', 'data', 'point', 'list', 'shorter', 'traverse', 'backwards']",doubly-link list travers backward though still access data point list shorter travers backward,doubly-linked list traverse backwards though still access data point list shorter traverse backwards
you can traverse the list from front to back and back to front,3.5,0.0,you can traverse the list from front to back and back to front,"['traverse', 'list', 'front', 'back', 'back', 'front']",travers list front back back front,traverse list front back back front
You can traverse the list in reverse.,3.5,0.0,you can traverse the list in reverse,"['traverse', 'list', 'reverse']",travers list revers,traverse list reverse
Doubly linked lists can be traversed in both directions,3.5,0.0,doubly linked lists can be traversed in both directions,"['doubly', 'linked', 'lists', 'traversed', 'directions']",doubli link list travers direct,doubly linked list traversed direction
"Double-linked lists require more space per node, and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions.",3.5,0.0,double-linked lists require more space per node and their elementary operations are more expensive but they are often easier to manipulate because they allow sequential access to the list in both directions,"['double-linked', 'lists', 'require', 'space', 'per', 'node', 'elementary', 'operations', 'expensive', 'often', 'easier', 'manipulate', 'allow', 'sequential', 'access', 'list', 'directions']",double-link list requir space per node elementari oper expens often easier manipul allow sequenti access list direct,double-linked list require space per node elementary operation expensive often easier manipulate allow sequential access list direction
You can traverse forwards and backwards through nodes.,3.5,0.0,you can traverse forwards and backwards through nodes,"['traverse', 'forwards', 'backwards', 'nodes']",travers forward backward node,traverse forward backwards node
You can point both forwards and backwards,3.5,0.0,you can point both forwards and backwards,"['point', 'forwards', 'backwards']",point forward backward,point forward backwards
You can go backwards in the linked list and access previous data easier without having to keep track of the previous item,4.0,1.0,you can go backwards in the linked list and access previous data easier without having to keep track of the previous item,"['go', 'backwards', 'linked', 'list', 'access', 'previous', 'data', 'easier', 'without', 'keep', 'track', 'previous', 'item']",go backward link list access previou data easier without keep track previou item,go backwards linked list access previous data easier without keep track previous item
Doubly linked lists allow backward movement through the nodes.,3.5,0.0,doubly linked lists allow backward movement through the nodes,"['doubly', 'linked', 'lists', 'allow', 'backward', 'movement', 'nodes']",doubli link list allow backward movement node,doubly linked list allow backward movement node
"they have double pointers, so each node can point forwards or backwards. Making it a little easer to get to where you need.",3.5,0.0,they have double pointers so each node can point forwards or backwards making it a little easer to get to where you need,"['double', 'pointers', 'node', 'point', 'forwards', 'backwards', 'making', 'little', 'easer', 'get', 'need']",doubl pointer node point forward backward make littl easer get need,double pointer node point forward backwards making little easer get need
ability to backtrack through a list.,3.0,0.0,ability to backtrack through a list,"['ability', 'backtrack', 'list']",abil backtrack list,ability backtrack list
You can move forwards and backwards in the double-linked list. Basic only moves forwards.,3.5,0.0,you can move forwards and backwards in the double-linked list basic only moves forwards,"['move', 'forwards', 'backwards', 'double-linked', 'list', 'basic', 'moves', 'forwards']",move forward backward double-link list basic move forward,move forward backwards double-linked list basic move forward
The advantage is that each node points to bothe its predecessor and its successor. There are no special cases for insertion and deletion.,4.5,1.0,the advantage is that each node points to bothe its predecessor and its successor there are no special cases for insertion and deletion,"['advantage', 'node', 'points', 'bothe', 'predecessor', 'successor', 'special', 'cases', 'insertion', 'deletion']",advantag node point both predecessor successor special case insert delet,advantage node point bothe predecessor successor special case insertion deletion
each node points to both its predecessor and its successor.,3.5,0.0,each node points to both its predecessor and its successor,"['node', 'points', 'predecessor', 'successor']",node point predecessor successor,node point predecessor successor
a doubly linked list has pointers in both directions. this allows for access from back to front as well as front to back,4.0,1.0,a doubly linked list has pointers in both directions this allows for access from back to front as well as front to back,"['doubly', 'linked', 'list', 'pointers', 'directions', 'allows', 'access', 'back', 'front', 'well', 'front', 'back']",doubli link list pointer direct allow access back front well front back,doubly linked list pointer direction allows access back front well front back
"A doubly linked list can be traversed either direction, while a normal linked list can only be traversed from start to finish",3.5,0.0,a doubly linked list can be traversed either direction while a normal linked list can only be traversed from start to finish,"['doubly', 'linked', 'list', 'traversed', 'either', 'direction', 'normal', 'linked', 'list', 'traversed', 'start', 'finish']",doubli link list travers either direct normal link list travers start finish,doubly linked list traversed either direction normal linked list traversed start finish
"Double Linked list are often easier to manipulate, because they allow sequential access to the list in both direction",4.0,1.0,double linked list are often easier to manipulate because they allow sequential access to the list in both direction,"['double', 'linked', 'list', 'often', 'easier', 'manipulate', 'allow', 'sequential', 'access', 'list', 'direction']",doubl link list often easier manipul allow sequenti access list direct,double linked list often easier manipulate allow sequential access list direction
"given a node in the list, one can navigate easily in either direction",4.0,1.0,given a node in the list one can navigate easily in either direction,"['given', 'node', 'list', 'one', 'navigate', 'easily', 'either', 'direction']",given node list one navig easili either direct,given node list one navigate easily either direction
You can traverse the list both forward and backwards.,3.5,0.0,you can traverse the list both forward and backwards,"['traverse', 'list', 'forward', 'backwards']",travers list forward backward,traverse list forward backwards
a doubly linked list allows you to back up from a node rather than having to go through the entire list again,4.0,1.0,a doubly linked list allows you to back up from a node rather than having to go through the entire list again,"['doubly', 'linked', 'list', 'allows', 'back', 'node', 'rather', 'go', 'entire', 'list']",doubli link list allow back node rather go entir list,doubly linked list allows back node rather go entire list
Gives faster times for some operations such as insertion and deletion,5.0,1.0,gives faster times for some operations such as insertion and deletion,"['gives', 'faster', 'times', 'operations', 'insertion', 'deletion']",give faster time oper insert delet,give faster time operation insertion deletion
"The primary disadvantage of doubly linked lists are that1each node requires an extra pointer, requiring more space, and2the insertion or deletion of a node takes a bit longermore pointer operations.",2.0,0.0,the primary disadvantage of doubly linked lists are that1each node requires an extra pointer requiring more space and2the insertion or deletion of a node takes a bit longermore pointer operations,"['primary', 'disadvantage', 'doubly', 'linked', 'lists', 'that1each', 'node', 'requires', 'extra', 'pointer', 'requiring', 'space', 'and2the', 'insertion', 'deletion', 'node', 'takes', 'bit', 'longermore', 'pointer', 'operations']",primari disadvantag doubli link list that1each node requir extra pointer requir space and2th insert delet node take bit longermor pointer oper,primary disadvantage doubly linked list that1each node requires extra pointer requiring space and2the insertion deletion node take bit longermore pointer operation
they take up twice as much memory for each node,5.0,1.0,they take up twice as much memory for each node,"['take', 'twice', 'much', 'memory', 'node']",take twice much memori node,take twice much memory node
"In a doubly linked list, there are more pointers to set and the mechanics of inserting and deleting are more difficult. Also, the special cases at the beginning or end of the list are more complicated.",3.5,0.0,in a doubly linked list there are more pointers to set and the mechanics of inserting and deleting are more difficult also the special cases at the beginning or end of the list are more complicated,"['doubly', 'linked', 'list', 'pointers', 'set', 'mechanics', 'inserting', 'deleting', 'difficult', 'also', 'special', 'cases', 'beginning', 'end', 'list', 'complicated']",doubli link list pointer set mechan insert delet difficult also special case begin end list complic,doubly linked list pointer set mechanic inserting deleting difficult also special case beginning end list complicated
"There are more pointers to set, the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list.",4.0,1.0,there are more pointers to set the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list,"['pointers', 'set', 'mechanics', 'inserting', 'deleting', 'doubly', 'linked', 'list', 'bit', 'involved', 'singly', 'linked', 'list']",pointer set mechan insert delet doubli link list bit involv singli link list,pointer set mechanic inserting deleting doubly linked list bit involved singly linked list
Insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms.,3.0,0.0,insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms,"['insertion', 'deletion', 'doubly', 'linked', 'list', 'involved', 'singly', 'linked', 'list', 'leaving', 'room', 'error', 'complex', 'algorithms']",insert delet doubli link list involv singli link list leav room error complex algorithm,insertion deletion doubly linked list involved singly linked list leaving room error complex algorithm
Need more memory to store previous pointers.,5.0,1.0,need more memory to store previous pointers,"['need', 'memory', 'store', 'previous', 'pointers']",need memori store previou pointer,need memory store previous pointer
a node in a doubly linked list takes up more memory than a node in a singly linked list.,5.0,1.0,a node in a doubly linked list takes up more memory than a node in a singly linked list,"['node', 'doubly', 'linked', 'list', 'takes', 'memory', 'node', 'singly', 'linked', 'list']",node doubli link list take memori node singli link list,node doubly linked list take memory node singly linked list
You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting or deleting.,3.0,0.0,you have to keep up with where you are and you have to consider the predecessor and successor connections when inserting or deleting,"['keep', 'consider', 'predecessor', 'successor', 'connections', 'inserting', 'deleting']",keep consid predecessor successor connect insert delet,keep consider predecessor successor connection inserting deleting
"Each node requires an extra node, requires more memory, and is more difficult to insert and remove individual nodes",5.0,1.0,each node requires an extra node requires more memory and is more difficult to insert and remove individual nodes,"['node', 'requires', 'extra', 'node', 'requires', 'memory', 'difficult', 'insert', 'remove', 'individual', 'nodes']",node requir extra node requir memori difficult insert remov individu node,node requires extra node requires memory difficult insert remove individual node
"Double-linked lists require more space per node, and their elementary operations are more expensive",5.0,1.0,double-linked lists require more space per node and their elementary operations are more expensive,"['double-linked', 'lists', 'require', 'space', 'per', 'node', 'elementary', 'operations', 'expensive']",double-link list requir space per node elementari oper expens,double-linked list require space per node elementary operation expensive
More difficult to delete and create nodes.,3.0,0.0,more difficult to delete and create nodes,"['difficult', 'delete', 'create', 'nodes']",difficult delet creat node,difficult delete create node
They use more memory and you have to make 2 pointers and update 2 pointers each time you change the list.,5.0,1.0,they use more memory and you have to make 2 pointers and update 2 pointers each time you change the list,"['use', 'memory', 'make', '2', 'pointers', 'update', '2', 'pointers', 'time', 'change', 'list']",use memori make 2 pointer updat 2 pointer time chang list,use memory make 2 pointer update 2 pointer time change list
nodes take up more memory,5.0,1.0,nodes take up more memory,"['nodes', 'take', 'memory']",node take memori,node take memory
"Each node requires an extra pointerspace requirements increased, Insertion or deletion of a node takes a longermore pointer operations.",5.0,1.0,each node requires an extra pointerspace requirements increased insertion or deletion of a node takes a longermore pointer operations,"['node', 'requires', 'extra', 'pointerspace', 'requirements', 'increased', 'insertion', 'deletion', 'node', 'takes', 'longermore', 'pointer', 'operations']",node requir extra pointerspac requir increas insert delet node take longermor pointer oper,node requires extra pointerspace requirement increased insertion deletion node take longermore pointer operation
its a little more confusing. The special cases at the end and beginning become more difficult to do.,3.0,0.0,its a little more confusing the special cases at the end and beginning become more difficult to do,"['little', 'confusing', 'special', 'cases', 'end', 'beginning', 'become', 'difficult']",littl confus special case end begin becom difficult,little confusing special case end beginning become difficult
increased actions to add and remove elements to the linked list.,3.0,0.0,increased actions to add and remove elements to the linked list,"['increased', 'actions', 'add', 'remove', 'elements', 'linked', 'list']",increas action add remov element link list,increased action add remove element linked list
"Inserting and deleting in a double-linked list is more involved, and has special cases at the beginning and end.",3.0,0.0,inserting and deleting in a double-linked list is more involved and has special cases at the beginning and end,"['inserting', 'deleting', 'double-linked', 'list', 'involved', 'special', 'cases', 'beginning', 'end']",insert delet double-link list involv special case begin end,inserting deleting double-linked list involved special case beginning end
The main disadvanate is that if hard to remove all items in the list.,2.0,0.0,the main disadvanate is that if hard to remove all items in the list,"['main', 'disadvanate', 'hard', 'remove', 'items', 'list']",main disadvan hard remov item list,main disadvanate hard remove item list
"each node requires an extra pointer, taking up more storage. insertions and deletions require more pointer operations.",5.0,1.0,each node requires an extra pointer taking up more storage insertions and deletions require more pointer operations,"['node', 'requires', 'extra', 'pointer', 'taking', 'storage', 'insertions', 'deletions', 'require', 'pointer', 'operations']",node requir extra pointer take storag insert delet requir pointer oper,node requires extra pointer taking storage insertion deletion require pointer operation
"in a doubly linked list there are twice as many pointers for each element, therefore more memory is used",5.0,1.0,in a doubly linked list there are twice as many pointers for each element therefore more memory is used,"['doubly', 'linked', 'list', 'twice', 'many', 'pointers', 'element', 'therefore', 'memory', 'used']",doubli link list twice mani pointer element therefor memori use,doubly linked list twice many pointer element therefore memory used
The process of adding and removing Nodes in a Doubly linked list is more complex than in a basic linked list,3.5,0.0,the process of adding and removing nodes in a doubly linked list is more complex than in a basic linked list,"['process', 'adding', 'removing', 'nodes', 'doubly', 'linked', 'list', 'complex', 'basic', 'linked', 'list']",process ad remov node doubli link list complex basic link list,process adding removing node doubly linked list complex basic linked list
"Double linked lists require more space per node, and their elementary operation are more expensive",5.0,1.0,double linked lists require more space per node and their elementary operation are more expensive,"['double', 'linked', 'lists', 'require', 'space', 'per', 'node', 'elementary', 'operation', 'expensive']",doubl link list requir space per node elementari oper expens,double linked list require space per node elementary operation expensive
"1-each node requires an extra pointer, requiring more space 2-the insertion or deletion of a node takes a bit longer, more pointer operations",5.0,1.0,1-each node requires an extra pointer requiring more space 2-the insertion or deletion of a node takes a bit longer more pointer operations,"['1-each', 'node', 'requires', 'extra', 'pointer', 'requiring', 'space', '2-the', 'insertion', 'deletion', 'node', 'takes', 'bit', 'longer', 'pointer', 'operations']",1-each node requir extra pointer requir space 2-the insert delet node take bit longer pointer oper,1-each node requires extra pointer requiring space 2-the insertion deletion node take bit longer pointer operation
It takes up twice the storage needed.,5.0,1.0,it takes up twice the storage needed,"['takes', 'twice', 'storage', 'needed']",take twice storag need,take twice storage needed
"using more pointers to enable the backward movement takes up more memory, having more pointers make it slightly more work to add or remove a node from the list",5.0,1.0,using more pointers to enable the backward movement takes up more memory having more pointers make it slightly more work to add or remove a node from the list,"['using', 'pointers', 'enable', 'backward', 'movement', 'takes', 'memory', 'pointers', 'make', 'slightly', 'work', 'add', 'remove', 'node', 'list']",use pointer enabl backward movement take memori pointer make slightli work add remov node list,using pointer enable backward movement take memory pointer make slightly work add remove node list
"increased memory requirements, slightly more complicated when modifying elements in the list",5.0,1.0,increased memory requirements slightly more complicated when modifying elements in the list,"['increased', 'memory', 'requirements', 'slightly', 'complicated', 'modifying', 'elements', 'list']",increas memori requir slightli complic modifi element list,increased memory requirement slightly complicated modifying element list
not answered,0.0,0.0,not answered,['answered'],answer,answered
A data structure for storing items which are to be accessed in last-in first-out order that can be implemented in three ways.,5.0,1.0,a data structure for storing items which are to be accessed in last-in first-out order that can be implemented in three ways,"['data', 'structure', 'storing', 'items', 'accessed', 'last-in', 'first-out', 'order', 'implemented', 'three', 'ways']",data structur store item access last-in first-out order implement three way,data structure storing item accessed last-in first-out order implemented three way
A stack is an abstract data type that is based on the principle that the last element inserted into the stack will be the first element removed from the stack.,5.0,1.0,a stack is an abstract data type that is based on the principle that the last element inserted into the stack will be the first element removed from the stack,"['stack', 'abstract', 'data', 'type', 'based', 'principle', 'last', 'element', 'inserted', 'stack', 'first', 'element', 'removed', 'stack']",stack abstract data type base principl last element insert stack first element remov stack,stack abstract data type based principle last element inserted stack first element removed stack
Stores a set of elements in a particular order.,2.0,0.0,stores a set of elements in a particular order,"['stores', 'set', 'elements', 'particular', 'order']",store set element particular order,store set element particular order
"An ADT whose most recently inserted item is the first item removed or retrieved. This property is called last in, first outLIFO. Items enter and leave a stack at its top.",5.0,1.0,an adt whose most recently inserted item is the first item removed or retrieved this property is called last in first outlifo items enter and leave a stack at its top,"['adt', 'whose', 'recently', 'inserted', 'item', 'first', 'item', 'removed', 'retrieved', 'property', 'called', 'last', 'first', 'outlifo', 'items', 'enter', 'leave', 'stack', 'top']",adt whose recent insert item first item remov retriev properti call last first outlifo item enter leav stack top,adt whose recently inserted item first item removed retrieved property called last first outlifo item enter leave stack top
A list in which only the topor last item addedcan be modified.,4.5,1.0,a list in which only the topor last item addedcan be modified,"['list', 'topor', 'last', 'item', 'addedcan', 'modified']",list topor last item addedcan modifi,list topor last item addedcan modified
a stack is a data structure that uses push to insert an item and pop to remove ad item. The stack use a last in first out structure for inserting and removing items.,5.0,1.0,a stack is a data structure that uses push to insert an item and pop to remove ad item the stack use a last in first out structure for inserting and removing items,"['stack', 'data', 'structure', 'uses', 'push', 'insert', 'item', 'pop', 'remove', 'ad', 'item', 'stack', 'use', 'last', 'first', 'structure', 'inserting', 'removing', 'items']",stack data structur use push insert item pop remov ad item stack use last first structur insert remov item,stack data structure us push insert item pop remove ad item stack use last first structure inserting removing item
A data structure that stores data using LIFO.,5.0,1.0,a data structure that stores data using lifo,"['data', 'structure', 'stores', 'data', 'using', 'lifo']",data structur store data use lifo,data structure store data using lifo
"A stack is similar to an array, but does not allow for random access. Stacks only allow a user to retrieve the last item put into the stack. Last in, fist out.",5.0,1.0,a stack is similar to an array but does not allow for random access stacks only allow a user to retrieve the last item put into the stack last in fist out,"['stack', 'similar', 'array', 'allow', 'random', 'access', 'stacks', 'allow', 'user', 'retrieve', 'last', 'item', 'put', 'stack', 'last', 'fist']",stack similar array allow random access stack allow user retriev last item put stack last fist,stack similar array allow random access stack allow user retrieve last item put stack last fist
Stores a set of elements in a particular order. Stack principle: LAST IN FIRST OUT. It means: the last element inserted is the first one to be removed.,5.0,1.0,stores a set of elements in a particular order stack principle last in first out it means the last element inserted is the first one to be removed,"['stores', 'set', 'elements', 'particular', 'order', 'stack', 'principle', 'last', 'first', 'means', 'last', 'element', 'inserted', 'first', 'one', 'removed']",store set element particular order stack principl last first mean last element insert first one remov,store set element particular order stack principle last first mean last element inserted first one removed
A stack is an ADT that stores a set of elements in a particular order.,2.5,0.0,a stack is an adt that stores a set of elements in a particular order,"['stack', 'adt', 'stores', 'set', 'elements', 'particular', 'order']",stack adt store set element particular order,stack adt store set element particular order
"a data type that stores a set of elements in a certain order, last in, first out.",5.0,1.0,a data type that stores a set of elements in a certain order last in first out,"['data', 'type', 'stores', 'set', 'elements', 'certain', 'order', 'last', 'first']",data type store set element certain order last first,data type store set element certain order last first
a data structure that moves elements in last in first out,5.0,1.0,a data structure that moves elements in last in first out,"['data', 'structure', 'moves', 'elements', 'last', 'first']",data structur move element last first,data structure move element last first
Stores a set of elements in a last in first out order.,5.0,1.0,stores a set of elements in a last in first out order,"['stores', 'set', 'elements', 'last', 'first', 'order']",store set element last first order,store set element last first order
A list that can be added to or removed from only from the top.,5.0,1.0,a list that can be added to or removed from only from the top,"['list', 'added', 'removed', 'top']",list ad remov top,list added removed top
"a stack is an Abstract data type which operates on a last in first out basis for storing a list of objects, and does not supportat least in the pure stackpeeking at a element without removing the rest of the stack first.",5.0,1.0,a stack is an abstract data type which operates on a last in first out basis for storing a list of objects and does not supportat least in the pure stackpeeking at a element without removing the rest of the stack first,"['stack', 'abstract', 'data', 'type', 'operates', 'last', 'first', 'basis', 'storing', 'list', 'objects', 'supportat', 'least', 'pure', 'stackpeeking', 'element', 'without', 'removing', 'rest', 'stack', 'first']",stack abstract data type oper last first basi store list object supportat least pure stackpeek element without remov rest stack first,stack abstract data type operates last first basis storing list object supportat least pure stackpeeking element without removing rest stack first
Stores a set of elements in a particular order based on the principle of Last In First OutLIFO.,5.0,1.0,stores a set of elements in a particular order based on the principle of last in first outlifo,"['stores', 'set', 'elements', 'particular', 'order', 'based', 'principle', 'last', 'first', 'outlifo']",store set element particular order base principl last first outlifo,store set element particular order based principle last first outlifo
"an object list that stores elements in a particular order, the first object inserted is at the bottom with the last object at the top so the first object in is the last object out.",5.0,1.0,an object list that stores elements in a particular order the first object inserted is at the bottom with the last object at the top so the first object in is the last object out,"['object', 'list', 'stores', 'elements', 'particular', 'order', 'first', 'object', 'inserted', 'bottom', 'last', 'object', 'top', 'first', 'object', 'last', 'object']",object list store element particular order first object insert bottom last object top first object last object,object list store element particular order first object inserted bottom last object top first object last object
An ADT that stores a set of elements in a particular order. The stack principles are LIFO. The last item inserted in the list is the first out.,5.0,1.0,an adt that stores a set of elements in a particular order the stack principles are lifo the last item inserted in the list is the first out,"['adt', 'stores', 'set', 'elements', 'particular', 'order', 'stack', 'principles', 'lifo', 'last', 'item', 'inserted', 'list', 'first']",adt store set element particular order stack principl lifo last item insert list first,adt store set element particular order stack principle lifo last item inserted list first
An abstract data type that stores a set of elements in a particular order.,2.5,0.0,an abstract data type that stores a set of elements in a particular order,"['abstract', 'data', 'type', 'stores', 'set', 'elements', 'particular', 'order']",abstract data type store set element particular order,abstract data type store set element particular order
a collection of data to be executed in the order of last in first out,5.0,1.0,a collection of data to be executed in the order of last in first out,"['collection', 'data', 'executed', 'order', 'last', 'first']",collect data execut order last first,collection data executed order last first
"A stack is a data structure that allows data members to be added or removed one at a time, and in order. They are a Last in First Out structure.",5.0,1.0,a stack is a data structure that allows data members to be added or removed one at a time and in order they are a last in first out structure,"['stack', 'data', 'structure', 'allows', 'data', 'members', 'added', 'removed', 'one', 'time', 'order', 'last', 'first', 'structure']",stack data structur allow data member ad remov one time order last first structur,stack data structure allows data member added removed one time order last first structure
Stores a set of element in a particular order,2.0,0.0,stores a set of element in a particular order,"['stores', 'set', 'element', 'particular', 'order']",store set element particular order,store set element particular order
is a list of element where the first one to be removed is the last one inserted,5.0,1.0,is a list of element where the first one to be removed is the last one inserted,"['list', 'element', 'first', 'one', 'removed', 'last', 'one', 'inserted']",list element first one remov last one insert,list element first one removed last one inserted
A data structure that puts elements in a list and only allows the user access to the last element.,4.5,1.0,a data structure that puts elements in a list and only allows the user access to the last element,"['data', 'structure', 'puts', 'elements', 'list', 'allows', 'user', 'access', 'last', 'element']",data structur put element list allow user access last element,data structure put element list allows user access last element
a finite ordered list with zero or more elements,2.0,0.0,a finite ordered list with zero or more elements,"['finite', 'ordered', 'list', 'zero', 'elements']",finit order list zero element,finite ordered list zero element
"A storage container that holds objects in a certain order, which has a LIFO priority",5.0,1.0,a storage container that holds objects in a certain order which has a lifo priority,"['storage', 'container', 'holds', 'objects', 'certain', 'order', 'lifo', 'priority']",storag contain hold object certain order lifo prioriti,storage container hold object certain order lifo priority
"Stacks are a type of container adaptors, specifically designed to operate in a LIFO contextlast-in first-out, where elements are inserted and extracted only from the end of the container.",5.0,1.0,stacks are a type of container adaptors specifically designed to operate in a lifo contextlast-in first-out where elements are inserted and extracted only from the end of the container,"['stacks', 'type', 'container', 'adaptors', 'specifically', 'designed', 'operate', 'lifo', 'contextlast-in', 'first-out', 'elements', 'inserted', 'extracted', 'end', 'container']",stack type contain adaptor specif design oper lifo contextlast-in first-out element insert extract end contain,stack type container adaptor specifically designed operate lifo contextlast-in first-out element inserted extracted end container
Push and pop are two main functions defined in a stack,5.0,1.0,push and pop are two main functions defined in a stack,"['push', 'pop', 'two', 'main', 'functions', 'defined', 'stack']",push pop two main function defin stack,push pop two main function defined stack
Push which inserts an element on the top of the stack and pop which removes the last inserted element from the stack.,5.0,1.0,push which inserts an element on the top of the stack and pop which removes the last inserted element from the stack,"['push', 'inserts', 'element', 'top', 'stack', 'pop', 'removes', 'last', 'inserted', 'element', 'stack']",push insert element top stack pop remov last insert element stack,push insert element top stack pop remove last inserted element stack
Push and pop.,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
Pop function and Push function,5.0,1.0,pop function and push function,"['pop', 'function', 'push', 'function']",pop function push function,pop function push function
push and pop.,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
pushinsert an itempopremove an item,5.0,1.0,pushinsert an itempopremove an item,"['pushinsert', 'itempopremove', 'item']",pushinsert itempopremov item,pushinsert itempopremove item
Adding a new item and removing the item,5.0,1.0,adding a new item and removing the item,"['adding', 'new', 'item', 'removing', 'item']",ad new item remov item,adding new item removing item
Pushinsertand popretrieve.,5.0,1.0,pushinsertand popretrieve,"['pushinsertand', 'popretrieve']",pushinsertand popretriev,pushinsertand popretrieve
push and pop.,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
Push and Pop.,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
pop and push,5.0,1.0,pop and push,"['pop', 'push']",pop push,pop push
pushadd an elementpopremove an element,5.0,1.0,pushadd an elementpopremove an element,"['pushadd', 'elementpopremove', 'element']",pushadd elementpopremov element,pushadd elementpopremove element
Push and pop.,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
pop and push,5.0,1.0,pop and push,"['pop', 'push']",pop push,pop push
pushto add to a item the StackPopto pull the last item added from an array.,5.0,1.0,pushto add to a item the stackpopto pull the last item added from an array,"['pushto', 'add', 'item', 'stackpopto', 'pull', 'last', 'item', 'added', 'array']",pushto add item stackpopto pull last item ad array,pushto add item stackpopto pull last item added array
pop and push,5.0,1.0,pop and push,"['pop', 'push']",pop push,pop push
"push and pop, push puts an object into the list, and pop takes the last object off.",5.0,1.0,push and pop push puts an object into the list and pop takes the last object off,"['push', 'pop', 'push', 'puts', 'object', 'list', 'pop', 'takes', 'last', 'object']",push pop push put object list pop take last object,push pop push put object list pop take last object
Push and Pop are the two main functions of a stack,5.0,1.0,push and pop are the two main functions of a stack,"['push', 'pop', 'two', 'main', 'functions', 'stack']",push pop two main function stack,push pop two main function stack
Push and Pop,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
"push, which adds an element to the stack ... and pop which takes an element off the stack",5.0,1.0,push which adds an element to the stack and pop which takes an element off the stack,"['push', 'adds', 'element', 'stack', 'pop', 'takes', 'element', 'stack']",push add element stack pop take element stack,push add element stack pop take element stack
"Push and Pop, which add and remove data from the stack, respectively.",5.0,1.0,push and pop which add and remove data from the stack respectively,"['push', 'pop', 'add', 'remove', 'data', 'stack', 'respectively']",push pop add remov data stack respect,push pop add remove data stack respectively
push and pop,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
pop to remove item push to insert an element,5.0,1.0,pop to remove item push to insert an element,"['pop', 'remove', 'item', 'push', 'insert', 'element']",pop remov item push insert element,pop remove item push insert element
Pop and push,5.0,1.0,pop and push,"['pop', 'push']",pop push,pop push
pop and push,5.0,1.0,pop and push,"['pop', 'push']",pop push,pop push
push adds an item to the top of the stack pop removes the top item from the stack,5.0,1.0,push adds an item to the top of the stack pop removes the top item from the stack,"['push', 'adds', 'item', 'top', 'stack', 'pop', 'removes', 'top', 'item', 'stack']",push add item top stack pop remov top item stack,push add item top stack pop remove top item stack
push and pop. Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack,5.0,1.0,push and pop push adds a given node to the top of the stack leaving previous nodes below pop removes and returns the current top node of the stack,"['push', 'pop', 'push', 'adds', 'given', 'node', 'top', 'stack', 'leaving', 'previous', 'nodes', 'pop', 'removes', 'returns', 'current', 'top', 'node', 'stack']",push pop push add given node top stack leav previou node pop remov return current top node stack,push pop push add given node top stack leaving previous node pop remove return current top node stack
An array has a fixed size. You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added. Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array.,5.0,1.0,an array has a fixed size you can add and delete elements to the end of the array and you use a pointer to keep track of the last element added each time you add or delete an element you update the pointer and check if it is equal to the max size of the array,"['array', 'fixed', 'size', 'add', 'delete', 'elements', 'end', 'array', 'use', 'pointer', 'keep', 'track', 'last', 'element', 'added', 'time', 'add', 'delete', 'element', 'update', 'pointer', 'check', 'equal', 'max', 'size', 'array']",array fix size add delet element end array use pointer keep track last element ad time add delet element updat pointer check equal max size array,array fixed size add delete element end array use pointer keep track last element added time add delete element update pointer check equal max size array
By implementing an array of a pre-defined size with the bottom stack element stored at element 0 and the last element stored in the array is the top. You increment top when an element is pushed and you decrement it when an item is popped.,5.0,1.0,by implementing an array of a pre-defined size with the bottom stack element stored at element 0 and the last element stored in the array is the top you increment top when an element is pushed and you decrement it when an item is popped,"['implementing', 'array', 'pre-defined', 'size', 'bottom', 'stack', 'element', 'stored', 'element', '0', 'last', 'element', 'stored', 'array', 'top', 'increment', 'top', 'element', 'pushed', 'decrement', 'item', 'popped']",implement array pre-defin size bottom stack element store element 0 last element store array top increment top element push decrement item pop,implementing array pre-defined size bottom stack element stored element 0 last element stored array top increment top element pushed decrement item popped
"If you use a dynamically allocated array, you must provide a destructor and copy constructor.",3.0,0.0,if you use a dynamically allocated array you must provide a destructor and copy constructor,"['use', 'dynamically', 'allocated', 'array', 'must', 'provide', 'destructor', 'copy', 'constructor']",use dynam alloc array must provid destructor copi constructor,use dynamically allocated array must provide destructor copy constructor
Create a int value that stores the head of the stack. Increment the top when one element is pushed and decrement after it is popped.,5.0,1.0,create a int value that stores the head of the stack increment the top when one element is pushed and decrement after it is popped,"['create', 'int', 'value', 'stores', 'head', 'stack', 'increment', 'top', 'one', 'element', 'pushed', 'decrement', 'popped']",creat int valu store head stack increment top one element push decrement pop,create int value store head stack increment top one element pushed decrement popped
Use a pointer that always points to the end of the array list for push or pop modifications.,4.5,1.0,use a pointer that always points to the end of the array list for push or pop modifications,"['use', 'pointer', 'always', 'points', 'end', 'array', 'list', 'push', 'pop', 'modifications']",use pointer alway point end array list push pop modif,use pointer always point end array list push pop modification
if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also.,4.5,1.0,if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also,"['used', 'array', 'implement', 'stack', 'add', 'element', 'add', 'end', 'array', 'remove', 'items', 'end', 'array', 'also']",use array implement stack add element add end array remov item end array also,used array implement stack add element add end array remove item end array also
You predetermine the size of the stack as you would an array. This type can not grow.,2.5,0.0,you predetermine the size of the stack as you would an array this type can not grow,"['predetermine', 'size', 'stack', 'would', 'array', 'type', 'grow']",predetermin size stack would array type grow,predetermine size stack would array type grow
"Declare a variable that points the last item in the array, which increasesplus pluswhen items are pushed onto the stack, and decreases--when an item is popped off the top.",5.0,1.0,declare a variable that points the last item in the array which increasesplus pluswhen items are pushed onto the stack and decreases--when an item is popped off the top,"['declare', 'variable', 'points', 'last', 'item', 'array', 'increasesplus', 'pluswhen', 'items', 'pushed', 'onto', 'stack', 'decreases', '--', 'item', 'popped', 'top']",declar variabl point last item array increasesplu pluswhen item push onto stack decreas -- item pop top,declare variable point last item array increasesplus pluswhen item pushed onto stack decrease -- item popped top
"Allocate an array of some size. The bottom stack element is stored at some element. Last index in the array is the top. Increment top when one element is pushed, decrement after pop.",4.5,1.0,allocate an array of some size the bottom stack element is stored at some element last index in the array is the top increment top when one element is pushed decrement after pop,"['allocate', 'array', 'size', 'bottom', 'stack', 'element', 'stored', 'element', 'last', 'index', 'array', 'top', 'increment', 'top', 'one', 'element', 'pushed', 'decrement', 'pop']",alloc array size bottom stack element store element last index array top increment top one element push decrement pop,allocate array size bottom stack element stored element last index array top increment top one element pushed decrement pop
"You allocate an pre-defined array, the bottom element is stored at element 0, and the last index is the head.",4.0,1.0,you allocate an pre-defined array the bottom element is stored at element 0 and the last index is the head,"['allocate', 'pre-defined', 'array', 'bottom', 'element', 'stored', 'element', '0', 'last', 'index', 'head']",alloc pre-defin array bottom element store element 0 last index head,allocate pre-defined array bottom element stored element 0 last index head
"Make an array, make the bottom at spot 0, make the last spot in the array the top, and increment top when you ad",4.5,1.0,make an array make the bottom at spot 0 make the last spot in the array the top and increment top when you ad,"['make', 'array', 'make', 'bottom', 'spot', '0', 'make', 'last', 'spot', 'array', 'top', 'increment', 'top', 'ad']",make array make bottom spot 0 make last spot array top increment top ad,make array make bottom spot 0 make last spot array top increment top ad
treat the beginning of the array as the beginning of the stack,4.0,1.0,treat the beginning of the array as the beginning of the stack,"['treat', 'beginning', 'array', 'beginning', 'stack']",treat begin array begin stack,treat beginning array beginning stack
Use an index value called top to keep track of the last element in the array.,4.5,1.0,use an index value called top to keep track of the last element in the array,"['use', 'index', 'value', 'called', 'top', 'keep', 'track', 'last', 'element', 'array']",use index valu call top keep track last element array,use index value called top keep track last element array
create an array and implement pointers that point to the next list item down and stack them up.,2.0,0.0,create an array and implement pointers that point to the next list item down and stack them up,"['create', 'array', 'implement', 'pointers', 'point', 'next', 'list', 'item', 'stack']",creat array implement pointer point next list item stack,create array implement pointer point next list item stack
"for efficiency it is easiest to implement the left to right method, with the right most item being the one that is retrieved when a pop is performed, and a push places an object on the furthest element.",3.5,0.0,for efficiency it is easiest to implement the left to right method with the right most item being the one that is retrieved when a pop is performed and a push places an object on the furthest element,"['efficiency', 'easiest', 'implement', 'left', 'right', 'method', 'right', 'item', 'one', 'retrieved', 'pop', 'performed', 'push', 'places', 'object', 'furthest', 'element']",effici easiest implement left right method right item one retriev pop perform push place object furthest element,efficiency easiest implement left right method right item one retrieved pop performed push place object furthest element
"Create an array based on a pre-defined size N There cannot be more elements than N. Bottom stack element stored at element 0 last index in the array is the top Increment top when one element is pushed, decrement after pop",4.5,1.0,create an array based on a pre-defined size n there cannot be more elements than n bottom stack element stored at element 0 last index in the array is the top increment top when one element is pushed decrement after pop,"['create', 'array', 'based', 'pre-defined', 'size', 'n', 'elements', 'n', 'bottom', 'stack', 'element', 'stored', 'element', '0', 'last', 'index', 'array', 'top', 'increment', 'top', 'one', 'element', 'pushed', 'decrement', 'pop']",creat array base pre-defin size n element n bottom stack element store element 0 last index array top increment top one element push decrement pop,create array based pre-defined size n element n bottom stack element stored element 0 last index array top increment top one element pushed decrement pop
"with the element added to the array, so that the last element added is at the end, and when the element is popped it takes the last element off the array",4.0,1.0,with the element added to the array so that the last element added is at the end and when the element is popped it takes the last element off the array,"['element', 'added', 'array', 'last', 'element', 'added', 'end', 'element', 'popped', 'takes', 'last', 'element', 'array']",element ad array last element ad end element pop take last element array,element added array last element added end element popped take last element array
Allocate an array of some pre-defined size. Bottom stack element stored at element 0. The last index in the array is the top. Increment top when one element is pushed.,4.5,1.0,allocate an array of some pre-defined size bottom stack element stored at element 0 the last index in the array is the top increment top when one element is pushed,"['allocate', 'array', 'pre-defined', 'size', 'bottom', 'stack', 'element', 'stored', 'element', '0', 'last', 'index', 'array', 'top', 'increment', 'top', 'one', 'element', 'pushed']",alloc array pre-defin size bottom stack element store element 0 last index array top increment top one element push,allocate array pre-defined size bottom stack element stored element 0 last index array top increment top one element pushed
"Create an array, size N. N plus plus when one element is pushed. N --when one element is popped.",4.0,1.0,create an array size n n plus plus when one element is pushed n --when one element is popped,"['create', 'array', 'size', 'n', 'n', 'plus', 'plus', 'one', 'element', 'pushed', 'n', '--', 'one', 'element', 'popped']",creat array size n n plu plu one element push n -- one element pop,create array size n n plus plus one element pushed n -- one element popped
define an array and keep track of a pointer to the last element as items are added,4.0,1.0,define an array and keep track of a pointer to the last element as items are added,"['define', 'array', 'keep', 'track', 'pointer', 'last', 'element', 'items', 'added']",defin array keep track pointer last element item ad,define array keep track pointer last element item added
"By allocating an array of predetermined size, and an integer to track the top element of the stack. The bottom member of the stack will go in element 0 of the array, and for each element pushed the top tracking integer is incremented.",4.5,1.0,by allocating an array of predetermined size and an integer to track the top element of the stack the bottom member of the stack will go in element 0 of the array and for each element pushed the top tracking integer is incremented,"['allocating', 'array', 'predetermined', 'size', 'integer', 'track', 'top', 'element', 'stack', 'bottom', 'member', 'stack', 'go', 'element', '0', 'array', 'element', 'pushed', 'top', 'tracking', 'integer', 'incremented']",alloc array predetermin size integ track top element stack bottom member stack go element 0 array element push top track integ increment,allocating array predetermined size integer track top element stack bottom member stack go element 0 array element pushed top tracking integer incremented
"Allocate an array of some size, bottom stack element stored at element 0",4.0,1.0,allocate an array of some size bottom stack element stored at element 0,"['allocate', 'array', 'size', 'bottom', 'stack', 'element', 'stored', 'element', '0']",alloc array size bottom stack element store element 0,allocate array size bottom stack element stored element 0
you store the stack in the array but you have to keep in mind the first element,3.0,0.0,you store the stack in the array but you have to keep in mind the first element,"['store', 'stack', 'array', 'keep', 'mind', 'first', 'element']",store stack array keep mind first element,store stack array keep mind first element
You keep track of the last item entered into the array and do not allow the user access to the other parts of the array.,4.0,1.0,you keep track of the last item entered into the array and do not allow the user access to the other parts of the array,"['keep', 'track', 'last', 'item', 'entered', 'array', 'allow', 'user', 'access', 'parts', 'array']",keep track last item enter array allow user access part array,keep track last item entered array allow user access part array
"using arrays, you are pushing one int at a time into the stack until you get to the end of your array",4.0,1.0,using arrays you are pushing one int at a time into the stack until you get to the end of your array,"['using', 'arrays', 'pushing', 'one', 'int', 'time', 'stack', 'get', 'end', 'array']",use array push one int time stack get end array,using array pushing one int time stack get end array
"by having a max number of elements, allocating an array with that number of elements, storing the elements starting at 0, and keeping track of how many elements are currently in the list",4.0,1.0,by having a max number of elements allocating an array with that number of elements storing the elements starting at 0 and keeping track of how many elements are currently in the list,"['max', 'number', 'elements', 'allocating', 'array', 'number', 'elements', 'storing', 'elements', 'starting', '0', 'keeping', 'track', 'many', 'elements', 'currently', 'list']",max number element alloc array number element store element start 0 keep track mani element current list,max number element allocating array number element storing element starting 0 keeping track many element currently list
"Stack usually holds a bunch of items with the same type, therefore u can use an array, to hold the content of the stack and an integer top that holds the index of the element at the top of the stack. u Choose an array size. Then the sequence of operations used. u have to decide what data types are needed for this stack data structure.",3.0,0.0,stack usually holds a bunch of items with the same type therefore u can use an array to hold the content of the stack and an integer top that holds the index of the element at the top of the stack u choose an array size then the sequence of operations used u have to decide what data types are needed for this stack data structure,"['stack', 'usually', 'holds', 'bunch', 'items', 'type', 'therefore', 'u', 'use', 'array', 'hold', 'content', 'stack', 'integer', 'top', 'holds', 'index', 'element', 'top', 'stack', 'u', 'choose', 'array', 'size', 'sequence', 'operations', 'used', 'u', 'decide', 'data', 'types', 'needed', 'stack', 'data', 'structure']",stack usual hold bunch item type therefor u use array hold content stack integ top hold index element top stack u choos array size sequenc oper use u decid data type need stack data structur,stack usually hold bunch item type therefore u use array hold content stack integer top hold index element top stack u choose array size sequence operation used u decide data type needed stack data structure
You can add an element to the end of the linked list and update a pointer called top each time you modify the list.,3.0,0.0,you can add an element to the end of the linked list and update a pointer called top each time you modify the list,"['add', 'element', 'end', 'linked', 'list', 'update', 'pointer', 'called', 'top', 'time', 'modify', 'list']",add element end link list updat pointer call top time modifi list,add element end linked list update pointer called top time modify list
You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to.,5.0,1.0,you implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to,"['implement', 'list', 'head', 'pointer', 'points', 'element', 'recently', 'pushed', 'onto', 'list', 'pop', 'function', 'changes', 'head', 'pointer', 'point', 'next', 'last', 'element', 'list', 'removes', 'element', 'head', 'pointer', 'previously', 'pointed']",implement list head pointer point element recent push onto list pop function chang head pointer point next last element list remov element head pointer previous point,implement list head pointer point element recently pushed onto list pop function change head pointer point next last element list remove element head pointer previously pointed
This is the implementation of the stack using single linked list. The operations performed on a stack are 1push : This is the function which is for insertionpushingof an element into stack It is similar to the insertion of an element at the end of a single linked list see the function insert end in the program for operations of single linked list 2pop : This is the function which is for deletionpopping upof an element from the stack It is similar to the deletion of an element at the end of a single linked list see the function delete end in the program for operations of single linked list 3stack display : This is the function which is for displaying the elements of a stack,4.0,1.0,this is the implementation of the stack using single linked list the operations performed on a stack are 1push this is the function which is for insertionpushingof an element into stack it is similar to the insertion of an element at the end of a single linked list see the function insert end in the program for operations of single linked list 2pop this is the function which is for deletionpopping upof an element from the stack it is similar to the deletion of an element at the end of a single linked list see the function delete end in the program for operations of single linked list 3stack display this is the function which is for displaying the elements of a stack,"['implementation', 'stack', 'using', 'single', 'linked', 'list', 'operations', 'performed', 'stack', '1push', 'function', 'insertionpushingof', 'element', 'stack', 'similar', 'insertion', 'element', 'end', 'single', 'linked', 'list', 'see', 'function', 'insert', 'end', 'program', 'operations', 'single', 'linked', 'list', '2pop', 'function', 'deletionpopping', 'upof', 'element', 'stack', 'similar', 'deletion', 'element', 'end', 'single', 'linked', 'list', 'see', 'function', 'delete', 'end', 'program', 'operations', 'single', 'linked', 'list', '3stack', 'display', 'function', 'displaying', 'elements', 'stack']",implement stack use singl link list oper perform stack 1push function insertionpushingof element stack similar insert element end singl link list see function insert end program oper singl link list 2pop function deletionpop upof element stack similar delet element end singl link list see function delet end program oper singl link list 3stack display function display element stack,implementation stack using single linked list operation performed stack 1push function insertionpushingof element stack similar insertion element end single linked list see function insert end program operation single linked list 2pop function deletionpopping upof element stack similar deletion element end single linked list see function delete end program operation single linked list 3stack display function displaying element stack
Using nodes to keep track of the head of the stack. Then using Push and Pop to create the stack as needed.,4.0,1.0,using nodes to keep track of the head of the stack then using push and pop to create the stack as needed,"['using', 'nodes', 'keep', 'track', 'head', 'stack', 'using', 'push', 'pop', 'create', 'stack', 'needed']",use node keep track head stack use push pop creat stack need,using node keep track head stack using push pop create stack needed
"Use the head as the top of the stack, only modify the head when you push or pop ... push would add a new item to the head, pop would remove the item from the head.",4.5,1.0,use the head as the top of the stack only modify the head when you push or pop push would add a new item to the head pop would remove the item from the head,"['use', 'head', 'top', 'stack', 'modify', 'head', 'push', 'pop', 'push', 'would', 'add', 'new', 'item', 'head', 'pop', 'would', 'remove', 'item', 'head']",use head top stack modifi head push pop push would add new item head pop would remov item head,use head top stack modify head push pop push would add new item head pop would remove item head
you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item.,4.5,1.0,you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item,"['implement', 'stack', 'list', 'changing', 'pointer', 'first', 'element', 'list', 'new', 'item', 'move', 'pointer', 'top', 'stack', 'next', 'item', 'removing', 'item']",implement stack list chang pointer first element list new item move pointer top stack next item remov item,implement stack list changing pointer first element list new item move pointer top stack next item removing item
You dynamicly create space as the stack grows. The stack can be as long as you need.,2.5,0.0,you dynamicly create space as the stack grows the stack can be as long as you need,"['dynamicly', 'create', 'space', 'stack', 'grows', 'stack', 'long', 'need']",dynamicli creat space stack grow stack long need,dynamicly create space stack grows stack long need
"Declare a pointer that points to the head of the linked list, only add and remove nodes from the beginning of the list.",5.0,1.0,declare a pointer that points to the head of the linked list only add and remove nodes from the beginning of the list,"['declare', 'pointer', 'points', 'head', 'linked', 'list', 'add', 'remove', 'nodes', 'beginning', 'list']",declar pointer point head link list add remov node begin list,declare pointer point head linked list add remove node beginning list
Creating a linked list. Add an element to the top of the stack when pushing and deleting an element when popping.,4.0,1.0,creating a linked list add an element to the top of the stack when pushing and deleting an element when popping,"['creating', 'linked', 'list', 'add', 'element', 'top', 'stack', 'pushing', 'deleting', 'element', 'popping']",creat link list add element top stack push delet element pop,creating linked list add element top stack pushing deleting element popping
"A singly-linked list is already a lot like a stack, it just depends on the way you address moving the head.",3.5,0.0,a singly-linked list is already a lot like a stack it just depends on the way you address moving the head,"['singly-linked', 'list', 'already', 'lot', 'like', 'stack', 'depends', 'way', 'address', 'moving', 'head']",singly-link list alreadi lot like stack depend way address move head,singly-linked list already lot like stack depends way address moving head
"make a list, make the bottom the head, add on the end and make the end top",3.5,0.0,make a list make the bottom the head add on the end and make the end top,"['make', 'list', 'make', 'bottom', 'head', 'add', 'end', 'make', 'end', 'top']",make list make bottom head add end make end top,make list make bottom head add end make end top
use the add function with a list as the beginning of the stack and remove for pop,4.5,1.0,use the add function with a list as the beginning of the stack and remove for pop,"['use', 'add', 'function', 'list', 'beginning', 'stack', 'remove', 'pop']",use add function list begin stack remov pop,use add function list beginning stack remove pop
Use head as the top and push and pop nodes from the head.,4.5,1.0,use head as the top and push and pop nodes from the head,"['use', 'head', 'top', 'push', 'pop', 'nodes', 'head']",use head top push pop node head,use head top push pop node head
create a node based list that points to the next list item down.,1.5,0.0,create a node based list that points to the next list item down,"['create', 'node', 'based', 'list', 'points', 'next', 'list', 'item']",creat node base list point next list item,create node based list point next list item
"have the head of the list be the last item added, and a push just adds a new head.",4.5,1.0,have the head of the list be the last item added and a push just adds a new head,"['head', 'list', 'last', 'item', 'added', 'push', 'adds', 'new', 'head']",head list last item ad push add new head,head list last item added push add new head
"Create a new list. Pop elements in the stack as needed. Push the stack to remove items, unless the stack is empty. The top item is at the head of the list. The last item is at the end.",4.5,1.0,create a new list pop elements in the stack as needed push the stack to remove items unless the stack is empty the top item is at the head of the list the last item is at the end,"['create', 'new', 'list', 'pop', 'elements', 'stack', 'needed', 'push', 'stack', 'remove', 'items', 'unless', 'stack', 'empty', 'top', 'item', 'head', 'list', 'last', 'item', 'end']",creat new list pop element stack need push stack remov item unless stack empti top item head list last item end,create new list pop element stack needed push stack remove item unless stack empty top item head list last item end
adding the element to the end of the list so that it links to the element before it. when popping the element it takes the last element in the list and sets the previous one as the end of the list.,3.5,0.0,adding the element to the end of the list so that it links to the element before it when popping the element it takes the last element in the list and sets the previous one as the end of the list,"['adding', 'element', 'end', 'list', 'links', 'element', 'popping', 'element', 'takes', 'last', 'element', 'list', 'sets', 'previous', 'one', 'end', 'list']",ad element end list link element pop element take last element list set previou one end list,adding element end list link element popping element take last element list set previous one end list
"You can implement a stack using arrays or and linked list. By the use of pointers, that point elementnodeto the next element in the stack. By the use of pointers, the stack becomes a linked list.",2.5,0.0,you can implement a stack using arrays or and linked list by the use of pointers that point elementnodeto the next element in the stack by the use of pointers the stack becomes a linked list,"['implement', 'stack', 'using', 'arrays', 'linked', 'list', 'use', 'pointers', 'point', 'elementnodeto', 'next', 'element', 'stack', 'use', 'pointers', 'stack', 'becomes', 'linked', 'list']",implement stack use array link list use pointer point elementnodeto next element stack use pointer stack becom link list,implement stack using array linked list use pointer point elementnodeto next element stack use pointer stack becomes linked list
Elements are only inserted and removed from the head of the list. There is no header node or current pointer.,4.5,1.0,elements are only inserted and removed from the head of the list there is no header node or current pointer,"['elements', 'inserted', 'removed', 'head', 'list', 'header', 'node', 'current', 'pointer']",element insert remov head list header node current pointer,element inserted removed head list header node current pointer
use a linked list and keep track of a pointer that points to the first item,4.0,1.0,use a linked list and keep track of a pointer that points to the first item,"['use', 'linked', 'list', 'keep', 'track', 'pointer', 'points', 'first', 'item']",use link list keep track pointer point first item,use linked list keep track pointer point first item
"A singly linked list can already be easily used for LIFO data storage. Members of a stack can simply be pushed and popped from a list, the first item in will be the last out.",4.5,1.0,a singly linked list can already be easily used for lifo data storage members of a stack can simply be pushed and popped from a list the first item in will be the last out,"['singly', 'linked', 'list', 'already', 'easily', 'used', 'lifo', 'data', 'storage', 'members', 'stack', 'simply', 'pushed', 'popped', 'list', 'first', 'item', 'last']",singli link list alreadi easili use lifo data storag member stack simpli push pop list first item last,singly linked list already easily used lifo data storage member stack simply pushed popped list first item last
using pointer,1.5,0.0,using pointer,"['using', 'pointer']",use pointer,using pointer
the top is the first pointer.,3.0,0.0,the top is the first pointer,"['top', 'first', 'pointer']",top first pointer,top first pointer
Keep a pointer pointing to the last element entered at the front of the array and move the pointer back when you delete an element.,2.5,0.0,keep a pointer pointing to the last element entered at the front of the array and move the pointer back when you delete an element,"['keep', 'pointer', 'pointing', 'last', 'element', 'entered', 'front', 'array', 'move', 'pointer', 'back', 'delete', 'element']",keep pointer point last element enter front array move pointer back delet element,keep pointer pointing last element entered front array move pointer back delete element
"using linked list, you are pushing the node that contains each int to the stack until you get to the end of your linked list",2.5,0.0,using linked list you are pushing the node that contains each int to the stack until you get to the end of your linked list,"['using', 'linked', 'list', 'pushing', 'node', 'contains', 'int', 'stack', 'get', 'end', 'linked', 'list']",use link list push node contain int stack get end link list,using linked list pushing node contains int stack get end linked list
"have a linked list, and for each push, add an item onto beginning of the list, and for each pop remove the first element in the list.",5.0,1.0,have a linked list and for each push add an item onto beginning of the list and for each pop remove the first element in the list,"['linked', 'list', 'push', 'add', 'item', 'onto', 'beginning', 'list', 'pop', 'remove', 'first', 'element', 'list']",link list push add item onto begin list pop remov first element list,linked list push add item onto beginning list pop remove first element list
"Using a linked list is one way to implement a stack so that it can handle essentially any number of elements. It is usually convenient to put a data structure in its own module, thus, you will want to create files stack. h and a stack. c",2.0,0.0,using a linked list is one way to implement a stack so that it can handle essentially any number of elements it is usually convenient to put a data structure in its own module thus you will want to create files stack h and a stack c,"['using', 'linked', 'list', 'one', 'way', 'implement', 'stack', 'handle', 'essentially', 'number', 'elements', 'usually', 'convenient', 'put', 'data', 'structure', 'module', 'thus', 'want', 'create', 'files', 'stack', 'h', 'stack', 'c']",use link list one way implement stack handl essenti number element usual conveni put data structur modul thu want creat file stack h stack c,using linked list one way implement stack handle essentially number element usually convenient put data structure module thus want create file stack h stack c
"List based is preferred because it is not constrained to a fix size. The down fall is that it takes up more memory because each node has at least two parts, the item and the pointer.",5.0,1.0,list based is preferred because it is not constrained to a fix size the down fall is that it takes up more memory because each node has at least two parts the item and the pointer,"['list', 'based', 'preferred', 'constrained', 'fix', 'size', 'fall', 'takes', 'memory', 'node', 'least', 'two', 'parts', 'item', 'pointer']",list base prefer constrain fix size fall take memori node least two part item pointer,list based preferred constrained fix size fall take memory node least two part item pointer
List based is preferred because the stack you create is not limited in size and can increase or decrease in size as needed.,5.0,1.0,list based is preferred because the stack you create is not limited in size and can increase or decrease in size as needed,"['list', 'based', 'preferred', 'stack', 'create', 'limited', 'size', 'increase', 'decrease', 'size', 'needed']",list base prefer stack creat limit size increas decreas size need,list based preferred stack create limited size increase decrease size needed
"Array-based prevents the push operation from adding an item to the stack if the stack 's size limit, which is the size of the array, has been reached. List-base much simpler to write and does not have a fixed size.",5.0,1.0,array-based prevents the push operation from adding an item to the stack if the stack s size limit which is the size of the array has been reached list-base much simpler to write and does not have a fixed size,"['array-based', 'prevents', 'push', 'operation', 'adding', 'item', 'stack', 'stack', 'size', 'limit', 'size', 'array', 'reached', 'list-base', 'much', 'simpler', 'write', 'fixed', 'size']",array-bas prevent push oper ad item stack stack size limit size array reach list-bas much simpler write fix size,array-based prevents push operation adding item stack stack size limit size array reached list-base much simpler write fixed size
"Array based because they are faster, easier to keep track of and less complexity in code.",2.5,0.0,array based because they are faster easier to keep track of and less complexity in code,"['array', 'based', 'faster', 'easier', 'keep', 'track', 'less', 'complexity', 'code']",array base faster easier keep track less complex code,array based faster easier keep track le complexity code
list-based because it does not use a fixed size like an array would.,5.0,1.0,list-based because it does not use a fixed size like an array would,"['list-based', 'use', 'fixed', 'size', 'like', 'array', 'would']",list-bas use fix size like array would,list-based use fixed size like array would
usually linked list because it does not have a fixed size. But if you know or want to set a max size array is better.,5.0,1.0,usually linked list because it does not have a fixed size but if you know or want to set a max size array is better,"['usually', 'linked', 'list', 'fixed', 'size', 'know', 'want', 'set', 'max', 'size', 'array', 'better']",usual link list fix size know want set max size array better,usually linked list fixed size know want set max size array better
List-based. Allows more flexablity with size of the stack.,5.0,1.0,list-based allows more flexablity with size of the stack,"['list-based', 'allows', 'flexablity', 'size', 'stack']",list-bas allow flexabl size stack,list-based allows flexablity size stack
Linked lists are preferred for implementing stacks because they are not limited to a set number of elements.,5.0,1.0,linked lists are preferred for implementing stacks because they are not limited to a set number of elements,"['linked', 'lists', 'preferred', 'implementing', 'stacks', 'limited', 'set', 'number', 'elements']",link list prefer implement stack limit set number element,linked list preferred implementing stack limited set number element
The list-based implementation is preferred since the big O1is very efficient.,3.0,0.0,the list-based implementation is preferred since the big o1is very efficient,"['list-based', 'implementation', 'preferred', 'since', 'big', 'o1is', 'efficient']",list-bas implement prefer sinc big o1i effici,list-based implementation preferred since big o1is efficient
"Linked list implementation is preferred. That way, the list can be moved along without iteration.",3.0,0.0,linked list implementation is preferred that way the list can be moved along without iteration,"['linked', 'list', 'implementation', 'preferred', 'way', 'list', 'moved', 'along', 'without', 'iteration']",link list implement prefer way list move along without iter,linked list implementation preferred way list moved along without iteration
list because it its size is not determined,5.0,1.0,list because it its size is not determined,"['list', 'size', 'determined']",list size determin,list size determined
Linked list because it takes up less memory and is scalable,3.0,0.0,linked list because it takes up less memory and is scalable,"['linked', 'list', 'takes', 'less', 'memory', 'scalable']",link list take less memori scalabl,linked list take le memory scalable
"List-based, as the list can be grown dynamically, and as the head node is easily accessible.",5.0,1.0,list-based as the list can be grown dynamically and as the head node is easily accessible,"['list-based', 'list', 'grown', 'dynamically', 'head', 'node', 'easily', 'accessible']",list-bas list grown dynam head node easili access,list-based list grown dynamically head node easily accessible
list based because the nodes are easier to work with and can be traversed easier,3.0,0.0,list based because the nodes are easier to work with and can be traversed easier,"['list', 'based', 'nodes', 'easier', 'work', 'traversed', 'easier']",list base node easier work travers easier,list based node easier work traversed easier
"list based, because of the lower processing overhead and nearly unlimited space, due to linked list design.",5.0,1.0,list based because of the lower processing overhead and nearly unlimited space due to linked list design,"['list', 'based', 'lower', 'processing', 'overhead', 'nearly', 'unlimited', 'space', 'due', 'linked', 'list', 'design']",list base lower process overhead nearli unlimit space due link list design,list based lower processing overhead nearly unlimited space due linked list design
"list-based It can grow and shrink dynamically, unlike the fixed size array.",5.0,1.0,list-based it can grow and shrink dynamically unlike the fixed size array,"['list-based', 'grow', 'shrink', 'dynamically', 'unlike', 'fixed', 'size', 'array']",list-bas grow shrink dynam unlik fix size array,list-based grow shrink dynamically unlike fixed size array
"list based because arrays can become full, lists can grow or shrink as needed",5.0,1.0,list based because arrays can become full lists can grow or shrink as needed,"['list', 'based', 'arrays', 'become', 'full', 'lists', 'grow', 'shrink', 'needed']",list base array becom full list grow shrink need,list based array become full list grow shrink needed
List-bases implentation is preferred. One of the main reasons is because of that the list has no fixed size.,5.0,1.0,list-bases implentation is preferred one of the main reasons is because of that the list has no fixed size,"['list-bases', 'implentation', 'preferred', 'one', 'main', 'reasons', 'list', 'fixed', 'size']",list-bas implent prefer one main reason list fix size,list-bases implentation preferred one main reason list fixed size
Array is preferred. Linked list implementation requires extra space to store pointers. Space is allocated dynamically in the list-based which takes more time.,2.5,0.0,array is preferred linked list implementation requires extra space to store pointers space is allocated dynamically in the list-based which takes more time,"['array', 'preferred', 'linked', 'list', 'implementation', 'requires', 'extra', 'space', 'store', 'pointers', 'space', 'allocated', 'dynamically', 'list-based', 'takes', 'time']",array prefer link list implement requir extra space store pointer space alloc dynam list-bas take time,array preferred linked list implementation requires extra space store pointer space allocated dynamically list-based take time
link list is preferred because it makes pushing elements easier because there is no limit other than memory to the number of elements,5.0,1.0,link list is preferred because it makes pushing elements easier because there is no limit other than memory to the number of elements,"['link', 'list', 'preferred', 'makes', 'pushing', 'elements', 'easier', 'limit', 'memory', 'number', 'elements']",link list prefer make push element easier limit memori number element,link list preferred make pushing element easier limit memory number element
"List-based implementation is much easier to implement, and allows the stack to scale as necessary. It is therefore the preferred implementation.",5.0,1.0,list-based implementation is much easier to implement and allows the stack to scale as necessary it is therefore the preferred implementation,"['list-based', 'implementation', 'much', 'easier', 'implement', 'allows', 'stack', 'scale', 'necessary', 'therefore', 'preferred', 'implementation']",list-bas implement much easier implement allow stack scale necessari therefor prefer implement,list-based implementation much easier implement allows stack scale necessary therefore preferred implementation
Array based implementation requires less memory than a list based. inceasing the size of a resizeable array can waste storage and time,3.5,0.0,array based implementation requires less memory than a list based inceasing the size of a resizeable array can waste storage and time,"['array', 'based', 'implementation', 'requires', 'less', 'memory', 'list', 'based', 'inceasing', 'size', 'resizeable', 'array', 'waste', 'storage', 'time']",array base implement requir less memori list base inceas size resiz array wast storag time,array based implementation requires le memory list based inceasing size resizeable array waste storage time
"in an array based stack you would need to pre-determine a size, where in a list you can increase or decrease the size however you want.",5.0,1.0,in an array based stack you would need to pre-determine a size where in a list you can increase or decrease the size however you want,"['array', 'based', 'stack', 'would', 'need', 'pre-determine', 'size', 'list', 'increase', 'decrease', 'size', 'however', 'want']",array base stack would need pre-determin size list increas decreas size howev want,array based stack would need pre-determine size list increase decrease size however want
A list-based implementation is preferred because the list is more flexible than a array.,5.0,1.0,a list-based implementation is preferred because the list is more flexible than a array,"['list-based', 'implementation', 'preferred', 'list', 'flexible', 'array']",list-bas implement prefer list flexibl array,list-based implementation preferred list flexible array
i would think a list based would be better because you can change the pointers of the nodes to add or remove things from your stack,4.0,1.0,i would think a list based would be better because you can change the pointers of the nodes to add or remove things from your stack,"['would', 'think', 'list', 'based', 'would', 'better', 'change', 'pointers', 'nodes', 'add', 'remove', 'things', 'stack']",would think list base would better chang pointer node add remov thing stack,would think list based would better change pointer node add remove thing stack
"list based, because it is much more flexible, easier to use, and doesnt need to have a max size defined when it is made.",5.0,1.0,list based because it is much more flexible easier to use and doesnt need to have a max size defined when it is made,"['list', 'based', 'much', 'flexible', 'easier', 'use', 'doesnt', 'need', 'max', 'size', 'defined', 'made']",list base much flexibl easier use doesnt need max size defin made,list based much flexible easier use doesnt need max size defined made
array based list is preferred because it can hold any size as long as u specify it.,1.0,0.0,array based list is preferred because it can hold any size as long as u specify it,"['array', 'based', 'list', 'preferred', 'hold', 'size', 'long', 'u', 'specify']",array base list prefer hold size long u specifi,array based list preferred hold size long u specify
They are converted to post fix expressions. It still follow the order of precedence for the operators.,5.0,1.0,they are converted to post fix expressions it still follow the order of precedence for the operators,"['converted', 'post', 'fix', 'expressions', 'still', 'follow', 'order', 'precedence', 'operators']",convert post fix express still follow order preced oper,converted post fix expression still follow order precedence operator
They are first converted to postfix expressions and then evaluated.,5.0,1.0,they are first converted to postfix expressions and then evaluated,"['first', 'converted', 'postfix', 'expressions', 'evaluated']",first convert postfix express evalu,first converted postfix expression evaluated
"Computers cannot evaulate infix expressions, it must first convert infix to postfix expression then it can evaluate.",5.0,1.0,computers cannot evaulate infix expressions it must first convert infix to postfix expression then it can evaluate,"['computers', 'evaulate', 'infix', 'expressions', 'must', 'first', 'convert', 'infix', 'postfix', 'expression', 'evaluate']",comput evaul infix express must first convert infix postfix express evalu,computer evaulate infix expression must first convert infix postfix expression evaluate
By using parentheses to have order in the expression.,2.5,0.0,by using parentheses to have order in the expression,"['using', 'parentheses', 'order', 'expression']",use parenthes order express,using parenthesis order expression
In postfix notation.,4.0,1.0,in postfix notation,"['postfix', 'notation']",postfix notat,postfix notation
computers usually convert infix expressions to post fix expression and evaluate them using a stack.,5.0,1.0,computers usually convert infix expressions to post fix expression and evaluate them using a stack,"['computers', 'usually', 'convert', 'infix', 'expressions', 'post', 'fix', 'expression', 'evaluate', 'using', 'stack']",comput usual convert infix express post fix express evalu use stack,computer usually convert infix expression post fix expression evaluate using stack
they are converted to postfix,5.0,1.0,they are converted to postfix,"['converted', 'postfix']",convert postfix,converted postfix
Infix expressions are interpreted as postfix expressions by implementing stacks.,5.0,1.0,infix expressions are interpreted as postfix expressions by implementing stacks,"['infix', 'expressions', 'interpreted', 'postfix', 'expressions', 'implementing', 'stacks']",infix express interpret postfix express implement stack,infix expression interpreted postfix expression implementing stack
They are first converted into an equivalent postfix expression so it can be read by the computer.,5.0,1.0,they are first converted into an equivalent postfix expression so it can be read by the computer,"['first', 'converted', 'equivalent', 'postfix', 'expression', 'read', 'computer']",first convert equival postfix express read comput,first converted equivalent postfix expression read computer
"The computer translates the infix expression to a postfix expression, then solves.",5.0,1.0,the computer translates the infix expression to a postfix expression then solves,"['computer', 'translates', 'infix', 'expression', 'postfix', 'expression', 'solves']",comput translat infix express postfix express solv,computer translates infix expression postfix expression solves
in postfix format,4.0,1.0,in postfix format,"['postfix', 'format']",postfix format,postfix format
they use parenthisis and a stack to determine which evaluations need to be made first,3.0,0.0,they use parenthisis and a stack to determine which evaluations need to be made first,"['use', 'parenthisis', 'stack', 'determine', 'evaluations', 'need', 'made', 'first']",use parenthisi stack determin evalu need made first,use parenthisis stack determine evaluation need made first
By throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered.,4.5,1.0,by throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered,"['throwing', 'variables', 'postfix', 'expression', 'operands', 'onto', 'parentheses', 'regulated', 'stack', 'end', 'parentheses', 'enough', 'variables', 'operate', 'encountered']",throw variabl postfix express operand onto parenthes regul stack end parenthes enough variabl oper encount,throwing variable postfix expression operand onto parenthesis regulated stack end parenthesis enough variable operate encountered
by being passed to the function by a leading term,1.5,0.0,by being passed to the function by a leading term,"['passed', 'function', 'leading', 'term']",pass function lead term,passed function leading term
"i have an hard time explaining this so i will show how infix is evaluated instead. Start with an infix expression, like,5 plus 2multiplied by 5plus400 divided by2 plus 3, and push items until you get a  and once that happens, perform the operations until you reach an  ... with that complete, you will now have 7 multiplied by 5plus400 divided by2 plus 3as now the expression that will be evaluated ... perform last step again ...35 plus400 divided by2 plus 3is now the stack ... repeat agian ...35 plus400 divided by 5 is now the stack after that ... repeat ...35 plus 80is now the stack, repeat again ... 115 is now the stack, and is returned.",2.5,0.0,i have an hard time explaining this so i will show how infix is evaluated instead start with an infix expression like5 plus 2multiplied by 5plus400 divided by2 plus 3 and push items until you get a and once that happens perform the operations until you reach an with that complete you will now have 7 multiplied by 5plus400 divided by2 plus 3as now the expression that will be evaluated perform last step again 35 plus400 divided by2 plus 3is now the stack repeat agian 35 plus400 divided by 5 is now the stack after that repeat 35 plus 80is now the stack repeat again 115 is now the stack and is returned,"['hard', 'time', 'explaining', 'show', 'infix', 'evaluated', 'instead', 'start', 'infix', 'expression', 'like5', 'plus', '2multiplied', '5plus400', 'divided', 'by2', 'plus', '3', 'push', 'items', 'get', 'happens', 'perform', 'operations', 'reach', 'complete', '7', 'multiplied', '5plus400', 'divided', 'by2', 'plus', '3as', 'expression', 'evaluated', 'perform', 'last', 'step', '35', 'plus400', 'divided', 'by2', 'plus', '3is', 'stack', 'repeat', 'agian', '35', 'plus400', 'divided', '5', 'stack', 'repeat', '35', 'plus', '80is', 'stack', 'repeat', '115', 'stack', 'returned']",hard time explain show infix evalu instead start infix express like5 plu 2multipli 5plus400 divid by2 plu 3 push item get happen perform oper reach complet 7 multipli 5plus400 divid by2 plu 3a express evalu perform last step 35 plus400 divid by2 plu 3i stack repeat agian 35 plus400 divid 5 stack repeat 35 plu 80i stack repeat 115 stack return,hard time explaining show infix evaluated instead start infix expression like5 plus 2multiplied 5plus400 divided by2 plus 3 push item get happens perform operation reach complete 7 multiplied 5plus400 divided by2 plus 3as expression evaluated perform last step 35 plus400 divided by2 plus 3is stack repeat agian 35 plus400 divided 5 stack repeat 35 plus 80is stack repeat 115 stack returned
The infix expression is converted to postfix form,5.0,1.0,the infix expression is converted to postfix form,"['infix', 'expression', 'converted', 'postfix', 'form']",infix express convert postfix form,infix expression converted postfix form
by converting them to postfix expressions and putting the operations in a stack,5.0,1.0,by converting them to postfix expressions and putting the operations in a stack,"['converting', 'postfix', 'expressions', 'putting', 'operations', 'stack']",convert postfix express put oper stack,converting postfix expression putting operation stack
The computer converts the infix expression to postfix form. Then evaluates the postfix expression.,5.0,1.0,the computer converts the infix expression to postfix form then evaluates the postfix expression,"['computer', 'converts', 'infix', 'expression', 'postfix', 'form', 'evaluates', 'postfix', 'expression']",comput convert infix express postfix form evalu postfix express,computer convert infix expression postfix form evaluates postfix expression
infix expressions are converted to postfix expressions before they can be evaluated by a computer. Operands stay in the same order. Operators always follow the operands.,5.0,1.0,infix expressions are converted to postfix expressions before they can be evaluated by a computer operands stay in the same order operators always follow the operands,"['infix', 'expressions', 'converted', 'postfix', 'expressions', 'evaluated', 'computer', 'operands', 'stay', 'order', 'operators', 'always', 'follow', 'operands']",infix express convert postfix express evalu comput operand stay order oper alway follow operand,infix expression converted postfix expression evaluated computer operand stay order operator always follow operand
infix expressions are pointers evaluated by reference to the memory location,1.5,0.0,infix expressions are pointers evaluated by reference to the memory location,"['infix', 'expressions', 'pointers', 'evaluated', 'reference', 'memory', 'location']",infix express pointer evalu refer memori locat,infix expression pointer evaluated reference memory location
computers convert infix expressions to postfix form before evaluation,5.0,1.0,computers convert infix expressions to postfix form before evaluation,"['computers', 'convert', 'infix', 'expressions', 'postfix', 'form', 'evaluation']",comput convert infix express postfix form evalu,computer convert infix expression postfix form evaluation
convert infix expressions to postfix expression and evaluate the postfix expression,5.0,1.0,convert infix expressions to postfix expression and evaluate the postfix expression,"['convert', 'infix', 'expressions', 'postfix', 'expression', 'evaluate', 'postfix', 'expression']",convert infix express postfix express evalu postfix express,convert infix expression postfix expression evaluate postfix expression
"When an operand is entered, the computer Pushes it onto a stack When an operator is entered, the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack",4.0,1.0,when an operand is entered the computer pushes it onto a stack when an operator is entered the computer applies it to the top two operands of the stack pops the operands from the stack pushes the result of the operation onto the stack,"['operand', 'entered', 'computer', 'pushes', 'onto', 'stack', 'operator', 'entered', 'computer', 'applies', 'top', 'two', 'operands', 'stack', 'pops', 'operands', 'stack', 'pushes', 'result', 'operation', 'onto', 'stack']",operand enter comput push onto stack oper enter comput appli top two operand stack pop operand stack push result oper onto stack,operand entered computer push onto stack operator entered computer applies top two operand stack pop operand stack push result operation onto stack
Computers convert an infix expression into a postfix expression. They then push the numbers onto a stack and pop them out as they are needed.,5.0,1.0,computers convert an infix expression into a postfix expression they then push the numbers onto a stack and pop them out as they are needed,"['computers', 'convert', 'infix', 'expression', 'postfix', 'expression', 'push', 'numbers', 'onto', 'stack', 'pop', 'needed']",comput convert infix express postfix express push number onto stack pop need,computer convert infix expression postfix expression push number onto stack pop needed
"infix expressions are converted to postfix,i. e. 3 plus 2 is changed to 32 plus",5.0,1.0,infix expressions are converted to postfixi e 3 plus 2 is changed to 32 plus,"['infix', 'expressions', 'converted', 'postfixi', 'e', '3', 'plus', '2', 'changed', '32', 'plus']",infix express convert postfixi e 3 plu 2 chang 32 plu,infix expression converted postfixi e 3 plus 2 changed 32 plus
"they are transformed into post-fix expressions, then evaluated with a stack.",5.0,1.0,they are transformed into post-fix expressions then evaluated with a stack,"['transformed', 'post-fix', 'expressions', 'evaluated', 'stack']",transform post-fix express evalu stack,transformed post-fix expression evaluated stack
"Writing arithmetic expressions is called infix notation. This is because a binary operatorlike plusis written in between its two operandsas in a plus b. There are two alternative forms of notation used in certain situations. One is prefix notation, in which an operator is written before its operands. In prefix notation, the sum of a and b is written plus a b. This is the notation used to write function calls in mathematics and computer science. It is also used in the Lisp and Scheme programming languages. In postfix notation, an operator is written after its operands. The sum of a and b is written a b plus.You may have seen this as reverse Polish notation.Postfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer. One important characteristic of both postfix and prefix notations is that they are unambiguous; no parentheses are needed to indicate the order of operations.",5.0,1.0,writing arithmetic expressions is called infix notation this is because a binary operatorlike plusis written in between its two operandsas in a plus b there are two alternative forms of notation used in certain situations one is prefix notation in which an operator is written before its operands in prefix notation the sum of a and b is written plus a b this is the notation used to write function calls in mathematics and computer science it is also used in the lisp and scheme programming languages in postfix notation an operator is written after its operands the sum of a and b is written a b plusyou may have seen this as reverse polish notationpostfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer one important characteristic of both postfix and prefix notations is that they are unambiguous no parentheses are needed to indicate the order of operations,"['writing', 'arithmetic', 'expressions', 'called', 'infix', 'notation', 'binary', 'operatorlike', 'plusis', 'written', 'two', 'operandsas', 'plus', 'b', 'two', 'alternative', 'forms', 'notation', 'used', 'certain', 'situations', 'one', 'prefix', 'notation', 'operator', 'written', 'operands', 'prefix', 'notation', 'sum', 'b', 'written', 'plus', 'b', 'notation', 'used', 'write', 'function', 'calls', 'mathematics', 'computer', 'science', 'also', 'used', 'lisp', 'scheme', 'programming', 'languages', 'postfix', 'notation', 'operator', 'written', 'operands', 'sum', 'b', 'written', 'b', 'plusyou', 'may', 'seen', 'reverse', 'polish', 'notationpostfix', 'notation', 'forms', 'conceptual', 'basis', 'way', 'arithmetic', 'expressions', 'evaluated', 'computer', 'one', 'important', 'characteristic', 'postfix', 'prefix', 'notations', 'unambiguous', 'parentheses', 'needed', 'indicate', 'order', 'operations']",write arithmet express call infix notat binari operatorlik plusi written two operandsa plu b two altern form notat use certain situat one prefix notat oper written operand prefix notat sum b written plu b notat use write function call mathemat comput scienc also use lisp scheme program languag postfix notat oper written operand sum b written b plusyou may seen revers polish notationpostfix notat form conceptu basi way arithmet express evalu comput one import characterist postfix prefix notat unambigu parenthes need indic order oper,writing arithmetic expression called infix notation binary operatorlike plusis written two operandsas plus b two alternative form notation used certain situation one prefix notation operator written operand prefix notation sum b written plus b notation used write function call mathematics computer science also used lisp scheme programming language postfix notation operator written operand sum b written b plusyou may seen reverse polish notationpostfix notation form conceptual basis way arithmetic expression evaluated computer one important characteristic postfix prefix notation unambiguous parenthesis needed indicate order operation
isEmptry or or determines if the stack is full or not pop or or to remove the top element if it is not the on you are looking for search or or you compare each element of the stack to the data you are looking for.,3.0,0.0,isemptry or or determines if the stack is full or not pop or or to remove the top element if it is not the on you are looking for search or or you compare each element of the stack to the data you are looking for,"['isemptry', 'determines', 'stack', 'full', 'pop', 'remove', 'top', 'element', 'looking', 'search', 'compare', 'element', 'stack', 'data', 'looking']",isemptri determin stack full pop remov top element look search compar element stack data look,isemptry determines stack full pop remove top element looking search compare element stack data looking
You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for.,3.0,0.0,you would have to keep using peek or gettop to see what the top element is then popping the top element until peek or gettop provides the element you are looking for,"['would', 'keep', 'using', 'peek', 'gettop', 'see', 'top', 'element', 'popping', 'top', 'element', 'peek', 'gettop', 'provides', 'element', 'looking']",would keep use peek gettop see top element pop top element peek gettop provid element look,would keep using peek gettop see top element popping top element peek gettop provides element looking
Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack.,3.0,0.0,push adds a given node to the top of the stack leaving previous nodes below pop removes and returns the current top node of the stack,"['push', 'adds', 'given', 'node', 'top', 'stack', 'leaving', 'previous', 'nodes', 'pop', 'removes', 'returns', 'current', 'top', 'node', 'stack']",push add given node top stack leav previou node pop remov return current top node stack,push add given node top stack leaving previous node pop remove return current top node stack
"Using linked lists and stacks, you would need a temp stack to retain the values. Then you would use the Pop function to pop off each element and then compare it. If its not the element your looking for, Push it to the temp stack. Repeat until the element is found. When you find it, Pop off the temp stack back onto the regular stack to have a complete stack again.",5.0,1.0,using linked lists and stacks you would need a temp stack to retain the values then you would use the pop function to pop off each element and then compare it if its not the element your looking for push it to the temp stack repeat until the element is found when you find it pop off the temp stack back onto the regular stack to have a complete stack again,"['using', 'linked', 'lists', 'stacks', 'would', 'need', 'temp', 'stack', 'retain', 'values', 'would', 'use', 'pop', 'function', 'pop', 'element', 'compare', 'element', 'looking', 'push', 'temp', 'stack', 'repeat', 'element', 'found', 'find', 'pop', 'temp', 'stack', 'back', 'onto', 'regular', 'stack', 'complete', 'stack']",use link list stack would need temp stack retain valu would use pop function pop element compar element look push temp stack repeat element found find pop temp stack back onto regular stack complet stack,using linked list stack would need temp stack retain value would use pop function pop element compare element looking push temp stack repeat element found find pop temp stack back onto regular stack complete stack
"Pop each item off the top until you find what you are looking for. If the stack ends up empty and you never found the item, then it does not exist in the stack. It may also be necessary to save the popped values in case you want to recreate the stack.",5.0,1.0,pop each item off the top until you find what you are looking for if the stack ends up empty and you never found the item then it does not exist in the stack it may also be necessary to save the popped values in case you want to recreate the stack,"['pop', 'item', 'top', 'find', 'looking', 'stack', 'ends', 'empty', 'never', 'found', 'item', 'exist', 'stack', 'may', 'also', 'necessary', 'save', 'popped', 'values', 'case', 'want', 'recreate', 'stack']",pop item top find look stack end empti never found item exist stack may also necessari save pop valu case want recreat stack,pop item top find looking stack end empty never found item exist stack may also necessary save popped value case want recreate stack
"if the stack is implemented using an array you could simply search the array for the item. If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty, you would then have to have the items put back into the list.",4.5,1.0,if the stack is implemented using an array you could simply search the array for the item if the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty you would then have to have the items put back into the list,"['stack', 'implemented', 'using', 'array', 'could', 'simply', 'search', 'array', 'item', 'stack', 'implemented', 'using', 'linked', 'list', 'would', 'pop', 'values', 'stack', 'either', 'value', 'found', 'stack', 'empty', 'would', 'items', 'put', 'back', 'list']",stack implement use array could simpli search array item stack implement use link list would pop valu stack either valu found stack empti would item put back list,stack implemented using array could simply search array item stack implemented using linked list would pop value stack either value found stack empty would item put back list
"You need to pop each item on the stack and compare the item. Once the item is found, no more items need to be removed.",3.5,0.0,you need to pop each item on the stack and compare the item once the item is found no more items need to be removed,"['need', 'pop', 'item', 'stack', 'compare', 'item', 'item', 'found', 'items', 'need', 'removed']",need pop item stack compar item item found item need remov,need pop item stack compare item item found item need removed
"Pop an element from one stack, check to see if it is the desired element, if not push it onto another stack. When finished, pop the items from the second stack and push them back onto the first stackthis will ensure the order of the elements is maintained.",5.0,1.0,pop an element from one stack check to see if it is the desired element if not push it onto another stack when finished pop the items from the second stack and push them back onto the first stackthis will ensure the order of the elements is maintained,"['pop', 'element', 'one', 'stack', 'check', 'see', 'desired', 'element', 'push', 'onto', 'another', 'stack', 'finished', 'pop', 'items', 'second', 'stack', 'push', 'back', 'onto', 'first', 'stackthis', 'ensure', 'order', 'elements', 'maintained']",pop element one stack check see desir element push onto anoth stack finish pop item second stack push back onto first stackthi ensur order element maintain,pop element one stack check see desired element push onto another stack finished pop item second stack push back onto first stackthis ensure order element maintained
Basically pop the stack until you find the given element.,3.5,0.0,basically pop the stack until you find the given element,"['basically', 'pop', 'stack', 'find', 'given', 'element']",basic pop stack find given element,basically pop stack find given element
"Iterate through the stack, checking the number against the current element.",1.5,0.0,iterate through the stack checking the number against the current element,"['iterate', 'stack', 'checking', 'number', 'current', 'element']",iter stack check number current element,iterate stack checking number current element
pop and push,3.0,0.0,pop and push,"['pop', 'push']",pop push,pop push
pop all elements off stack until you find that element and then push the popped elements back on the stack,5.0,1.0,pop all elements off stack until you find that element and then push the popped elements back on the stack,"['pop', 'elements', 'stack', 'find', 'element', 'push', 'popped', 'elements', 'back', 'stack']",pop element stack find element push pop element back stack,pop element stack find element push popped element back stack
"Keep popping nodes and storing them in an alternate stack until the given element is found, then pop the given element and push the previously popped nodes back onto the stack.",5.0,1.0,keep popping nodes and storing them in an alternate stack until the given element is found then pop the given element and push the previously popped nodes back onto the stack,"['keep', 'popping', 'nodes', 'storing', 'alternate', 'stack', 'given', 'element', 'found', 'pop', 'given', 'element', 'push', 'previously', 'popped', 'nodes', 'back', 'onto', 'stack']",keep pop node store altern stack given element found pop given element push previous pop node back onto stack,keep popping node storing alternate stack given element found pop given element push previously popped node back onto stack
either traverse the entire list and pop the given part or create a pointer system that automatically points to it.,3.0,0.0,either traverse the entire list and pop the given part or create a pointer system that automatically points to it,"['either', 'traverse', 'entire', 'list', 'pop', 'given', 'part', 'create', 'pointer', 'system', 'automatically', 'points']",either travers entir list pop given part creat pointer system automat point,either traverse entire list pop given part create pointer system automatically point
"Depends on the type of stack, on a true stack you will haft to pop all of the elements of the stack until you find the element you want, and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed. With a Java style stack, where there is a peek function, it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack.",5.0,1.0,depends on the type of stack on a true stack you will haft to pop all of the elements of the stack until you find the element you want and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed with a java style stack where there is a peek function it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack,"['depends', 'type', 'stack', 'true', 'stack', 'haft', 'pop', 'elements', 'stack', 'find', 'element', 'want', 'need', 'push', 'elements', 'removed', 'back', 'stack', 'order', 'removed', 'java', 'style', 'stack', 'peek', 'function', 'return', 'element', 'wanted', 'instead', 'requiring', 'perform', 'excessive', 'actions', 'required', 'true', 'stack']",depend type stack true stack haft pop element stack find element want need push element remov back stack order remov java style stack peek function return element want instead requir perform excess action requir true stack,depends type stack true stack haft pop element stack find element want need push element removed back stack order removed java style stack peek function return element wanted instead requiring perform excessive action required true stack
if top item! equals given element pop the stack. Repeat until item is found or stack is empty,3.5,0.0,if top item! equals given element pop the stack repeat until item is found or stack is empty,"['top', 'item', '!', 'equals', 'given', 'element', 'pop', 'stack', 'repeat', 'item', 'found', 'stack', 'empty']",top item ! equal given element pop stack repeat item found stack empti,top item ! equal given element pop stack repeat item found stack empty
could traverse through the list or array to find the element.,2.0,0.0,could traverse through the list or array to find the element,"['could', 'traverse', 'list', 'array', 'find', 'element']",could travers list array find element,could traverse list array find element
you need the pop opertation to go throught the stack and find the element.,3.5,0.0,you need the pop opertation to go throught the stack and find the element,"['need', 'pop', 'opertation', 'go', 'throught', 'stack', 'find', 'element']",need pop opert go throught stack find element,need pop opertation go throught stack find element
"createStack, push, isEmpty, pop, and a boolean return value.",3.0,0.0,createstack push isempty pop and a boolean return value,"['createstack', 'push', 'isempty', 'pop', 'boolean', 'return', 'value']",createstack push isempti pop boolean return valu,createstack push isempty pop boolean return value
you would have to traverse the stack popping each element to search it,3.5,0.0,you would have to traverse the stack popping each element to search it,"['would', 'traverse', 'stack', 'popping', 'element', 'search']",would travers stack pop element search,would traverse stack popping element search
Pop each element off the stackand into another stack for storageuntil the desired element is found.,4.0,1.0,pop each element off the stackand into another stack for storageuntil the desired element is found,"['pop', 'element', 'stackand', 'another', 'stack', 'storageuntil', 'desired', 'element', 'found']",pop element stackand anoth stack storageuntil desir element found,pop element stackand another stack storageuntil desired element found
pop operation,2.5,0.0,pop operation,"['pop', 'operation']",pop oper,pop operation
to pop elements then push them back,4.5,1.0,to pop elements then push them back,"['pop', 'elements', 'push', 'back']",pop element push back,pop element push back
A function to keep track of the elements popped and a function to put the popped elements backinto the function.,4.5,1.0,a function to keep track of the elements popped and a function to put the popped elements backinto the function,"['function', 'keep', 'track', 'elements', 'popped', 'function', 'put', 'popped', 'elements', 'backinto', 'function']",function keep track element pop function put pop element backinto function,function keep track element popped function put popped element backinto function
you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost,4.5,1.0,you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost,"['would', 'pop', 'element', 'compare', 'looking', 'push', 'back', 'stack', 'lost']",would pop element compar look push back stack lost,would pop element compare looking push back stack lost
you would need to perform a search through the list of elementsi dont really understand what this question is asking ... its not very clear?,1.5,0.0,you would need to perform a search through the list of elementsi dont really understand what this question is asking its not very clear,"['would', 'need', 'perform', 'search', 'list', 'elementsi', 'dont', 'really', 'understand', 'question', 'asking', 'clear']",would need perform search list elementsi dont realli understand question ask clear,would need perform search list elementsi dont really understand question asking clear
StackPush StackPop StackIsEmpty,3.0,0.0,stackpush stackpop stackisempty,"['stackpush', 'stackpop', 'stackisempty']",stackpush stackpop stackisempti,stackpush stackpop stackisempty
A data structure in c plus plus which is a collection of data that is kept in order. First in first out.,5.0,1.0,a data structure in c plus plus which is a collection of data that is kept in order first in first out,"['data', 'structure', 'c', 'plus', 'plus', 'collection', 'data', 'kept', 'order', 'first', 'first']",data structur c plu plu collect data kept order first first,data structure c plus plus collection data kept order first first
a queue is a list of objects in a particular order that is read one at a time starting at the first followed by the second and so on.,4.0,1.0,a queue is a list of objects in a particular order that is read one at a time starting at the first followed by the second and so on,"['queue', 'list', 'objects', 'particular', 'order', 'read', 'one', 'time', 'starting', 'first', 'followed', 'second']",queue list object particular order read one time start first follow second,queue list object particular order read one time starting first followed second
A queue is an abstract data structure in which operations are performed at both ends giving the queue first in first out behavior.,5.0,1.0,a queue is an abstract data structure in which operations are performed at both ends giving the queue first in first out behavior,"['queue', 'abstract', 'data', 'structure', 'operations', 'performed', 'ends', 'giving', 'queue', 'first', 'first', 'behavior']",queue abstract data structur oper perform end give queue first first behavior,queue abstract data structure operation performed end giving queue first first behavior
"A queue stores a set of elements in a particular order. Its principle of operation is FIFOfirst in first out, which means the first element inserted is the first one to be removed.",5.0,1.0,a queue stores a set of elements in a particular order its principle of operation is fifofirst in first out which means the first element inserted is the first one to be removed,"['queue', 'stores', 'set', 'elements', 'particular', 'order', 'principle', 'operation', 'fifofirst', 'first', 'means', 'first', 'element', 'inserted', 'first', 'one', 'removed']",queue store set element particular order principl oper fifofirst first mean first element insert first one remov,queue store set element particular order principle operation fifofirst first mean first element inserted first one removed
An ADT whose first inserted item is the first item removed. This uses the FIFO idea where items enter a queue at its back and leave at its front.,5.0,1.0,an adt whose first inserted item is the first item removed this uses the fifo idea where items enter a queue at its back and leave at its front,"['adt', 'whose', 'first', 'inserted', 'item', 'first', 'item', 'removed', 'uses', 'fifo', 'idea', 'items', 'enter', 'queue', 'back', 'leave', 'front']",adt whose first insert item first item remov use fifo idea item enter queue back leav front,adt whose first inserted item first item removed us fifo idea item enter queue back leave front
"Last in, last out architecture. It works the same way a line at the bank would work, the person that is been waiting the longest gets served first.",5.0,1.0,last in last out architecture it works the same way a line at the bank would work the person that is been waiting the longest gets served first,"['last', 'last', 'architecture', 'works', 'way', 'line', 'bank', 'would', 'work', 'person', 'waiting', 'longest', 'gets', 'served', 'first']",last last architectur work way line bank would work person wait longest get serv first,last last architecture work way line bank would work person waiting longest get served first
a queue is a data structure that stores elements in a First in First out order.,5.0,1.0,a queue is a data structure that stores elements in a first in first out order,"['queue', 'data', 'structure', 'stores', 'elements', 'first', 'first', 'order']",queue data structur store element first first order,queue data structure store element first first order
A waiting list of items that operation in a FIFOfirst in first outorder.,5.0,1.0,a waiting list of items that operation in a fifofirst in first outorder,"['waiting', 'list', 'items', 'operation', 'fifofirst', 'first', 'outorder']",wait list item oper fifofirst first outord,waiting list item operation fifofirst first outorder
"A queue is similar to an array, except that the data can only be accessed sequentially rather than at random. Unlike a stack, a queue follows FIFO. First in, First out.",5.0,1.0,a queue is similar to an array except that the data can only be accessed sequentially rather than at random unlike a stack a queue follows fifo first in first out,"['queue', 'similar', 'array', 'except', 'data', 'accessed', 'sequentially', 'rather', 'random', 'unlike', 'stack', 'queue', 'follows', 'fifo', 'first', 'first']",queue similar array except data access sequenti rather random unlik stack queue follow fifo first first,queue similar array except data accessed sequentially rather random unlike stack queue follows fifo first first
is a particular kind of collection in which the entities in the collection are kept in order and the principalor onlyoperations on the collection are the addition of entities to the rear terminal position and removal of entities from the front terminal position. First in First OutFIFO Method.,5.0,1.0,is a particular kind of collection in which the entities in the collection are kept in order and the principalor onlyoperations on the collection are the addition of entities to the rear terminal position and removal of entities from the front terminal position first in first outfifo method,"['particular', 'kind', 'collection', 'entities', 'collection', 'kept', 'order', 'principalor', 'onlyoperations', 'collection', 'addition', 'entities', 'rear', 'terminal', 'position', 'removal', 'entities', 'front', 'terminal', 'position', 'first', 'first', 'outfifo', 'method']",particular kind collect entiti collect kept order principalor onlyoper collect addit entiti rear termin posit remov entiti front termin posit first first outfifo method,particular kind collection entity collection kept order principalor onlyoperations collection addition entity rear terminal position removal entity front terminal position first first outfifo method
Like a linked list but first in first out,4.5,1.0,like a linked list but first in first out,"['like', 'linked', 'list', 'first', 'first']",like link list first first,like linked list first first
A queue is a FIFO data structure.,5.0,1.0,a queue is a fifo data structure,"['queue', 'fifo', 'data', 'structure']",queue fifo data structur,queue fifo data structure
A queue is a first in first out data structure.,5.0,1.0,a queue is a first in first out data structure,"['queue', 'first', 'first', 'data', 'structure']",queue first first data structur,queue first first data structure
"Its like a stack, but uses the linked list to stack a little differently. It is FIFO so the first thing enqueued is the first thing dequeued",5.0,1.0,its like a stack but uses the linked list to stack a little differently it is fifo so the first thing enqueued is the first thing dequeued,"['like', 'stack', 'uses', 'linked', 'list', 'stack', 'little', 'differently', 'fifo', 'first', 'thing', 'enqueued', 'first', 'thing', 'dequeued']",like stack use link list stack littl differ fifo first thing enqueu first thing dequeu,like stack us linked list stack little differently fifo first thing enqueued first thing dequeued
"A first in, first out Abstract Data type that can be used to store values.",5.0,1.0,a first in first out abstract data type that can be used to store values,"['first', 'first', 'abstract', 'data', 'type', 'used', 'store', 'values']",first first abstract data type use store valu,first first abstract data type used store value
"Stores a set of elements in a particular order with a First In, First Out principle",5.0,1.0,stores a set of elements in a particular order with a first in first out principle,"['stores', 'set', 'elements', 'particular', 'order', 'first', 'first', 'principle']",store set element particular order first first principl,store set element particular order first first principle
object that stores elements in order that follows first in first out. the first element added is the first one to come off.,5.0,1.0,object that stores elements in order that follows first in first out the first element added is the first one to come off,"['object', 'stores', 'elements', 'order', 'follows', 'first', 'first', 'first', 'element', 'added', 'first', 'one', 'come']",object store element order follow first first first element ad first one come,object store element order follows first first first element added first one come
"A quese is an list that stores a set of elements in a particular order. It has Stack principle, but in this case, its First In, First Out. The first element inserted is the first element to be removed.",5.0,1.0,a quese is an list that stores a set of elements in a particular order it has stack principle but in this case its first in first out the first element inserted is the first element to be removed,"['quese', 'list', 'stores', 'set', 'elements', 'particular', 'order', 'stack', 'principle', 'case', 'first', 'first', 'first', 'element', 'inserted', 'first', 'element', 'removed']",ques list store set element particular order stack principl case first first first element insert first element remov,quese list store set element particular order stack principle case first first first element inserted first element removed
"a finite ordered list with zero or more elements, based upon First In First Out",5.0,1.0,a finite ordered list with zero or more elements based upon first in first out,"['finite', 'ordered', 'list', 'zero', 'elements', 'based', 'upon', 'first', 'first']",finit order list zero element base upon first first,finite ordered list zero element based upon first first
a data structure that performs operations in the order of first in first out FIFO,5.0,1.0,a data structure that performs operations in the order of first in first out fifo,"['data', 'structure', 'performs', 'operations', 'order', 'first', 'first', 'fifo']",data structur perform oper order first first fifo,data structure performs operation order first first fifo
"A Queue is a first in first out data structure, such that the first element added is also the first removed.",5.0,1.0,a queue is a first in first out data structure such that the first element added is also the first removed,"['queue', 'first', 'first', 'data', 'structure', 'first', 'element', 'added', 'also', 'first', 'removed']",queue first first data structur first element ad also first remov,queue first first data structure first element added also first removed
"Queue is a buffer, which store element in a particular order",3.5,0.0,queue is a buffer which store element in a particular order,"['queue', 'buffer', 'store', 'element', 'particular', 'order']",queue buffer store element particular order,queue buffer store element particular order
"stores a set of elements where the first element in, is the first element to be removed",5.0,1.0,stores a set of elements where the first element in is the first element to be removed,"['stores', 'set', 'elements', 'first', 'element', 'first', 'element', 'removed']",store set element first element first element remov,store set element first element first element removed
A data structure that removes nodes from the head and adds nodes at the tail.,5.0,1.0,a data structure that removes nodes from the head and adds nodes at the tail,"['data', 'structure', 'removes', 'nodes', 'head', 'adds', 'nodes', 'tail']",data structur remov node head add node tail,data structure remove node head add node tail
a queue is a list of things that follows the first in first out behavior,5.0,1.0,a queue is a list of things that follows the first in first out behavior,"['queue', 'list', 'things', 'follows', 'first', 'first', 'behavior']",queue list thing follow first first behavior,queue list thing follows first first behavior
"a queue is a storage container that holds its objects in a first in, first out priority",5.0,1.0,a queue is a storage container that holds its objects in a first in first out priority,"['queue', 'storage', 'container', 'holds', 'objects', 'first', 'first', 'priority']",queue storag contain hold object first first prioriti,queue storage container hold object first first priority
"The queue is another data structure. A physical analogy for a queue is a line at a bank. When you go to the bank, customers go to the rearendof the line and customers come off of the linei. e., are servicedfrom the front of the line.",5.0,1.0,the queue is another data structure a physical analogy for a queue is a line at a bank when you go to the bank customers go to the rearendof the line and customers come off of the linei e are servicedfrom the front of the line,"['queue', 'another', 'data', 'structure', 'physical', 'analogy', 'queue', 'line', 'bank', 'go', 'bank', 'customers', 'go', 'rearendof', 'line', 'customers', 'come', 'linei', 'e', 'servicedfrom', 'front', 'line']",queue anoth data structur physic analog queue line bank go bank custom go rearendof line custom come linei e servicedfrom front line,queue another data structure physical analogy queue line bank go bank customer go rearendof line customer come linei e servicedfrom front line
enqueue which adds data to the queue and dequeue which deletes data from the queue,5.0,1.0,enqueue which adds data to the queue and dequeue which deletes data from the queue,"['enqueue', 'adds', 'data', 'queue', 'dequeue', 'deletes', 'data', 'queue']",enqueu add data queue dequeu delet data queue,enqueue add data queue dequeue deletes data queue
"enqueue, which inserts a specified element at the head of the specified queue, and dequeue, which removes the specified element from the queue.",5.0,1.0,enqueue which inserts a specified element at the head of the specified queue and dequeue which removes the specified element from the queue,"['enqueue', 'inserts', 'specified', 'element', 'head', 'specified', 'queue', 'dequeue', 'removes', 'specified', 'element', 'queue']",enqueu insert specifi element head specifi queue dequeu remov specifi element queue,enqueue insert specified element head specified queue dequeue remove specified element queue
The two main functions are enqueue which inserts an item at the back of the queue and dequeue which removes an item from the front of the queue.,5.0,1.0,the two main functions are enqueue which inserts an item at the back of the queue and dequeue which removes an item from the front of the queue,"['two', 'main', 'functions', 'enqueue', 'inserts', 'item', 'back', 'queue', 'dequeue', 'removes', 'item', 'front', 'queue']",two main function enqueu insert item back queue dequeu remov item front queue,two main function enqueue insert item back queue dequeue remove item front queue
The two main functions are enqueue and dequeue.,5.0,1.0,the two main functions are enqueue and dequeue,"['two', 'main', 'functions', 'enqueue', 'dequeue']",two main function enqueu dequeu,two main function enqueue dequeue
Enqueue and Dequeue,5.0,1.0,enqueue and dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
Enqueue and Dequeue,5.0,1.0,enqueue and dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
enqueue insert into queue dequeue remove element,5.0,1.0,enqueue insert into queue dequeue remove element,"['enqueue', 'insert', 'queue', 'dequeue', 'remove', 'element']",enqueu insert queue dequeu remov element,enqueue insert queue dequeue remove element
"Remove the item added first, add items to the back.",5.0,1.0,remove the item added first add items to the back,"['remove', 'item', 'added', 'first', 'add', 'items', 'back']",remov item ad first add item back,remove item added first add item back
The two main functions of a queue are enqueue and dequeue.,5.0,1.0,the two main functions of a queue are enqueue and dequeue,"['two', 'main', 'functions', 'queue', 'enqueue', 'dequeue']",two main function queue enqueu dequeu,two main function queue enqueue dequeue
enqueue and dequeue.,5.0,1.0,enqueue and dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
enqueue and dequeue,5.0,1.0,enqueue and dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
Enqueue and Dequeue,5.0,1.0,enqueue and dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
enqueue and dequeue,5.0,1.0,enqueue and dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
enqueue and dequeue,5.0,1.0,enqueue and dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
"enqueData, Deque",5.0,1.0,enquedata deque,"['enquedata', 'deque']",enquedata dequ,enquedata deque
enqueue and dequeue,5.0,1.0,enqueue and dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
enqueue and dequeue,5.0,1.0,enqueue and dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
"The two functions are, Enqueue and Dequeue",5.0,1.0,the two functions are enqueue and dequeue,"['two', 'functions', 'enqueue', 'dequeue']",two function enqueu dequeu,two function enqueue dequeue
"enqueue, dequeue",5.0,1.0,enqueue dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
"enqueue, that adds an item to the queue dequeue, that takes the first item out of the queue",5.0,1.0,enqueue that adds an item to the queue dequeue that takes the first item out of the queue,"['enqueue', 'adds', 'item', 'queue', 'dequeue', 'takes', 'first', 'item', 'queue']",enqueu add item queue dequeu take first item queue,enqueue add item queue dequeue take first item queue
"Enqueue and dequeue, which add and remove elements from the queue",5.0,1.0,enqueue and dequeue which add and remove elements from the queue,"['enqueue', 'dequeue', 'add', 'remove', 'elements', 'queue']",enqueu dequeu add remov element queue,enqueue dequeue add remove element queue
Enqueue and Dequeue,5.0,1.0,enqueue and dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
dequeue and enqueue,5.0,1.0,dequeue and enqueue,"['dequeue', 'enqueue']",dequeu enqueu,dequeue enqueue
enqueue and dequeue,5.0,1.0,enqueue and dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
enqueue and dequeue,5.0,1.0,enqueue and dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
enqueue dequeue,5.0,1.0,enqueue dequeue,"['enqueue', 'dequeue']",enqueu dequeu,enqueue dequeue
rear and front,2.5,0.0,rear and front,"['rear', 'front']",rear front,rear front
Make use of a front pointer and a tail pointer. When the tail pointer reaches the end of an array it gets reset to the front of the array. If the two pointers are equal then the queue is either full or just has one element.,4.5,1.0,make use of a front pointer and a tail pointer when the tail pointer reaches the end of an array it gets reset to the front of the array if the two pointers are equal then the queue is either full or just has one element,"['make', 'use', 'front', 'pointer', 'tail', 'pointer', 'tail', 'pointer', 'reaches', 'end', 'array', 'gets', 'reset', 'front', 'array', 'two', 'pointers', 'equal', 'queue', 'either', 'full', 'one', 'element']",make use front pointer tail pointer tail pointer reach end array get reset front array two pointer equal queue either full one element,make use front pointer tail pointer tail pointer reach end array get reset front array two pointer equal queue either full one element
you create an array with the max size of your queue and adjust the items to make them follow FIFO procedure.,3.0,0.0,you create an array with the max size of your queue and adjust the items to make them follow fifo procedure,"['create', 'array', 'max', 'size', 'queue', 'adjust', 'items', 'make', 'follow', 'fifo', 'procedure']",creat array max size queue adjust item make follow fifo procedur,create array max size queue adjust item make follow fifo procedure
By implementing an array and only adding items to the end of the array and only removing items from the beginning of the array.,3.0,0.0,by implementing an array and only adding items to the end of the array and only removing items from the beginning of the array,"['implementing', 'array', 'adding', 'items', 'end', 'array', 'removing', 'items', 'beginning', 'array']",implement array ad item end array remov item begin array,implementing array adding item end array removing item beginning array
"For applications in which a fixed-sized queue does not present a problem, you can use an array to represent a queue.",2.5,0.0,for applications in which a fixed-sized queue does not present a problem you can use an array to represent a queue,"['applications', 'fixed-sized', 'queue', 'present', 'problem', 'use', 'array', 'represent', 'queue']",applic fixed-s queue present problem use array repres queue,application fixed-sized queue present problem use array represent queue
Keep track of the front and the back of the array as you increase and decrease the elements inside the array.,4.0,1.0,keep track of the front and the back of the array as you increase and decrease the elements inside the array,"['keep', 'track', 'front', 'back', 'array', 'increase', 'decrease', 'elements', 'inside', 'array']",keep track front back array increas decreas element insid array,keep track front back array increase decrease element inside array
"Declare the size of an array, and have special conditional statementspointersto make sure you re-use ALL of the array. Say, you have an array of 20 elements, you load up 18, then dequeue 3, when you enqueue 4 more elements, you want to loop back to index 0 and continue from there ... this process saves resources.",4.5,1.0,declare the size of an array and have special conditional statementspointersto make sure you re-use all of the array say you have an array of 20 elements you load up 18 then dequeue 3 when you enqueue 4 more elements you want to loop back to index 0 and continue from there this process saves resources,"['declare', 'size', 'array', 'special', 'conditional', 'statementspointersto', 'make', 'sure', 're-use', 'array', 'say', 'array', '20', 'elements', 'load', '18', 'dequeue', '3', 'enqueue', '4', 'elements', 'want', 'loop', 'back', 'index', '0', 'continue', 'process', 'saves', 'resources']",declar size array special condit statementspointersto make sure re-us array say array 20 element load 18 dequeu 3 enqueu 4 element want loop back index 0 continu process save resourc,declare size array special conditional statementspointersto make sure re-use array say array 20 element load 18 dequeue 3 enqueue 4 element want loop back index 0 continue process save resource
you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular.,4.0,1.0,you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular,"['could', 'use', 'first', 'element', 'list', 'remove', 'point', 'insert', 'end', 'f', 'would', 'shift', 'elements', 'time', 'remove', 'item', 'unless', 'make', 'array', 'circular']",could use first element list remov point insert end f would shift element time remov item unless make array circular,could use first element list remove point insert end f would shift element time remove item unless make array circular
Utilizing indexes for the front and the back. Front is 0 and as you add items the back index is incremented.,4.0,1.0,utilizing indexes for the front and the back front is 0 and as you add items the back index is incremented,"['utilizing', 'indexes', 'front', 'back', 'front', '0', 'add', 'items', 'back', 'index', 'incremented']",util index front back front 0 add item back index increment,utilizing index front back front 0 add item back index incremented
"Declare two variables, front and rear, to be used to denote which elements in the array can be accessed. Increment rear whenever data is enqueued to the end and increment front whenever data is dequeued.",4.5,1.0,declare two variables front and rear to be used to denote which elements in the array can be accessed increment rear whenever data is enqueued to the end and increment front whenever data is dequeued,"['declare', 'two', 'variables', 'front', 'rear', 'used', 'denote', 'elements', 'array', 'accessed', 'increment', 'rear', 'whenever', 'data', 'enqueued', 'end', 'increment', 'front', 'whenever', 'data', 'dequeued']",declar two variabl front rear use denot element array access increment rear whenev data enqueu end increment front whenev data dequeu,declare two variable front rear used denote element array accessed increment rear whenever data enqueued end increment front whenever data dequeued
It is an array of fixed size. A queue of maximum N elements.,2.5,0.0,it is an array of fixed size a queue of maximum n elements,"['array', 'fixed', 'size', 'queue', 'maximum', 'n', 'elements']",array fix size queue maximum n element,array fixed size queue maximum n element
"make an array of a size, and add on to the front and delete from the back, keep track of the two so that you know when it is full and where to add or subtract from",4.0,1.0,make an array of a size and add on to the front and delete from the back keep track of the two so that you know when it is full and where to add or subtract from,"['make', 'array', 'size', 'add', 'front', 'delete', 'back', 'keep', 'track', 'two', 'know', 'full', 'add', 'subtract']",make array size add front delet back keep track two know full add subtract,make array size add front delete back keep track two know full add subtract
By using the beginning of the array as the removal point of the queueor beginning of the queueand the ith element as the end of the queue.,3.5,0.0,by using the beginning of the array as the removal point of the queueor beginning of the queueand the ith element as the end of the queue,"['using', 'beginning', 'array', 'removal', 'point', 'queueor', 'beginning', 'queueand', 'ith', 'element', 'end', 'queue']",use begin array remov point queueor begin queueand ith element end queue,using beginning array removal point queueor beginning queueand ith element end queue
"add in data from the first element to the last, take out data from the first element to the last.",3.0,0.0,add in data from the first element to the last take out data from the first element to the last,"['add', 'data', 'first', 'element', 'last', 'take', 'data', 'first', 'element', 'last']",add data first element last take data first element last,add data first element last take data first element last
you can take the array and put it in a queue stack or you can just traverse the list and keep track of top and bottom,3.5,0.0,you can take the array and put it in a queue stack or you can just traverse the list and keep track of top and bottom,"['take', 'array', 'put', 'queue', 'stack', 'traverse', 'list', 'keep', 'track', 'top', 'bottom']",take array put queue stack travers list keep track top bottom,take array put queue stack traverse list keep track top bottom
"create a fixed array size, with with 2 integers to point to the beginning and the end of the que, and special cases to know when the que is empty or full.",4.0,1.0,create a fixed array size with with 2 integers to point to the beginning and the end of the que and special cases to know when the que is empty or full,"['create', 'fixed', 'array', 'size', '2', 'integers', 'point', 'beginning', 'end', 'que', 'special', 'cases', 'know', 'que', 'empty', 'full']",creat fix array size 2 integ point begin end que special case know que empti full,create fixed array size 2 integer point beginning end que special case know que empty full
Keep track of the front and rear indexes. Either: 1Dequeue items by shifting the array left 2Use wrapped configuration,4.0,1.0,keep track of the front and rear indexes either 1dequeue items by shifting the array left 2use wrapped configuration,"['keep', 'track', 'front', 'rear', 'indexes', 'either', '1dequeue', 'items', 'shifting', 'array', 'left', '2use', 'wrapped', 'configuration']",keep track front rear index either 1dequeu item shift array left 2use wrap configur,keep track front rear index either 1dequeue item shifting array left 2use wrapped configuration
"add items into a fixed size array, pull the items out by calling on them with the starting index, increase starting index so when it calls again its now the next index element in the array.",3.5,0.0,add items into a fixed size array pull the items out by calling on them with the starting index increase starting index so when it calls again its now the next index element in the array,"['add', 'items', 'fixed', 'size', 'array', 'pull', 'items', 'calling', 'starting', 'index', 'increase', 'starting', 'index', 'calls', 'next', 'index', 'element', 'array']",add item fix size array pull item call start index increas start index call next index element array,add item fixed size array pull item calling starting index increase starting index call next index element array
"To use and array to implement a Queue, element or item 0, should be the top element in the array. Every time an element is inserted, all the items in the array are pushed back one space. The top element is always removed first.",3.0,0.0,to use and array to implement a queue element or item 0 should be the top element in the array every time an element is inserted all the items in the array are pushed back one space the top element is always removed first,"['use', 'array', 'implement', 'queue', 'element', 'item', '0', 'top', 'element', 'array', 'every', 'time', 'element', 'inserted', 'items', 'array', 'pushed', 'back', 'one', 'space', 'top', 'element', 'always', 'removed', 'first']",use array implement queue element item 0 top element array everi time element insert item array push back one space top element alway remov first,use array implement queue element item 0 top element array every time element inserted item array pushed back one space top element always removed first
fixed size array with max N elements. Need to keep track of front and rear of array.,4.0,1.0,fixed size array with max n elements need to keep track of front and rear of array,"['fixed', 'size', 'array', 'max', 'n', 'elements', 'need', 'keep', 'track', 'front', 'rear', 'array']",fix size array max n element need keep track front rear array,fixed size array max n element need keep track front rear array
"by keeping track of a front item and a rear item, or with a circular array that uses the modulo function",5.0,1.0,by keeping track of a front item and a rear item or with a circular array that uses the modulo function,"['keeping', 'track', 'front', 'item', 'rear', 'item', 'circular', 'array', 'uses', 'modulo', 'function']",keep track front item rear item circular array use modulo function,keeping track front item rear item circular array us modulo function
"Using an array for a queue, the size of the array allocated limits the size of the queue. An array based queue class must keep track of both the front and back of the queue, which may need to wrap around the array.",5.0,1.0,using an array for a queue the size of the array allocated limits the size of the queue an array based queue class must keep track of both the front and back of the queue which may need to wrap around the array,"['using', 'array', 'queue', 'size', 'array', 'allocated', 'limits', 'size', 'queue', 'array', 'based', 'queue', 'class', 'must', 'keep', 'track', 'front', 'back', 'queue', 'may', 'need', 'wrap', 'around', 'array']",use array queue size array alloc limit size queue array base queue class must keep track front back queue may need wrap around array,using array queue size array allocated limit size queue array based queue class must keep track front back queue may need wrap around array
"A pointer based implementation of a queue could use a linear linked list with two external pointers, one to the front and one to the back",2.0,0.0,a pointer based implementation of a queue could use a linear linked list with two external pointers one to the front and one to the back,"['pointer', 'based', 'implementation', 'queue', 'could', 'use', 'linear', 'linked', 'list', 'two', 'external', 'pointers', 'one', 'front', 'one', 'back']",pointer base implement queue could use linear link list two extern pointer one front one back,pointer based implementation queue could use linear linked list two external pointer one front one back
remove the element then shift the elements one space back,3.0,0.0,remove the element then shift the elements one space back,"['remove', 'element', 'shift', 'elements', 'one', 'space', 'back']",remov element shift element one space back,remove element shift element one space back
By having the head pointer point to the first or least current data entered and having the tail point to the most current data entered. A method must be created so that the tail pointer does not leave the array.,5.0,1.0,by having the head pointer point to the first or least current data entered and having the tail point to the most current data entered a method must be created so that the tail pointer does not leave the array,"['head', 'pointer', 'point', 'first', 'least', 'current', 'data', 'entered', 'tail', 'point', 'current', 'data', 'entered', 'method', 'must', 'created', 'tail', 'pointer', 'leave', 'array']",head pointer point first least current data enter tail point current data enter method must creat tail pointer leav array,head pointer point first least current data entered tail point current data entered method must created tail pointer leave array
an array is a type of queue with a fixed length,1.5,0.0,an array is a type of queue with a fixed length,"['array', 'type', 'queue', 'fixed', 'length']",array type queue fix length,array type queue fixed length
"your storage class has an array, and you keep track of the index of the first and last item in the array, and wrap around when end of the array is full",5.0,1.0,your storage class has an array and you keep track of the index of the first and last item in the array and wrap around when end of the array is full,"['storage', 'class', 'array', 'keep', 'track', 'index', 'first', 'last', 'item', 'array', 'wrap', 'around', 'end', 'array', 'full']",storag class array keep track index first last item array wrap around end array full,storage class array keep track index first last item array wrap around end array full
Boolean isFullQqueue:: equals rear equals equals MAX QUEUE SIZE-1,5.0,1.0,boolean isfullqqueue equals rear equals equals max queue size-1,"['boolean', 'isfullqqueue', 'equals', 'rear', 'equals', 'equals', 'max', 'queue', 'size-1']",boolean isfullqqueu equal rear equal equal max queue size-1,boolean isfullqqueue equal rear equal equal max queue size-1
A list can have unlimited elements in it. You can push a node onto the end of the list and pop the one in the front.,5.0,1.0,a list can have unlimited elements in it you can push a node onto the end of the list and pop the one in the front,"['list', 'unlimited', 'elements', 'push', 'node', 'onto', 'end', 'list', 'pop', 'one', 'front']",list unlimit element push node onto end list pop one front,list unlimited element push node onto end list pop one front
theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory. The more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required. The other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods. that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array. the downside to this method is after you use element one it is still in memory. or im crazy who knows,2.0,0.0,theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory the more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required the other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array the downside to this method is after you use element one it is still in memory or im crazy who knows,"['theoretically', 'could', 'two', 'ways', 'one', 'uses', 'processing', 'power', 'memory', 'larger', 'queue', 'ever', 'full', 'uses', 'almost', 'infinite', 'memory', 'practical', 'method', 'would', 'two', 'place', 'items', 'array', 'remove', 'item', 'position', 'one', 'array', 'shift', 'array', 'add', 'another', 'element', 'required', 'option', 'use', 'infinite', 'memory', 'used', 'long', 'term', 'queues', 'job', 'scheduling', 'goes', 'nonstop', 'extended', 'periods', 'implement', 'array', 'add', 'items', 'read', 'item', 'one', 'raise', 'counter', 'value', 'two', 'ecetera', 'continue', 'adding', 'elements', 'array', 'downside', 'method', 'use', 'element', 'one', 'still', 'memory', 'im', 'crazy', 'knows']",theoret could two way one use process power memori larger queue ever full use almost infinit memori practic method would two place item array remov item posit one array shift array add anoth element requir option use infinit memori use long term queue job schedul goe nonstop extend period implement array add item read item one rais counter valu two ecetera continu ad element array downsid method use element one still memori im crazi know,theoretically could two way one us processing power memory larger queue ever full us almost infinite memory practical method would two place item array remove item position one array shift array add another element required option use infinite memory used long term queue job scheduling go nonstop extended period implement array add item read item one raise counter value two ecetera continue adding element array downside method use element one still memory im crazy know
"By implementing a list in which a tail pointer points to the item most recently inserted onto the back of the list and a head pointer which points to the item least recently inserted onto the list. Also, items can only be removed from the front of the list and can only be added to the back of the list.",5.0,1.0,by implementing a list in which a tail pointer points to the item most recently inserted onto the back of the list and a head pointer which points to the item least recently inserted onto the list also items can only be removed from the front of the list and can only be added to the back of the list,"['implementing', 'list', 'tail', 'pointer', 'points', 'item', 'recently', 'inserted', 'onto', 'back', 'list', 'head', 'pointer', 'points', 'item', 'least', 'recently', 'inserted', 'onto', 'list', 'also', 'items', 'removed', 'front', 'list', 'added', 'back', 'list']",implement list tail pointer point item recent insert onto back list head pointer point item least recent insert onto list also item remov front list ad back list,implementing list tail pointer point item recently inserted onto back list head pointer point item least recently inserted onto list also item removed front list added back list
You can use list to represent the items in a queue.,1.5,0.0,you can use list to represent the items in a queue,"['use', 'list', 'represent', 'items', 'queue']",use list repres item queue,use list represent item queue
Have a pointer to the last element in the list and then use enqueue to insert items there. Link the first and last elements together to dequeue the list.,3.5,0.0,have a pointer to the last element in the list and then use enqueue to insert items there link the first and last elements together to dequeue the list,"['pointer', 'last', 'element', 'list', 'use', 'enqueue', 'insert', 'items', 'link', 'first', 'last', 'elements', 'together', 'dequeue', 'list']",pointer last element list use enqueu insert item link first last element togeth dequeu list,pointer last element list use enqueue insert item link first last element together dequeue list
Enqueue to the end of the linked list ... dequeue items from the beginningheadof the list.,5.0,1.0,enqueue to the end of the linked list dequeue items from the beginningheadof the list,"['enqueue', 'end', 'linked', 'list', 'dequeue', 'items', 'beginningheadof', 'list']",enqueu end link list dequeu item beginningheadof list,enqueue end linked list dequeue item beginningheadof list
you use the first element in the list as the remove point for the queue and insert items at the end of the list.,5.0,1.0,you use the first element in the list as the remove point for the queue and insert items at the end of the list,"['use', 'first', 'element', 'list', 'remove', 'point', 'queue', 'insert', 'items', 'end', 'list']",use first element list remov point queue insert item end list,use first element list remove point queue insert item end list
"Utilizing a front pointer and a back pointer. The front poiner and back pointer points to the first item into the queue. As you add items, the front remains the same but the back poiner next 'points to the new item and the new item is assigned to become the 'new back pointer.",4.5,1.0,utilizing a front pointer and a back pointer the front poiner and back pointer points to the first item into the queue as you add items the front remains the same but the back poiner next points to the new item and the new item is assigned to become the new back pointer,"['utilizing', 'front', 'pointer', 'back', 'pointer', 'front', 'poiner', 'back', 'pointer', 'points', 'first', 'item', 'queue', 'add', 'items', 'front', 'remains', 'back', 'poiner', 'next', 'points', 'new', 'item', 'new', 'item', 'assigned', 'become', 'new', 'back', 'pointer']",util front pointer back pointer front poiner back pointer point first item queue add item front remain back poiner next point new item new item assign becom new back pointer,utilizing front pointer back pointer front poiner back pointer point first item queue add item front remains back poiner next point new item new item assigned become new back pointer
Implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head.,4.5,1.0,implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head,"['implement', 'linked', 'list', 'allows', 'nodes', 'added', 'tail', 'retrieved', 'head']",implement link list allow node ad tail retriev head,implement linked list allows node added tail retrieved head
Check if list is empty and add elements to the list.,2.5,0.0,check if list is empty and add elements to the list,"['check', 'list', 'empty', 'add', 'elements', 'list']",check list empti add element list,check list empty add element list
"make a linked list and add on to the front and delete from the back, keep track of both to do so.",4.5,1.0,make a linked list and add on to the front and delete from the back keep track of both to do so,"['make', 'linked', 'list', 'add', 'front', 'delete', 'back', 'keep', 'track']",make link list add front delet back keep track,make linked list add front delete back keep track
by making the head of the list the beginning of the queue and the last listed item the insertion point of the queue,4.5,1.0,by making the head of the list the beginning of the queue and the last listed item the insertion point of the queue,"['making', 'head', 'list', 'beginning', 'queue', 'last', 'listed', 'item', 'insertion', 'point', 'queue']",make head list begin queue last list item insert point queue,making head list beginning queue last listed item insertion point queue
throw in data at the head and take it out at the tail,4.5,1.0,throw in data at the head and take it out at the tail,"['throw', 'data', 'head', 'take', 'tail']",throw data head take tail,throw data head take tail
"You create a list of nodes that had a head and a top pointer, and the functions are basically the same substituting pop and push with enqueue and dequeue",3.0,0.0,you create a list of nodes that had a head and a top pointer and the functions are basically the same substituting pop and push with enqueue and dequeue,"['create', 'list', 'nodes', 'head', 'top', 'pointer', 'functions', 'basically', 'substituting', 'pop', 'push', 'enqueue', 'dequeue']",creat list node head top pointer function basic substitut pop push enqueu dequeu,create list node head top pointer function basically substituting pop push enqueue dequeue
"fairly easy ... singly linked list with a pointer to the head and tail of hte list. deque first item in que, create temp pointer to next element, delete head, and then make head the temporary pointer. enque new item, use pointer to end of list, add a new item to the next item of the tail, and make the tail the next item of the current tail.",4.5,1.0,fairly easy singly linked list with a pointer to the head and tail of hte list deque first item in que create temp pointer to next element delete head and then make head the temporary pointer enque new item use pointer to end of list add a new item to the next item of the tail and make the tail the next item of the current tail,"['fairly', 'easy', 'singly', 'linked', 'list', 'pointer', 'head', 'tail', 'hte', 'list', 'deque', 'first', 'item', 'que', 'create', 'temp', 'pointer', 'next', 'element', 'delete', 'head', 'make', 'head', 'temporary', 'pointer', 'enque', 'new', 'item', 'use', 'pointer', 'end', 'list', 'add', 'new', 'item', 'next', 'item', 'tail', 'make', 'tail', 'next', 'item', 'current', 'tail']",fairli easi singli link list pointer head tail hte list dequ first item que creat temp pointer next element delet head make head temporari pointer enqu new item use pointer end list add new item next item tail make tail next item current tail,fairly easy singly linked list pointer head tail hte list deque first item que create temp pointer next element delete head make head temporary pointer enque new item use pointer end list add new item next item tail make tail next item current tail
"Use a linked list with 2 pointers, one to the front and one to the back. As long as back! equals front, the queue is not empty.",4.5,1.0,use a linked list with 2 pointers one to the front and one to the back as long as back! equals front the queue is not empty,"['use', 'linked', 'list', '2', 'pointers', 'one', 'front', 'one', 'back', 'long', 'back', '!', 'equals', 'front', 'queue', 'empty']",use link list 2 pointer one front one back long back ! equal front queue empti,use linked list 2 pointer one front one back long back ! equal front queue empty
"create a node with the input data, continue to add to the list. when dequeueing get the first elements data and set the next element in the list as the new first element",4.0,1.0,create a node with the input data continue to add to the list when dequeueing get the first elements data and set the next element in the list as the new first element,"['create', 'node', 'input', 'data', 'continue', 'add', 'list', 'dequeueing', 'get', 'first', 'elements', 'data', 'set', 'next', 'element', 'list', 'new', 'first', 'element']",creat node input data continu add list dequeu get first element data set next element list new first element,create node input data continue add list dequeueing get first element data set next element list new first element
"A linked list with Stack principles. The Queue 's top element is the element that is always being removed first. Must use nodes to contain each element, with a pointer to the top element, which also could be called the head pointer.",3.0,0.0,a linked list with stack principles the queue s top element is the element that is always being removed first must use nodes to contain each element with a pointer to the top element which also could be called the head pointer,"['linked', 'list', 'stack', 'principles', 'queue', 'top', 'element', 'element', 'always', 'removed', 'first', 'must', 'use', 'nodes', 'contain', 'element', 'pointer', 'top', 'element', 'also', 'could', 'called', 'head', 'pointer']",link list stack principl queue top element element alway remov first must use node contain element pointer top element also could call head pointer,linked list stack principle queue top element element always removed first must use node contain element pointer top element also could called head pointer
linked list checking for front and rear. Keep enqueueing elements until front equal to rear 1.,3.5,0.0,linked list checking for front and rear keep enqueueing elements until front equal to rear 1,"['linked', 'list', 'checking', 'front', 'rear', 'keep', 'enqueueing', 'elements', 'front', 'equal', 'rear', '1']",link list check front rear keep enqueu element front equal rear 1,linked list checking front rear keep enqueueing element front equal rear 1
"a queue can be implemented in a list by keeping track of two pointers, a head and a tail",4.5,1.0,a queue can be implemented in a list by keeping track of two pointers a head and a tail,"['queue', 'implemented', 'list', 'keeping', 'track', 'two', 'pointers', 'head', 'tail']",queue implement list keep track two pointer head tail,queue implemented list keeping track two pointer head tail
"each element of a queue can be allocated in the nodes of an linked list. New elements should be added to the head of the list, with each dequeued element coming off the tail.",5.0,1.0,each element of a queue can be allocated in the nodes of an linked list new elements should be added to the head of the list with each dequeued element coming off the tail,"['element', 'queue', 'allocated', 'nodes', 'linked', 'list', 'new', 'elements', 'added', 'head', 'list', 'dequeued', 'element', 'coming', 'tail']",element queue alloc node link list new element ad head list dequeu element come tail,element queue allocated node linked list new element added head list dequeued element coming tail
"Implement the operation dequeue as the list operation remove1and the operation getFrontqueueFrontas the list operation retrieve1, queueFront",4.0,1.0,implement the operation dequeue as the list operation remove1and the operation getfrontqueuefrontas the list operation retrieve1 queuefront,"['implement', 'operation', 'dequeue', 'list', 'operation', 'remove1and', 'operation', 'getfrontqueuefrontas', 'list', 'operation', 'retrieve1', 'queuefront']",implement oper dequeu list oper remove1and oper getfrontqueuefronta list oper retrieve1 queuefront,implement operation dequeue list operation remove1and operation getfrontqueuefrontas list operation retrieve1 queuefront
remove the first element and reference the second element as the new head of the list.,3.5,0.0,remove the first element and reference the second element as the new head of the list,"['remove', 'first', 'element', 'reference', 'second', 'element', 'new', 'head', 'list']",remov first element refer second element new head list,remove first element reference second element new head list
By creating and adding nodes at the end of the list and removing the nodes from the beginning of the list.,5.0,1.0,by creating and adding nodes at the end of the list and removing the nodes from the beginning of the list,"['creating', 'adding', 'nodes', 'end', 'list', 'removing', 'nodes', 'beginning', 'list']",creat ad node end list remov node begin list,creating adding node end list removing node beginning list
you would have your list and add a back pointer so that your program knows where the end is,4.0,1.0,you would have your list and add a back pointer so that your program knows where the end is,"['would', 'list', 'add', 'back', 'pointer', 'program', 'knows', 'end']",would list add back pointer program know end,would list add back pointer program know end
"your queue storage class has a list, and for enqueue, you add the item to the end of the list, and for dequeue you return the first item in the list",4.5,1.0,your queue storage class has a list and for enqueue you add the item to the end of the list and for dequeue you return the first item in the list,"['queue', 'storage', 'class', 'list', 'enqueue', 'add', 'item', 'end', 'list', 'dequeue', 'return', 'first', 'item', 'list']",queue storag class list enqueu add item end list dequeu return first item list,queue storage class list enqueue add item end list dequeue return first item list
temp implies next equals NULL; iffrontrearimplies next equals temp; else front equals temp; rear equals temp;,3.5,0.0,temp implies next equals null iffrontrearimplies next equals temp else front equals temp rear equals temp,"['temp', 'implies', 'next', 'equals', 'null', 'iffrontrearimplies', 'next', 'equals', 'temp', 'else', 'front', 'equals', 'temp', 'rear', 'equals', 'temp']",temp impli next equal null iffrontrearimpli next equal temp els front equal temp rear equal temp,temp implies next equal null iffrontrearimplies next equal temp else front equal temp rear equal temp
"List based. Because it is on the run time order of N, also it does not have a limited size like an array does",4.5,1.0,list based because it is on the run time order of n also it does not have a limited size like an array does,"['list', 'based', 'run', 'time', 'order', 'n', 'also', 'limited', 'size', 'like', 'array']",list base run time order n also limit size like array,list based run time order n also limited size like array
linked list based. because it does not store the items linearly in memory but instead as individual blocks.,5.0,1.0,linked list based because it does not store the items linearly in memory but instead as individual blocks,"['linked', 'list', 'based', 'store', 'items', 'linearly', 'memory', 'instead', 'individual', 'blocks']",link list base store item linearli memori instead individu block,linked list based store item linearly memory instead individual block
List based is preferred because there are no size restrictions.,5.0,1.0,list based is preferred because there are no size restrictions,"['list', 'based', 'preferred', 'size', 'restrictions']",list base prefer size restrict,list based preferred size restriction
"A list-based implementation would be preferred. The array is slightly more complicated, where you would need to keep track of both front and rear.",3.5,0.0,a list-based implementation would be preferred the array is slightly more complicated where you would need to keep track of both front and rear,"['list-based', 'implementation', 'would', 'preferred', 'array', 'slightly', 'complicated', 'would', 'need', 'keep', 'track', 'front', 'rear']",list-bas implement would prefer array slightli complic would need keep track front rear,list-based implementation would preferred array slightly complicated would need keep track front rear
List-based. Array-based queues have a way to complicate things to an extent.,3.5,0.0,list-based array-based queues have a way to complicate things to an extent,"['list-based', 'array-based', 'queues', 'way', 'complicate', 'things', 'extent']",list-bas array-bas queue way complic thing extent,list-based array-based queue way complicate thing extent
"List-based. Less code, and no size limitation or declaration ... which means it is also more efficient and versatile.",5.0,1.0,list-based less code and no size limitation or declaration which means it is also more efficient and versatile,"['list-based', 'less', 'code', 'size', 'limitation', 'declaration', 'means', 'also', 'efficient', 'versatile']",list-bas less code size limit declar mean also effici versatil,list-based le code size limitation declaration mean also efficient versatile
list based is prefered because it does not have a set size and insertion and deletion can be done very quickly of you keep pointers to first element and last.,5.0,1.0,list based is prefered because it does not have a set size and insertion and deletion can be done very quickly of you keep pointers to first element and last,"['list', 'based', 'prefered', 'set', 'size', 'insertion', 'deletion', 'done', 'quickly', 'keep', 'pointers', 'first', 'element', 'last']",list base prefer set size insert delet done quickli keep pointer first element last,list based prefered set size insertion deletion done quickly keep pointer first element last
List based is preferred because there are space issues with array based due to rightward drift. The fix for rightward drift requires constant shifting of the queue data.,5.0,1.0,list based is preferred because there are space issues with array based due to rightward drift the fix for rightward drift requires constant shifting of the queue data,"['list', 'based', 'preferred', 'space', 'issues', 'array', 'based', 'due', 'rightward', 'drift', 'fix', 'rightward', 'drift', 'requires', 'constant', 'shifting', 'queue', 'data']",list base prefer space issu array base due rightward drift fix rightward drift requir constant shift queue data,list based preferred space issue array based due rightward drift fix rightward drift requires constant shifting queue data
"Similar to stacks, linked lists are preferable for queues because the size can be adjusted.",5.0,1.0,similar to stacks linked lists are preferable for queues because the size can be adjusted,"['similar', 'stacks', 'linked', 'lists', 'preferable', 'queues', 'size', 'adjusted']",similar stack link list prefer queue size adjust,similar stack linked list preferable queue size adjusted
array-based is preferred because all you have to keep track of is the array itself and the count.,1.5,0.0,array-based is preferred because all you have to keep track of is the array itself and the count,"['array-based', 'preferred', 'keep', 'track', 'array', 'count']",array-bas prefer keep track array count,array-based preferred keep track array count
list because its size is not defined,5.0,1.0,list because its size is not defined,"['list', 'size', 'defined']",list size defin,list size defined
"List-based, because when you enqueueor dequeue depending upon your implementationyou would need to shift all elements to another space with an array, causing a horrid time complexity for large data sets, where as you can just modify the pointers in a list for a constant time complexity",4.5,1.0,list-based because when you enqueueor dequeue depending upon your implementationyou would need to shift all elements to another space with an array causing a horrid time complexity for large data sets where as you can just modify the pointers in a list for a constant time complexity,"['list-based', 'enqueueor', 'dequeue', 'depending', 'upon', 'implementationyou', 'would', 'need', 'shift', 'elements', 'another', 'space', 'array', 'causing', 'horrid', 'time', 'complexity', 'large', 'data', 'sets', 'modify', 'pointers', 'list', 'constant', 'time', 'complexity']",list-bas enqueueor dequeu depend upon implementationy would need shift element anoth space array caus horrid time complex larg data set modifi pointer list constant time complex,list-based enqueueor dequeue depending upon implementationyou would need shift element another space array causing horrid time complexity large data set modify pointer list constant time complexity
"queue 's are best with lists, especially if the tail is kept track of, as the list can be dynamically grown without losing track of the head or tail.",5.0,1.0,queue s are best with lists especially if the tail is kept track of as the list can be dynamically grown without losing track of the head or tail,"['queue', 'best', 'lists', 'especially', 'tail', 'kept', 'track', 'list', 'dynamically', 'grown', 'without', 'losing', 'track', 'head', 'tail']",queue best list especi tail kept track list dynam grown without lose track head tail,queue best list especially tail kept track list dynamically grown without losing track head tail
"list based, its much simpler and the run time is better",4.0,1.0,list based its much simpler and the run time is better,"['list', 'based', 'much', 'simpler', 'run', 'time', 'better']",list base much simpler run time better,list based much simpler run time better
"list based, because of the lessened memory usage initially, and the increased limits on how large the que can become.",5.0,1.0,list based because of the lessened memory usage initially and the increased limits on how large the que can become,"['list', 'based', 'lessened', 'memory', 'usage', 'initially', 'increased', 'limits', 'large', 'que', 'become']",list base lessen memori usag initi increas limit larg que becom,list based lessened memory usage initially increased limit large que become
List-based because it is not fixed size.,5.0,1.0,list-based because it is not fixed size,"['list-based', 'fixed', 'size']",list-bas fix size,list-based fixed size
"list, its dynamic and no size needs to be declared",5.0,1.0,list its dynamic and no size needs to be declared,"['list', 'dynamic', 'size', 'needs', 'declared']",list dynam size need declar,list dynamic size need declared
"list bases implementatoin is best because you use pointers to keep track of the front and back pointers. Easier to maintain, but uses more memory",5.0,1.0,list bases implementatoin is best because you use pointers to keep track of the front and back pointers easier to maintain but uses more memory,"['list', 'bases', 'implementatoin', 'best', 'use', 'pointers', 'keep', 'track', 'front', 'back', 'pointers', 'easier', 'maintain', 'uses', 'memory']",list base implementatoin best use pointer keep track front back pointer easier maintain use memori,list base implementatoin best use pointer keep track front back pointer easier maintain us memory
list based. It can dynamically grow and has fewer restrictions.,5.0,1.0,list based it can dynamically grow and has fewer restrictions,"['list', 'based', 'dynamically', 'grow', 'fewer', 'restrictions']",list base dynam grow fewer restrict,list based dynamically grow fewer restriction
list based is preferred because memory allocation is not an issue,5.0,1.0,list based is preferred because memory allocation is not an issue,"['list', 'based', 'preferred', 'memory', 'allocation', 'issue']",list base prefer memori alloc issu,list based preferred memory allocation issue
"List based solutions are preferred, because they allow for queues of any size.",5.0,1.0,list based solutions are preferred because they allow for queues of any size,"['list', 'based', 'solutions', 'preferred', 'allow', 'queues', 'size']",list base solut prefer allow queue size,list based solution preferred allow queue size
"I think array based is batter, because of fixed size, but on other had list base is more flaxible. You do not have to worry about the size",4.0,1.0,i think array based is batter because of fixed size but on other had list base is more flaxible you do not have to worry about the size,"['think', 'array', 'based', 'batter', 'fixed', 'size', 'list', 'base', 'flaxible', 'worry', 'size']",think array base batter fix size list base flaxibl worri size,think array based batter fixed size list base flaxible worry size
list based because you dont need to shift the elements like you do in array based queues,4.0,1.0,list based because you dont need to shift the elements like you do in array based queues,"['list', 'based', 'dont', 'need', 'shift', 'elements', 'like', 'array', 'based', 'queues']",list base dont need shift element like array base queue,list based dont need shift element like array based queue
List-based because memory is not constricted.,5.0,1.0,list-based because memory is not constricted,"['list-based', 'memory', 'constricted']",list-bas memori constrict,list-based memory constricted
"list based because the array based has to have a fixed size, it cannot be added to or removed from as easily",5.0,1.0,list based because the array based has to have a fixed size it cannot be added to or removed from as easily,"['list', 'based', 'array', 'based', 'fixed', 'size', 'added', 'removed', 'easily']",list base array base fix size ad remov easili,list based array based fixed size added removed easily
list-based array is easier and more scalable,5.0,1.0,list-based array is easier and more scalable,"['list-based', 'array', 'easier', 'scalable']",list-bas array easier scalabl,list-based array easier scalable
list based becuase an arrary based has to have an arrary size and needs to be pre-defined and cannot be changed dynamically.,5.0,1.0,list based becuase an arrary based has to have an arrary size and needs to be pre-defined and cannot be changed dynamically,"['list', 'based', 'becuase', 'arrary', 'based', 'arrary', 'size', 'needs', 'pre-defined', 'changed', 'dynamically']",list base becuas arrari base arrari size need pre-defin chang dynam,list based becuase arrary based arrary size need pre-defined changed dynamically
Push.,5.0,1.0,push,['push'],push,push
"push, which inserts something at the top of the stack.",5.0,1.0,push which inserts something at the top of the stack,"['push', 'inserts', 'something', 'top', 'stack']",push insert someth top stack,push insert something top stack
The stack operation corresponding to enqueue in queues is the push operation.,5.0,1.0,the stack operation corresponding to enqueue in queues is the push operation,"['stack', 'operation', 'corresponding', 'enqueue', 'queues', 'push', 'operation']",stack oper correspond enqueu queue push oper,stack operation corresponding enqueue queue push operation
"Push in a stack operation corresponds to the enqueue operation in queues. These operations insert a new item into one endthe top and back, respectivelyof the ADT.",5.0,1.0,push in a stack operation corresponds to the enqueue operation in queues these operations insert a new item into one endthe top and back respectivelyof the adt,"['push', 'stack', 'operation', 'corresponds', 'enqueue', 'operation', 'queues', 'operations', 'insert', 'new', 'item', 'one', 'endthe', 'top', 'back', 'respectivelyof', 'adt']",push stack oper correspond enqueu oper queue oper insert new item one endth top back respectivelyof adt,push stack operation corresponds enqueue operation queue operation insert new item one endthe top back respectivelyof adt
The stack operation is almost the opposite of the enqueue operation.,2.5,0.0,the stack operation is almost the opposite of the enqueue operation,"['stack', 'operation', 'almost', 'opposite', 'enqueue', 'operation']",stack oper almost opposit enqueu oper,stack operation almost opposite enqueue operation
push equals enqueue pop equals dequeue,4.5,1.0,push equals enqueue pop equals dequeue,"['push', 'equals', 'enqueue', 'pop', 'equals', 'dequeue']",push equal enqueu pop equal dequeu,push equal enqueue pop equal dequeue
push,5.0,1.0,push,['push'],push,push
Not sure what this question means. You can use the stack push operation and the enqueue operation to detect palindromes.,5.0,1.0,not sure what this question means you can use the stack push operation and the enqueue operation to detect palindromes,"['sure', 'question', 'means', 'use', 'stack', 'push', 'operation', 'enqueue', 'operation', 'detect', 'palindromes']",sure question mean use stack push oper enqueu oper detect palindrom,sure question mean use stack push operation enqueue operation detect palindrome
"Enqueue is the queue equivalent of push, and dequeue is the queue equivalent to pop.",5.0,1.0,enqueue is the queue equivalent of push and dequeue is the queue equivalent to pop,"['enqueue', 'queue', 'equivalent', 'push', 'dequeue', 'queue', 'equivalent', 'pop']",enqueu queue equival push dequeu queue equival pop,enqueue queue equivalent push dequeue queue equivalent pop
Push operation.,5.0,1.0,push operation,"['push', 'operation']",push oper,push operation
push,5.0,1.0,push,['push'],push,push
push,5.0,1.0,push,['push'],push,push
push,5.0,1.0,push,['push'],push,push
push,5.0,1.0,push,['push'],push,push
"that would be the push operation, if it put the item at the end of the list.",5.0,1.0,that would be the push operation if it put the item at the end of the list,"['would', 'push', 'operation', 'put', 'item', 'end', 'list']",would push oper put item end list,would push operation put item end list
push,5.0,1.0,push,['push'],push,push
push,5.0,1.0,push,['push'],push,push
the Push method in the stack operations.,5.0,1.0,the push method in the stack operations,"['push', 'method', 'stack', 'operations']",push method stack oper,push method stack operation
push,5.0,1.0,push,['push'],push,push
enqueue corresponds with push dequeue corresponds with pop,4.5,1.0,enqueue corresponds with push dequeue corresponds with pop,"['enqueue', 'corresponds', 'push', 'dequeue', 'corresponds', 'pop']",enqueu correspond push dequeu correspond pop,enqueue corresponds push dequeue corresponds pop
"Push corresponds with enqueue, both very similarly place new elements into their stack or queue",5.0,1.0,push corresponds with enqueue both very similarly place new elements into their stack or queue,"['push', 'corresponds', 'enqueue', 'similarly', 'place', 'new', 'elements', 'stack', 'queue']",push correspond enqueu similarli place new element stack queue,push corresponds enqueue similarly place new element stack queue
FIFO: First in First out,1.5,0.0,fifo first in first out,"['fifo', 'first', 'first']",fifo first first,fifo first first
push,5.0,1.0,push,['push'],push,push
Push,5.0,1.0,push,['push'],push,push
push,5.0,1.0,push,['push'],push,push
push,5.0,1.0,push,['push'],push,push
push,5.0,1.0,push,['push'],push,push
"A stack, some printing jobs might have a higher priority than others and they can be easily inserted at the front of the list or anywhere between.",1.5,0.0,a stack some printing jobs might have a higher priority than others and they can be easily inserted at the front of the list or anywhere between,"['stack', 'printing', 'jobs', 'might', 'higher', 'priority', 'others', 'easily', 'inserted', 'front', 'list', 'anywhere']",stack print job might higher prioriti other easili insert front list anywher,stack printing job might higher priority others easily inserted front list anywhere
a queue otherwise some things would never be printed.,5.0,1.0,a queue otherwise some things would never be printed,"['queue', 'otherwise', 'things', 'would', 'never', 'printed']",queue otherwis thing would never print,queue otherwise thing would never printed
A queue is more appropriate for scheduling printing jobs because queues have first in first out behavior.,5.0,1.0,a queue is more appropriate for scheduling printing jobs because queues have first in first out behavior,"['queue', 'appropriate', 'scheduling', 'printing', 'jobs', 'queues', 'first', 'first', 'behavior']",queue appropri schedul print job queue first first behavior,queue appropriate scheduling printing job queue first first behavior
"Queue, its better to be FIFO than LIFOstack.",5.0,1.0,queue its better to be fifo than lifostack,"['queue', 'better', 'fifo', 'lifostack']",queue better fifo lifostack,queue better fifo lifostack
Queue of course!,5.0,1.0,queue of course!,"['queue', 'course', '!']",queue cours !,queue course !
"Queue, the person who wanted to print first should be first served.",5.0,1.0,queue the person who wanted to print first should be first served,"['queue', 'person', 'wanted', 'print', 'first', 'first', 'served']",queue person want print first first serv,queue person wanted print first first served
queue because it guarantees that job are executed in the order they come in.,5.0,1.0,queue because it guarantees that job are executed in the order they come in,"['queue', 'guarantees', 'job', 'executed', 'order', 'come']",queue guarante job execut order come,queue guarantee job executed order come
queue,5.0,1.0,queue,['queue'],queue,queue
Queues would be preferable to stacks for use as scheduling print jobs because it would print jobs in the order that they were sent to the printer.,5.0,1.0,queues would be preferable to stacks for use as scheduling print jobs because it would print jobs in the order that they were sent to the printer,"['queues', 'would', 'preferable', 'stacks', 'use', 'scheduling', 'print', 'jobs', 'would', 'print', 'jobs', 'order', 'sent', 'printer']",queue would prefer stack use schedul print job would print job order sent printer,queue would preferable stack use scheduling print job would print job order sent printer
a queue.,5.0,1.0,a queue,['queue'],queue,queue
queue,5.0,1.0,queue,['queue'],queue,queue
a queue,5.0,1.0,a queue,['queue'],queue,queue
"Queue 's are more appropriate, as printers are usually first come, first serve.",5.0,1.0,queue s are more appropriate as printers are usually first come first serve,"['queue', 'appropriate', 'printers', 'usually', 'first', 'come', 'first', 'serve']",queue appropri printer usual first come first serv,queue appropriate printer usually first come first serve
queue,5.0,1.0,queue,['queue'],queue,queue
"queue, because of the first in first out principles, and if it was a stack it would be last in last out, because it could possibly not let the first item that was added get removed in a timely manner.",5.0,1.0,queue because of the first in first out principles and if it was a stack it would be last in last out because it could possibly not let the first item that was added get removed in a timely manner,"['queue', 'first', 'first', 'principles', 'stack', 'would', 'last', 'last', 'could', 'possibly', 'let', 'first', 'item', 'added', 'get', 'removed', 'timely', 'manner']",queue first first principl stack would last last could possibl let first item ad get remov time manner,queue first first principle stack would last last could possibly let first item added get removed timely manner
Queue,5.0,1.0,queue,['queue'],queue,queue
a queue,5.0,1.0,a queue,['queue'],queue,queue
A Queue data structure is more appropriate for scheduling printing jobs at a printer. The first job sent to the printer is the first job printed.,5.0,1.0,a queue data structure is more appropriate for scheduling printing jobs at a printer the first job sent to the printer is the first job printed,"['queue', 'data', 'structure', 'appropriate', 'scheduling', 'printing', 'jobs', 'printer', 'first', 'job', 'sent', 'printer', 'first', 'job', 'printed']",queue data structur appropri schedul print job printer first job sent printer first job print,queue data structure appropriate scheduling printing job printer first job sent printer first job printed
a queue. It would not be unfair for the first job to finish last.,5.0,1.0,a queue it would not be unfair for the first job to finish last,"['queue', 'would', 'unfair', 'first', 'job', 'finish', 'last']",queue would unfair first job finish last,queue would unfair first job finish last
"a queue, because it takes the job that has waited the longest",5.0,1.0,a queue because it takes the job that has waited the longest,"['queue', 'takes', 'job', 'waited', 'longest']",queue take job wait longest,queue take job waited longest
"A queue is more appropriate, because the clients which have waited the longest should be the first served.",5.0,1.0,a queue is more appropriate because the clients which have waited the longest should be the first served,"['queue', 'appropriate', 'clients', 'waited', 'longest', 'first', 'served']",queue appropri client wait longest first serv,queue appropriate client waited longest first served
Queue,5.0,1.0,queue,['queue'],queue,queue
a queue,5.0,1.0,a queue,['queue'],queue,queue
Queue,5.0,1.0,queue,['queue'],queue,queue
i would say that a queue is better because the first thing you try to print should be the first one to come out of the printerFIFO,5.0,1.0,i would say that a queue is better because the first thing you try to print should be the first one to come out of the printerfifo,"['would', 'say', 'queue', 'better', 'first', 'thing', 'try', 'print', 'first', 'one', 'come', 'printerfifo']",would say queue better first thing tri print first one come printerfifo,would say queue better first thing try print first one come printerfifo
"a queue, because you want the jobs to execute in the order that they are received",5.0,1.0,a queue because you want the jobs to execute in the order that they are received,"['queue', 'want', 'jobs', 'execute', 'order', 'received']",queue want job execut order receiv,queue want job execute order received
queue,5.0,1.0,queue,['queue'],queue,queue
A hierarchy of nodes that are sorted in a particular order. Each node has a ancestorexcept for the rootand childrenexcept for the leaves.,4.0,1.0,a hierarchy of nodes that are sorted in a particular order each node has a ancestorexcept for the rootand childrenexcept for the leaves,"['hierarchy', 'nodes', 'sorted', 'particular', 'order', 'node', 'ancestorexcept', 'rootand', 'childrenexcept', 'leaves']",hierarchi node sort particular order node ancestorexcept rootand childrenexcept leav,hierarchy node sorted particular order node ancestorexcept rootand childrenexcept leaf
A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree.,5.0,1.0,a tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree,"['tree', 'finite', 'set', 'one', 'nodes', 'specially', 'designated', 'node', 'called', 'root', 'remaining', 'nodes', 'partitioned', 'disjoint', 'sets', 'sets', 'tree']",tree finit set one node special design node call root remain node partit disjoint set set tree,tree finite set one node specially designated node called root remaining node partitioned disjoint set set tree
A tree is a finite set of one or more nodes such that: there is a specially designated node called the root.,4.5,1.0,a tree is a finite set of one or more nodes such that there is a specially designated node called the root,"['tree', 'finite', 'set', 'one', 'nodes', 'specially', 'designated', 'node', 'called', 'root']",tree finit set one node special design node call root,tree finite set one node specially designated node called root
"A connected, undirected graph without cycles.",4.5,1.0,a connected undirected graph without cycles,"['connected', 'undirected', 'graph', 'without', 'cycles']",connect undirect graph without cycl,connected undirected graph without cycle
"A data structure that contains a root, internal nodes and external nodes. Each node references another node by means of pointerspass-by-reference. The root is the base of the tree, it has no parents. A leaf is a node at the end of the tree which points to NULL.",5.0,1.0,a data structure that contains a root internal nodes and external nodes each node references another node by means of pointerspass-by-reference the root is the base of the tree it has no parents a leaf is a node at the end of the tree which points to null,"['data', 'structure', 'contains', 'root', 'internal', 'nodes', 'external', 'nodes', 'node', 'references', 'another', 'node', 'means', 'pointerspass-by-reference', 'root', 'base', 'tree', 'parents', 'leaf', 'node', 'end', 'tree', 'points', 'null']",data structur contain root intern node extern node node refer anoth node mean pointerspass-by-refer root base tree parent leaf node end tree point null,data structure contains root internal node external node node reference another node mean pointerspass-by-reference root base tree parent leaf node end tree point null
a tree is a series of nodes where each node has links to other nodes.,3.0,0.0,a tree is a series of nodes where each node has links to other nodes,"['tree', 'series', 'nodes', 'node', 'links', 'nodes']",tree seri node node link node,tree series node node link node
"an infinite set of nodes that have a root and descendants, and each addition is a leaf.",3.5,0.0,an infinite set of nodes that have a root and descendants and each addition is a leaf,"['infinite', 'set', 'nodes', 'root', 'descendants', 'addition', 'leaf']",infinit set node root descend addit leaf,infinite set node root descendant addition leaf
"A set of one or more nodes that are hierarchically organized, with one special root node.",4.0,1.0,a set of one or more nodes that are hierarchically organized with one special root node,"['set', 'one', 'nodes', 'hierarchically', 'organized', 'one', 'special', 'root', 'node']",set one node hierarch organ one special root node,set one node hierarchically organized one special root node
A tree is a finite set of one or more nodes such that there is a specially designated node called the root.,3.5,0.0,a tree is a finite set of one or more nodes such that there is a specially designated node called the root,"['tree', 'finite', 'set', 'one', 'nodes', 'specially', 'designated', 'node', 'called', 'root']",tree finit set one node special design node call root,tree finite set one node specially designated node called root
one or more nodes in a hierarchy starting with the root and branching off like a tree to subtrees,5.0,1.0,one or more nodes in a hierarchy starting with the root and branching off like a tree to subtrees,"['one', 'nodes', 'hierarchy', 'starting', 'root', 'branching', 'like', 'tree', 'subtrees']",one node hierarchi start root branch like tree subtre,one node hierarchy starting root branching like tree subtrees
A tree is a data structure where nodes are linked to each other in a hierarchical manner.,3.5,0.0,a tree is a data structure where nodes are linked to each other in a hierarchical manner,"['tree', 'data', 'structure', 'nodes', 'linked', 'hierarchical', 'manner']",tree data structur node link hierarch manner,tree data structure node linked hierarchical manner
a grouping of data in a parent to child structure,3.0,0.0,a grouping of data in a parent to child structure,"['grouping', 'data', 'parent', 'child', 'structure']",group data parent child structur,grouping data parent child structure
It is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot. Its a list made up of nodes with left and right pointers.,3.0,0.0,it is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot its a list made up of nodes with left and right pointers,"['list', 'numbers', 'list', 'made', 'comparing', 'values', 'nodes', 'already', 'tree', 'adding', 'appropriate', 'spot', 'list', 'made', 'nodes', 'left', 'right', 'pointers']",list number list made compar valu node alreadi tree ad appropri spot list made node left right pointer,list number list made comparing value node already tree adding appropriate spot list made node left right pointer
"A tree is a branched data structure with nodes, and leaves ... a special node called root has no parent node, but however like all other nodes can and does have 2 nodes that it links to, namely one on the right, and one on the left.",4.5,1.0,a tree is a branched data structure with nodes and leaves a special node called root has no parent node but however like all other nodes can and does have 2 nodes that it links to namely one on the right and one on the left,"['tree', 'branched', 'data', 'structure', 'nodes', 'leaves', 'special', 'node', 'called', 'root', 'parent', 'node', 'however', 'like', 'nodes', '2', 'nodes', 'links', 'namely', 'one', 'right', 'one', 'left']",tree branch data structur node leav special node call root parent node howev like node 2 node link name one right one left,tree branched data structure node leaf special node called root parent node however like node 2 node link namely one right one left
"It organizes data in a nonlinear, hierarchical form, where items can have more than one successor. Partitioned into a root node and subsets are general subtrees of the root.",5.0,1.0,it organizes data in a nonlinear hierarchical form where items can have more than one successor partitioned into a root node and subsets are general subtrees of the root,"['organizes', 'data', 'nonlinear', 'hierarchical', 'form', 'items', 'one', 'successor', 'partitioned', 'root', 'node', 'subsets', 'general', 'subtrees', 'root']",organ data nonlinear hierarch form item one successor partit root node subset gener subtre root,organizes data nonlinear hierarchical form item one successor partitioned root node subset general subtrees root
"A tree is a finite set of one or more nodes such that there is a specially designated node called the root. The remaining nodes are partitioned into n is greater than or equal to 0 disjoint sets T the n plus 1, where each element set is a tree.",5.0,1.0,a tree is a finite set of one or more nodes such that there is a specially designated node called the root the remaining nodes are partitioned into n is greater than or equal to 0 disjoint sets t the n plus 1 where each element set is a tree,"['tree', 'finite', 'set', 'one', 'nodes', 'specially', 'designated', 'node', 'called', 'root', 'remaining', 'nodes', 'partitioned', 'n', 'greater', 'equal', '0', 'disjoint', 'sets', 'n', 'plus', '1', 'element', 'set', 'tree']",tree finit set one node special design node call root remain node partit n greater equal 0 disjoint set n plu 1 element set tree,tree finite set one node specially designated node called root remaining node partitioned n greater equal 0 disjoint set n plus 1 element set tree
A finite set of nodes that starts with the root and terminates with leaves.,4.0,1.0,a finite set of nodes that starts with the root and terminates with leaves,"['finite', 'set', 'nodes', 'starts', 'root', 'terminates', 'leaves']",finit set node start root termin leav,finite set node start root terminates leaf
"a set of data arranged with pointers. each element can have many pointers, but no two pointers point to the same element",2.5,0.0,a set of data arranged with pointers each element can have many pointers but no two pointers point to the same element,"['set', 'data', 'arranged', 'pointers', 'element', 'many', 'pointers', 'two', 'pointers', 'point', 'element']",set data arrang pointer element mani pointer two pointer point element,set data arranged pointer element many pointer two pointer point element
"A Tree is a data structure with one or more data nodes, each of which contains some data. Each node itself can have a number of attached child nodes, creating the branched structure Trees are named for.",4.5,1.0,a tree is a data structure with one or more data nodes each of which contains some data each node itself can have a number of attached child nodes creating the branched structure trees are named for,"['tree', 'data', 'structure', 'one', 'data', 'nodes', 'contains', 'data', 'node', 'number', 'attached', 'child', 'nodes', 'creating', 'branched', 'structure', 'trees', 'named']",tree data structur one data node contain data node number attach child node creat branch structur tree name,tree data structure one data node contains data node number attached child node creating branched structure tree named
"a finite collection of nodes, where it starts with an element called the root, which has children, and its children have children until you get to the leaves which are the last elements and have to children",4.5,1.0,a finite collection of nodes where it starts with an element called the root which has children and its children have children until you get to the leaves which are the last elements and have to children,"['finite', 'collection', 'nodes', 'starts', 'element', 'called', 'root', 'children', 'children', 'children', 'get', 'leaves', 'last', 'elements', 'children']",finit collect node start element call root children children children get leav last element children,finite collection node start element called root child child child get leaf last element child
"A nonlinear, two-dimensional data structure.",2.0,0.0,a nonlinear two-dimensional data structure,"['nonlinear', 'two-dimensional', 'data', 'structure']",nonlinear two-dimension data structur,nonlinear two-dimensional data structure
a finite set of one or more nodes such that there is a root node and all other nodes are split into trees of lesser value than the root,4.0,1.0,a finite set of one or more nodes such that there is a root node and all other nodes are split into trees of lesser value than the root,"['finite', 'set', 'one', 'nodes', 'root', 'node', 'nodes', 'split', 'trees', 'lesser', 'value', 'root']",finit set one node root node node split tree lesser valu root,finite set one node root node node split tree lesser value root
"A finite number of nodes such that there is one root node, each node has a certain number of children nodes, and each child is also a tree",5.0,1.0,a finite number of nodes such that there is one root node each node has a certain number of children nodes and each child is also a tree,"['finite', 'number', 'nodes', 'one', 'root', 'node', 'node', 'certain', 'number', 'children', 'nodes', 'child', 'also', 'tree']",finit number node one root node node certain number children node child also tree,finite number node one root node node certain number child node child also tree
A type of data structure in which each element is attached to one or more elements directly beneath it.,4.0,1.0,a type of data structure in which each element is attached to one or more elements directly beneath it,"['type', 'data', 'structure', 'element', 'attached', 'one', 'elements', 'directly', 'beneath']",type data structur element attach one element directli beneath,type data structure element attached one element directly beneath
"Each level of a generation in the tree, some people do not count the root as a generation",4.0,1.0,each level of a generation in the tree some people do not count the root as a generation,"['level', 'generation', 'tree', 'people', 'count', 'root', 'generation']",level gener tree peopl count root gener,level generation tree people count root generation
"The height of a tree is in terms of the levels of its nodes such that, if the tree is empty its height is 0 otherwise its height is equal to the maximum level of its nodes.",4.5,1.0,the height of a tree is in terms of the levels of its nodes such that if the tree is empty its height is 0 otherwise its height is equal to the maximum level of its nodes,"['height', 'tree', 'terms', 'levels', 'nodes', 'tree', 'empty', 'height', '0', 'otherwise', 'height', 'equal', 'maximum', 'level', 'nodes']",height tree term level node tree empti height 0 otherwis height equal maximum level node,height tree term level node tree empty height 0 otherwise height equal maximum level node
The height of a tree is the number of nodes on the longest path from the root to a leaf.,5.0,1.0,the height of a tree is the number of nodes on the longest path from the root to a leaf,"['height', 'tree', 'number', 'nodes', 'longest', 'path', 'root', 'leaf']",height tree number node longest path root leaf,height tree number node longest path root leaf
The number of nodes on the longest path from the root of the tree to a leaf.,5.0,1.0,the number of nodes on the longest path from the root of the tree to a leaf,"['number', 'nodes', 'longest', 'path', 'root', 'tree', 'leaf']",number node longest path root tree leaf,number node longest path root tree leaf
Height equals the number of times you must progress down the levels of a tree to reach a leaf of the greatest distance from the root.,5.0,1.0,height equals the number of times you must progress down the levels of a tree to reach a leaf of the greatest distance from the root,"['height', 'equals', 'number', 'times', 'must', 'progress', 'levels', 'tree', 'reach', 'leaf', 'greatest', 'distance', 'root']",height equal number time must progress level tree reach leaf greatest distanc root,height equal number time must progress level tree reach leaf greatest distance root
the height of a tree is the length from the root to the furthest leaf,5.0,1.0,the height of a tree is the length from the root to the furthest leaf,"['height', 'tree', 'length', 'root', 'furthest', 'leaf']",height tree length root furthest leaf,height tree length root furthest leaf
The height is the number of generationslevelsfrom the root.,4.5,1.0,the height is the number of generationslevelsfrom the root,"['height', 'number', 'generationslevelsfrom', 'root']",height number generationslevelsfrom root,height number generationslevelsfrom root
The height of a tree is the number of levels between the root and the leaf farthest away from it.,5.0,1.0,the height of a tree is the number of levels between the root and the leaf farthest away from it,"['height', 'tree', 'number', 'levels', 'root', 'leaf', 'farthest', 'away']",height tree number level root leaf farthest away,height tree number level root leaf farthest away
is the depth of its furthest leaf,4.5,1.0,is the depth of its furthest leaf,"['depth', 'furthest', 'leaf']",depth furthest leaf,depth furthest leaf
the number of nodes from root to leaf,3.5,0.0,the number of nodes from root to leaf,"['number', 'nodes', 'root', 'leaf']",number node root leaf,number node root leaf
the distance from the deepest leaf to the root,5.0,1.0,the distance from the deepest leaf to the root,"['distance', 'deepest', 'leaf', 'root']",distanc deepest leaf root,distance deepest leaf root
the number of generations or levels of a tree,4.5,1.0,the number of generations or levels of a tree,"['number', 'generations', 'levels', 'tree']",number gener level tree,number generation level tree
"The intensity of the children. Say you begin with one node, Thats one height. Then you add two children to that node and then two children to each of those nodes and two children to each of THOSE nodes. Youre current height would be 4.",3.0,0.0,the intensity of the children say you begin with one node thats one height then you add two children to that node and then two children to each of those nodes and two children to each of those nodes youre current height would be 4,"['intensity', 'children', 'say', 'begin', 'one', 'node', 'thats', 'one', 'height', 'add', 'two', 'children', 'node', 'two', 'children', 'nodes', 'two', 'children', 'nodes', 'youre', 'current', 'height', 'would', '4']",intens children say begin one node that one height add two children node two children node two children node your current height would 4,intensity child say begin one node thats one height add two child node two child node two child node youre current height would 4
"the number of levels of a tree, like a tree can have at minimum a depth of 3 and at most a height of 8 for 8 nodes.",3.5,0.0,the number of levels of a tree like a tree can have at minimum a depth of 3 and at most a height of 8 for 8 nodes,"['number', 'levels', 'tree', 'like', 'tree', 'minimum', 'depth', '3', 'height', '8', '8', 'nodes']",number level tree like tree minimum depth 3 height 8 8 node,number level tree like tree minimum depth 3 height 8 8 node
The number of nodes on the longest path from the root to the leaf.,5.0,1.0,the number of nodes on the longest path from the root to the leaf,"['number', 'nodes', 'longest', 'path', 'root', 'leaf']",number node longest path root leaf,number node longest path root leaf
The height of a tree is the number of nodes on the longes path from the root to a leaf.,5.0,1.0,the height of a tree is the number of nodes on the longes path from the root to a leaf,"['height', 'tree', 'number', 'nodes', 'longes', 'path', 'root', 'leaf']",height tree number node long path root leaf,height tree number node longes path root leaf
is equal to the number of levels. levels between the root node and the terminal nodes.,4.5,1.0,is equal to the number of levels levels between the root node and the terminal nodes,"['equal', 'number', 'levels', 'levels', 'root', 'node', 'terminal', 'nodes']",equal number level level root node termin node,equal number level level root node terminal node
the number of generations or levels the tree has,4.5,1.0,the number of generations or levels the tree has,"['number', 'generations', 'levels', 'tree']",number gener level tree,number generation level tree
"The height of a tree is the depth of its subtrees, that is, how many layers deep it is.",4.5,1.0,the height of a tree is the depth of its subtrees that is how many layers deep it is,"['height', 'tree', 'depth', 'subtrees', 'many', 'layers', 'deep']",height tree depth subtre mani layer deep,height tree depth subtrees many layer deep
is the number of generations in the tree,4.5,1.0,is the number of generations in the tree,"['number', 'generations', 'tree']",number gener tree,number generation tree
The number of nodes on the longest path from the root to a leaf.,5.0,1.0,the number of nodes on the longest path from the root to a leaf,"['number', 'nodes', 'longest', 'path', 'root', 'leaf']",number node longest path root leaf,number node longest path root leaf
the number of distinct levels of separation,4.0,1.0,the number of distinct levels of separation,"['number', 'distinct', 'levels', 'separation']",number distinct level separ,number distinct level separation
the height of a tree is how many levels of nodes that it has,4.5,1.0,the height of a tree is how many levels of nodes that it has,"['height', 'tree', 'many', 'levels', 'nodes']",height tree mani level node,height tree many level node
The connections between elements are called branches. Trees are often called inverted trees because they are normally drawn with the root at the top.,1.5,0.0,the connections between elements are called branches trees are often called inverted trees because they are normally drawn with the root at the top,"['connections', 'elements', 'called', 'branches', 'trees', 'often', 'called', 'inverted', 'trees', 'normally', 'drawn', 'root', 'top']",connect element call branch tree often call invert tree normal drawn root top,connection element called branch tree often called inverted tree normally drawn root top
A leaf is a child of a parent node that has no children nodes of its own.,5.0,1.0,a leaf is a child of a parent node that has no children nodes of its own,"['leaf', 'child', 'parent', 'node', 'children', 'nodes']",leaf child parent node children node,leaf child parent node child node
A leaf is a node with no children.,5.0,1.0,a leaf is a node with no children,"['leaf', 'node', 'children']",leaf node children,leaf node child
A node with no children.,5.0,1.0,a node with no children,"['node', 'children']",node children,node child
A tree node with no children.,5.0,1.0,a tree node with no children,"['tree', 'node', 'children']",tree node children,tree node child
And end point of the tree ... a node that does not have any children.,5.0,1.0,and end point of the tree a node that does not have any children,"['end', 'point', 'tree', 'node', 'children']",end point tree node children,end point tree node child
a node with no children.,5.0,1.0,a node with no children,"['node', 'children']",node children,node child
A new item to the tree --a child,3.0,0.0,a new item to the tree --a child,"['new', 'item', 'tree', '--', 'child']",new item tree -- child,new item tree -- child
"A leaf is a node with children, it is a terminating node.",2.0,0.0,a leaf is a node with children it is a terminating node,"['leaf', 'node', 'children', 'terminating', 'node']",leaf node children termin node,leaf node child terminating node
The node with degree 0.,4.0,1.0,the node with degree 0,"['node', 'degree', '0']",node degre 0,node degree 0
the node with degree 0,4.0,1.0,the node with degree 0,"['node', 'degree', '0']",node degre 0,node degree 0
a leaf is a node with no children,5.0,1.0,a leaf is a node with no children,"['leaf', 'node', 'children']",leaf node children,leaf node child
the last child on any branch,4.5,1.0,the last child on any branch,"['last', 'child', 'branch']",last child branch,last child branch
The last value in the tree. A value with no children attatched.,5.0,1.0,the last value in the tree a value with no children attatched,"['last', 'value', 'tree', 'value', 'children', 'attatched']",last valu tree valu children attatch,last value tree value child attatched
a node with no children.,5.0,1.0,a node with no children,"['node', 'children']",node children,node child
A node with no children.,5.0,1.0,a node with no children,"['node', 'children']",node children,node child
A leaf is a node with no children,5.0,1.0,a leaf is a node with no children,"['leaf', 'node', 'children']",leaf node children,leaf node child
a node with degree 0. last node in the tree and furtherest away from the root.,4.0,1.0,a node with degree 0 last node in the tree and furtherest away from the root,"['node', 'degree', '0', 'last', 'node', 'tree', 'furtherest', 'away', 'root']",node degre 0 last node tree furtherest away root,node degree 0 last node tree furtherest away root
an endpoint on a tree that contains no pointers or pointers that are set to null,4.5,1.0,an endpoint on a tree that contains no pointers or pointers that are set to null,"['endpoint', 'tree', 'contains', 'pointers', 'pointers', 'set', 'null']",endpoint tree contain pointer pointer set null,endpoint tree contains pointer pointer set null
A leaf is a node with no children.,5.0,1.0,a leaf is a node with no children,"['leaf', 'node', 'children']",leaf node children,leaf node child
an element in a tree that has no children,5.0,1.0,an element in a tree that has no children,"['element', 'tree', 'children']",element tree children,element tree child
A node with no children.,5.0,1.0,a node with no children,"['node', 'children']",node children,node child
a leaf is a node that has no children nodes,5.0,1.0,a leaf is a node that has no children nodes,"['leaf', 'node', 'children', 'nodes']",leaf node children node,leaf node child node
a leaf is a node with no children,5.0,1.0,a leaf is a node with no children,"['leaf', 'node', 'children']",leaf node children,leaf node child
"The elements at the very bottom of an inverted treethat is, those that have no elements below themare called leaves.",5.0,1.0,the elements at the very bottom of an inverted treethat is those that have no elements below themare called leaves,"['elements', 'bottom', 'inverted', 'treethat', 'elements', 'themare', 'called', 'leaves']",element bottom invert treethat element themar call leav,element bottom inverted treethat element themare called leaf
"A tree data structure in which each done has at most two children, typical called left and right nodes. The right node is usually greater than the left node and the parent node.",4.5,1.0,a tree data structure in which each done has at most two children typical called left and right nodes the right node is usually greater than the left node and the parent node,"['tree', 'data', 'structure', 'done', 'two', 'children', 'typical', 'called', 'left', 'right', 'nodes', 'right', 'node', 'usually', 'greater', 'left', 'node', 'parent', 'node']",tree data structur done two children typic call left right node right node usual greater left node parent node,tree data structure done two child typical called left right node right node usually greater left node parent node
"A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node can have no more than two children, a right and a left child.",5.0,1.0,a binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root each node can have no more than two children a right and a left child,"['binary', 'tree', 'set', 'nodes', 'either', 'empty', 'partitioned', 'root', 'node', 'one', 'two', 'subsets', 'binary', 'subtrees', 'root', 'node', 'two', 'children', 'right', 'left', 'child']",binari tree set node either empti partit root node one two subset binari subtre root node two children right left child,binary tree set node either empty partitioned root node one two subset binary subtrees root node two child right left child
"A set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.",5.0,1.0,a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root each node has at most two children the left child and the right child,"['set', 'nodes', 'either', 'empty', 'partitioned', 'root', 'node', 'one', 'two', 'subsets', 'binary', 'subtrees', 'root', 'node', 'two', 'children', 'left', 'child', 'right', 'child']",set node either empti partit root node one two subset binari subtre root node two children left child right child,set node either empty partitioned root node one two subset binary subtrees root node two child left child right child
"A set of zero or more nodes, partitioned into a root node and two possibly empty sets that are binary trees. Thus, each node in a binary tree has at most two children, the left child and the right child.",5.0,1.0,a set of zero or more nodes partitioned into a root node and two possibly empty sets that are binary trees thus each node in a binary tree has at most two children the left child and the right child,"['set', 'zero', 'nodes', 'partitioned', 'root', 'node', 'two', 'possibly', 'empty', 'sets', 'binary', 'trees', 'thus', 'node', 'binary', 'tree', 'two', 'children', 'left', 'child', 'right', 'child']",set zero node partit root node two possibl empti set binari tree thu node binari tree two children left child right child,set zero node partitioned root node two possibly empty set binary tree thus node binary tree two child left child right child
A tree in which each parent has a maximum of 2 children.,5.0,1.0,a tree in which each parent has a maximum of 2 children,"['tree', 'parent', 'maximum', '2', 'children']",tree parent maximum 2 children,tree parent maximum 2 child
a tree where each node has at most 2 children.,5.0,1.0,a tree where each node has at most 2 children,"['tree', 'node', '2', 'children']",tree node 2 children,tree node 2 child
a tree with up to two children or a right subtree and a left subtree,5.0,1.0,a tree with up to two children or a right subtree and a left subtree,"['tree', 'two', 'children', 'right', 'subtree', 'left', 'subtree']",tree two children right subtre left subtre,tree two child right subtree left subtree
"A binary tree is a tree in which all nodes have a maximum of two degrees, or can only have two children each.",5.0,1.0,a binary tree is a tree in which all nodes have a maximum of two degrees or can only have two children each,"['binary', 'tree', 'tree', 'nodes', 'maximum', 'two', 'degrees', 'two', 'children']",binari tree tree node maximum two degre two children,binary tree tree node maximum two degree two child
a binary tree is a tree data structure in which each node has at most two children.,5.0,1.0,a binary tree is a tree data structure in which each node has at most two children,"['binary', 'tree', 'tree', 'data', 'structure', 'node', 'two', 'children']",binari tree tree data structur node two children,binary tree tree data structure node two child
"a tree with only 2 joints, left and right",4.5,1.0,a tree with only 2 joints left and right,"['tree', '2', 'joints', 'left', 'right']",tree 2 joint left right,tree 2 joint left right
A binary search tree is a tree that also has the condition that each node may have at maximum 2 children,4.5,1.0,a binary search tree is a tree that also has the condition that each node may have at maximum 2 children,"['binary', 'search', 'tree', 'tree', 'also', 'condition', 'node', 'may', 'maximum', '2', 'children']",binari search tree tree also condit node may maximum 2 children,binary search tree tree also condition node may maximum 2 child
a tree where each parent can have at max two children.,5.0,1.0,a tree where each parent can have at max two children,"['tree', 'parent', 'max', 'two', 'children']",tree parent max two children,tree parent max two child
a list of numbers that are ordered compared to how they compare to the other numbers already added in the tree,2.0,0.0,a list of numbers that are ordered compared to how they compare to the other numbers already added in the tree,"['list', 'numbers', 'ordered', 'compared', 'compare', 'numbers', 'already', 'added', 'tree']",list number order compar compar number alreadi ad tree,list number ordered compared compare number already added tree
a tree where each node can have at most 2 children.,5.0,1.0,a tree where each node can have at most 2 children,"['tree', 'node', '2', 'children']",tree node 2 children,tree node 2 child
"Starting at the root node, it branches off into one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.",5.0,1.0,starting at the root node it branches off into one or two subsets that are binary subtrees of the root each node has at most two children the left child and the right child,"['starting', 'root', 'node', 'branches', 'one', 'two', 'subsets', 'binary', 'subtrees', 'root', 'node', 'two', 'children', 'left', 'child', 'right', 'child']",start root node branch one two subset binari subtre root node two children left child right child,starting root node branch one two subset binary subtrees root node two child left child right child
"A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.",5.0,1.0,a binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root each node has at most two children the left child and the right child,"['binary', 'tree', 'set', 'nodes', 'either', 'empty', 'partitioned', 'root', 'node', 'one', 'two', 'subsets', 'binary', 'subtrees', 'root', 'node', 'two', 'children', 'left', 'child', 'right', 'child']",binari tree set node either empti partit root node one two subset binari subtre root node two children left child right child,binary tree set node either empty partitioned root node one two subset binary subtrees root node two child left child right child
a tree that has a maximum of 2 children per node,5.0,1.0,a tree that has a maximum of 2 children per node,"['tree', 'maximum', '2', 'children', 'per', 'node']",tree maximum 2 children per node,tree maximum 2 child per node
a tree with elements that can contain at most two pointers,5.0,1.0,a tree with elements that can contain at most two pointers,"['tree', 'elements', 'contain', 'two', 'pointers']",tree element contain two pointer,tree element contain two pointer
A binary tree can have only two children for each node.,5.0,1.0,a binary tree can have only two children for each node,"['binary', 'tree', 'two', 'children', 'node']",binari tree two children node,binary tree two child node
a tree where every parent has only two children,4.5,1.0,a tree where every parent has only two children,"['tree', 'every', 'parent', 'two', 'children']",tree everi parent two children,tree every parent two child
A tree where every node has no more than two children,5.0,1.0,a tree where every node has no more than two children,"['tree', 'every', 'node', 'two', 'children']",tree everi node two children,tree every node two child
"a binary tree is a special search tree where each node has either 2, 1, or 0 children",4.5,1.0,a binary tree is a special search tree where each node has either 2 1 or 0 children,"['binary', 'tree', 'special', 'search', 'tree', 'node', 'either', '2', '1', '0', 'children']",binari tree special search tree node either 2 1 0 children,binary tree special search tree node either 2 1 0 child
a binary tree is a special type of tree where each node can only have at maximum 2 children,5.0,1.0,a binary tree is a special type of tree where each node can only have at maximum 2 children,"['binary', 'tree', 'special', 'type', 'tree', 'node', 'maximum', '2', 'children']",binari tree special type tree node maximum 2 children,binary tree special type tree node maximum 2 child
A binary tree is a special type of inverted tree in which each element has only two branches below it.,4.5,1.0,a binary tree is a special type of inverted tree in which each element has only two branches below it,"['binary', 'tree', 'special', 'type', 'inverted', 'tree', 'element', 'two', 'branches']",binari tree special type invert tree element two branch,binary tree special type inverted tree element two branch
"A tree data structure where each node has a value, where the total order is defined on these values. the left subtree contains only values less than the parent node, and vice versa for the right subtree.",5.0,1.0,a tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,"['tree', 'data', 'structure', 'node', 'value', 'total', 'order', 'defined', 'values', 'left', 'subtree', 'contains', 'values', 'less', 'parent', 'node', 'vice', 'versa', 'right', 'subtree']",tree data structur node valu total order defin valu left subtre contain valu less parent node vice versa right subtre,tree data structure node value total order defined value left subtree contains value le parent node vice versa right subtree
A binary search tree is a binary tree where the value in any node n 'is greater than the value in every node in n 's left subtree but less than every node in n s right subtree.,5.0,1.0,a binary search tree is a binary tree where the value in any node n is greater than the value in every node in n s left subtree but less than every node in n s right subtree,"['binary', 'search', 'tree', 'binary', 'tree', 'value', 'node', 'n', 'greater', 'value', 'every', 'node', 'n', 'left', 'subtree', 'less', 'every', 'node', 'n', 'right', 'subtree']",binari search tree binari tree valu node n greater valu everi node n left subtre less everi node n right subtre,binary search tree binary tree value node n greater value every node n left subtree le every node n right subtree
"A binary tree where the value in any node n is greater than the value in every node in n 's left subtree, but less than the value of every node in n 's right subtree.",5.0,1.0,a binary tree where the value in any node n is greater than the value in every node in n s left subtree but less than the value of every node in n s right subtree,"['binary', 'tree', 'value', 'node', 'n', 'greater', 'value', 'every', 'node', 'n', 'left', 'subtree', 'less', 'value', 'every', 'node', 'n', 'right', 'subtree']",binari tree valu node n greater valu everi node n left subtre less valu everi node n right subtre,binary tree value node n greater value every node n left subtree le value every node n right subtree
"A binary tree where the search key in any node n is greater than the search key in any node in n 's left subtree, but less than the search key in any node in n 's right subtree.",5.0,1.0,a binary tree where the search key in any node n is greater than the search key in any node in n s left subtree but less than the search key in any node in n s right subtree,"['binary', 'tree', 'search', 'key', 'node', 'n', 'greater', 'search', 'key', 'node', 'n', 'left', 'subtree', 'less', 'search', 'key', 'node', 'n', 'right', 'subtree']",binari tree search key node n greater search key node n left subtre less search key node n right subtre,binary tree search key node n greater search key node n left subtree le search key node n right subtree
"A tree which is split based on values. This makes it very easy to search. One can compare the desired value to the root, and if the root is greater than, we search the left side of the tree, if it is less than, we search the right side ... and do the same thing recursively.",5.0,1.0,a tree which is split based on values this makes it very easy to search one can compare the desired value to the root and if the root is greater than we search the left side of the tree if it is less than we search the right side and do the same thing recursively,"['tree', 'split', 'based', 'values', 'makes', 'easy', 'search', 'one', 'compare', 'desired', 'value', 'root', 'root', 'greater', 'search', 'left', 'side', 'tree', 'less', 'search', 'right', 'side', 'thing', 'recursively']",tree split base valu make easi search one compar desir valu root root greater search left side tree less search right side thing recurs,tree split based value make easy search one compare desired value root root greater search left side tree le search right side thing recursively
a tree where each node has at most two nodes and the node on the left is less than the root and the node on the right is greater than the root.,4.5,1.0,a tree where each node has at most two nodes and the node on the left is less than the root and the node on the right is greater than the root,"['tree', 'node', 'two', 'nodes', 'node', 'left', 'less', 'root', 'node', 'right', 'greater', 'root']",tree node two node node left less root node right greater root,tree node two node node left le root node right greater root
a special binary tree that has a rule that all the subtrees on the right are smaller than the node value and all the subtrees on the left are larger than the node value,4.0,1.0,a special binary tree that has a rule that all the subtrees on the right are smaller than the node value and all the subtrees on the left are larger than the node value,"['special', 'binary', 'tree', 'rule', 'subtrees', 'right', 'smaller', 'node', 'value', 'subtrees', 'left', 'larger', 'node', 'value']",special binari tree rule subtre right smaller node valu subtre left larger node valu,special binary tree rule subtrees right smaller node value subtrees left larger node value
"Binary search trees are similar to binary trees, but have been implemented to organize data in a specific way for later searching.",3.5,0.0,binary search trees are similar to binary trees but have been implemented to organize data in a specific way for later searching,"['binary', 'search', 'trees', 'similar', 'binary', 'trees', 'implemented', 'organize', 'data', 'specific', 'way', 'later', 'searching']",binari search tree similar binari tree implement organ data specif way later search,binary search tree similar binary tree implemented organize data specific way later searching
"it is a binary tree where each node has a value, a total order is defined on these values, the left subtree of a node contains only values less than the node 's value, and the right subtree of a node contains only values greater than or equal to the node 's value.",5.0,1.0,it is a binary tree where each node has a value a total order is defined on these values the left subtree of a node contains only values less than the node s value and the right subtree of a node contains only values greater than or equal to the node s value,"['binary', 'tree', 'node', 'value', 'total', 'order', 'defined', 'values', 'left', 'subtree', 'node', 'contains', 'values', 'less', 'node', 'value', 'right', 'subtree', 'node', 'contains', 'values', 'greater', 'equal', 'node', 'value']",binari tree node valu total order defin valu left subtre node contain valu less node valu right subtre node contain valu greater equal node valu,binary tree node value total order defined value left subtree node contains value le node value right subtree node contains value greater equal node value
A binary tree with the data organized in a specific arangment,2.5,0.0,a binary tree with the data organized in a specific arangment,"['binary', 'tree', 'data', 'organized', 'specific', 'arangment']",binari tree data organ specif arang,binary tree data organized specific arangment
"A binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root. If the value is smaller than the root it traverses left, if it is larger it traverses right until it becomes a leaf.",4.5,1.0,a binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root if the value is smaller than the root it traverses left if it is larger it traverses right until it becomes a leaf,"['binary', 'search', 'tree', 'tree', 'also', 'condition', 'node', 'may', 'maximum', '2', 'children', 'input', 'data', 'compared', 'data', 'tree', 'starting', 'root', 'value', 'smaller', 'root', 'traverses', 'left', 'larger', 'traverses', 'right', 'becomes', 'leaf']",binari search tree tree also condit node may maximum 2 children input data compar data tree start root valu smaller root travers left larger travers right becom leaf,binary search tree tree also condition node may maximum 2 child input data compared data tree starting root value smaller root traverse left larger traverse right becomes leaf
a binary tree in which the data is in order from left to right.,4.0,1.0,a binary tree in which the data is in order from left to right,"['binary', 'tree', 'data', 'order', 'left', 'right']",binari tree data order left right,binary tree data order left right
a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes.,3.5,0.0,a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes,"['tree', 'set', 'easily', 'searched', 'numbers', 'based', 'location', 'compared', 'previous', 'nodes']",tree set easili search number base locat compar previou node,tree set easily searched number based location compared previous node
"a binary tree where the children are ordered such that the right side is greater than the current node, and the left is less than or equal the current node.",5.0,1.0,a binary tree where the children are ordered such that the right side is greater than the current node and the left is less than or equal the current node,"['binary', 'tree', 'children', 'ordered', 'right', 'side', 'greater', 'current', 'node', 'left', 'less', 'equal', 'current', 'node']",binari tree children order right side greater current node left less equal current node,binary tree child ordered right side greater current node left le equal current node
"A binary tree where the value in any node n is greater than the value in every node n 's left subtree, but less than every value in n 's right subtree.",5.0,1.0,a binary tree where the value in any node n is greater than the value in every node n s left subtree but less than every value in n s right subtree,"['binary', 'tree', 'value', 'node', 'n', 'greater', 'value', 'every', 'node', 'n', 'left', 'subtree', 'less', 'every', 'value', 'n', 'right', 'subtree']",binari tree valu node n greater valu everi node n left subtre less everi valu n right subtre,binary tree value node n greater value every node n left subtree le every value n right subtree
A binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees.,2.5,0.0,a binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees,"['binary', 'search', 'tree', 'finite', 'set', 'nodes', 'either', 'empty', 'consits', 'root', 'two', 'disjoint', 'binary', 'trees', 'call', 'left', 'right', 'subtrees']",binari search tree finit set node either empti consit root two disjoint binari tree call left right subtre,binary search tree finite set node either empty consits root two disjoint binary tree call left right subtrees
it is similar to a binary tree. The keys in a nonempty left subtreeright subtreeare smallerlargerthan the key in the root of subtree. the values in all nodes in the left subtree of a node are less than the node value the values in all nodes in the right subtree of a node are greater than the node values,5.0,1.0,it is similar to a binary tree the keys in a nonempty left subtreeright subtreeare smallerlargerthan the key in the root of subtree the values in all nodes in the left subtree of a node are less than the node value the values in all nodes in the right subtree of a node are greater than the node values,"['similar', 'binary', 'tree', 'keys', 'nonempty', 'left', 'subtreeright', 'subtreeare', 'smallerlargerthan', 'key', 'root', 'subtree', 'values', 'nodes', 'left', 'subtree', 'node', 'less', 'node', 'value', 'values', 'nodes', 'right', 'subtree', 'node', 'greater', 'node', 'values']",similar binari tree key nonempti left subtreeright subtreear smallerlargerthan key root subtre valu node left subtre node less node valu valu node right subtre node greater node valu,similar binary tree key nonempty left subtreeright subtreeare smallerlargerthan key root subtree value node left subtree node le node value value node right subtree node greater node value
"a set of numbers arranged by links. each node can contain two pointers to other elements. each node to the left of the parent is smaller and each node to the right is larger. recursive implementation implies that if traversed in order, the output would be sorted",4.5,1.0,a set of numbers arranged by links each node can contain two pointers to other elements each node to the left of the parent is smaller and each node to the right is larger recursive implementation implies that if traversed in order the output would be sorted,"['set', 'numbers', 'arranged', 'links', 'node', 'contain', 'two', 'pointers', 'elements', 'node', 'left', 'parent', 'smaller', 'node', 'right', 'larger', 'recursive', 'implementation', 'implies', 'traversed', 'order', 'output', 'would', 'sorted']",set number arrang link node contain two pointer element node left parent smaller node right larger recurs implement impli travers order output would sort,set number arranged link node contain two pointer element node left parent smaller node right larger recursive implementation implies traversed order output would sorted
"A binary search tree is a special binary tree arranged such that every left child node contains a value less than its parent, and every right child node contains a value greater its parent.",5.0,1.0,a binary search tree is a special binary tree arranged such that every left child node contains a value less than its parent and every right child node contains a value greater its parent,"['binary', 'search', 'tree', 'special', 'binary', 'tree', 'arranged', 'every', 'left', 'child', 'node', 'contains', 'value', 'less', 'parent', 'every', 'right', 'child', 'node', 'contains', 'value', 'greater', 'parent']",binari search tree special binari tree arrang everi left child node contain valu less parent everi right child node contain valu greater parent,binary search tree special binary tree arranged every left child node contains value le parent every right child node contains value greater parent
"a binary tree with a special organization of data. where the left child of the element is less than it, and the right child is larger than it.",5.0,1.0,a binary tree with a special organization of data where the left child of the element is less than it and the right child is larger than it,"['binary', 'tree', 'special', 'organization', 'data', 'left', 'child', 'element', 'less', 'right', 'child', 'larger']",binari tree special organ data left child element less right child larger,binary tree special organization data left child element le right child larger
A tree in which the smaller values are located on the left of a parent node and the larger values are located on the right of the parent node.,5.0,1.0,a tree in which the smaller values are located on the left of a parent node and the larger values are located on the right of the parent node,"['tree', 'smaller', 'values', 'located', 'left', 'parent', 'node', 'larger', 'values', 'located', 'right', 'parent', 'node']",tree smaller valu locat left parent node larger valu locat right parent node,tree smaller value located left parent node larger value located right parent node
"a binary search tree is a special tree in which each node has at most two children, labeled left child and right child",2.5,0.0,a binary search tree is a special tree in which each node has at most two children labeled left child and right child,"['binary', 'search', 'tree', 'special', 'tree', 'node', 'two', 'children', 'labeled', 'left', 'child', 'right', 'child']",binari search tree special tree node two children label left child right child,binary search tree special tree node two child labeled left child right child
"it is a binary tree where each node has a unique key, the left child of a node has only values less than that node, and the right child of each node has higher values than that node.",5.0,1.0,it is a binary tree where each node has a unique key the left child of a node has only values less than that node and the right child of each node has higher values than that node,"['binary', 'tree', 'node', 'unique', 'key', 'left', 'child', 'node', 'values', 'less', 'node', 'right', 'child', 'node', 'higher', 'values', 'node']",binari tree node uniqu key left child node valu less node right child node higher valu node,binary tree node unique key left child node value le node right child node higher value node
"Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets, multisets, and associative arrays.",2.5,0.0,binary search trees are a fundamental data structure used to construct more abstract data structures such as sets multisets and associative arrays,"['binary', 'search', 'trees', 'fundamental', 'data', 'structure', 'used', 'construct', 'abstract', 'data', 'structures', 'sets', 'multisets', 'associative', 'arrays']",binari search tree fundament data structur use construct abstract data structur set multiset associ array,binary search tree fundamental data structure used construct abstract data structure set multisets associative array
"For every node in the binary tree we first visit its left sub-treeif its thereand then visit the parent node itself, and then the right sub-treeif its there.",5.0,1.0,for every node in the binary tree we first visit its left sub-treeif its thereand then visit the parent node itself and then the right sub-treeif its there,"['every', 'node', 'binary', 'tree', 'first', 'visit', 'left', 'sub-treeif', 'thereand', 'visit', 'parent', 'node', 'right', 'sub-treeif']",everi node binari tree first visit left sub-treeif thereand visit parent node right sub-treeif,every node binary tree first visit left sub-treeif thereand visit parent node right sub-treeif
The inorder traversal of a binary tree visits the node of a binary tree in order according to their data values.,2.5,0.0,the inorder traversal of a binary tree visits the node of a binary tree in order according to their data values,"['inorder', 'traversal', 'binary', 'tree', 'visits', 'node', 'binary', 'tree', 'order', 'according', 'data', 'values']",inord travers binari tree visit node binari tree order accord data valu,inorder traversal binary tree visit node binary tree order according data value
Traverses the binary tree in inorder. It lets you visit the nodes in order according to their data values.,3.0,0.0,traverses the binary tree in inorder it lets you visit the nodes in order according to their data values,"['traverses', 'binary', 'tree', 'inorder', 'lets', 'visit', 'nodes', 'order', 'according', 'data', 'values']",travers binari tree inord let visit node order accord data valu,traverse binary tree inorder let visit node order according data value
Its used to visit nodes of a binary search tree in a search key order.,3.5,0.0,its used to visit nodes of a binary search tree in a search key order,"['used', 'visit', 'nodes', 'binary', 'search', 'tree', 'search', 'key', 'order']",use visit node binari search tree search key order,used visit node binary search tree search key order
Left side of treeRootRight side of tree,5.0,1.0,left side of treerootright side of tree,"['left', 'side', 'treerootright', 'side', 'tree']",left side treerootright side tree,left side treerootright side tree
printing a tree in order from least to greatest. This done by going as far left down the tree as possible and printing the parent and then right tree. Then move up the tree.,5.0,1.0,printing a tree in order from least to greatest this done by going as far left down the tree as possible and printing the parent and then right tree then move up the tree,"['printing', 'tree', 'order', 'least', 'greatest', 'done', 'going', 'far', 'left', 'tree', 'possible', 'printing', 'parent', 'right', 'tree', 'move', 'tree']",print tree order least greatest done go far left tree possibl print parent right tree move tree,printing tree order least greatest done going far left tree possible printing parent right tree move tree
"The in order is to go from left, root, right",5.0,1.0,the in order is to go from left root right,"['order', 'go', 'left', 'root', 'right']",order go left root right,order go left root right
"Inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it, it s parent, and it s right side sibling, then it goes up a level and repeats until it gets to the root.",4.5,1.0,inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it it s parent and it s right side sibling then it goes up a level and repeats until it gets to the root,"['inorder', 'traversal', 'binary', 'tree', 'retrieve', 'start', 'furthest', 'left', 'hand', 'leaf', 'checks', 'parent', 'right', 'side', 'sibling', 'goes', 'level', 'repeats', 'gets', 'root']",inord travers binari tree retriev start furthest left hand leaf check parent right side sibl goe level repeat get root,inorder traversal binary tree retrieve start furthest left hand leaf check parent right side sibling go level repeat get root
traverse the left subtree. visit the root. traverse the right subtree.,5.0,1.0,traverse the left subtree visit the root traverse the right subtree,"['traverse', 'left', 'subtree', 'visit', 'root', 'traverse', 'right', 'subtree']",travers left subtre visit root travers right subtre,traverse left subtree visit root traverse right subtree
postorder,1.5,0.0,postorder,['postorder'],postord,postorder
in order starts with the root then does right child then left child recursively,1.5,0.0,in order starts with the root then does right child then left child recursively,"['order', 'starts', 'root', 'right', 'child', 'left', 'child', 'recursively']",order start root right child left child recurs,order start root right child left child recursively
Left Child implies Parent implies Right Child,5.0,1.0,left child implies parent implies right child,"['left', 'child', 'implies', 'parent', 'implies', 'right', 'child']",left child impli parent impli right child,left child implies parent implies right child
it goes from lowest to highest inside of the tree,2.0,0.0,it goes from lowest to highest inside of the tree,"['goes', 'lowest', 'highest', 'inside', 'tree']",goe lowest highest insid tree,go lowest highest inside tree
"starting by displaying the node furthest to the right, then the node, then the node on the right, in recursive order.",4.0,1.0,starting by displaying the node furthest to the right then the node then the node on the right in recursive order,"['starting', 'displaying', 'node', 'furthest', 'right', 'node', 'node', 'right', 'recursive', 'order']",start display node furthest right node node right recurs order,starting displaying node furthest right node node right recursive order
It travels left to right,3.5,0.0,it travels left to right,"['travels', 'left', 'right']",travel left right,travel left right
void inorderptNode ptrifptrinorderptr implies left; coutdata; inorderptr implies right;,5.0,1.0,void inorderptnode ptrifptrinorderptr implies left coutdata inorderptr implies right,"['void', 'inorderptnode', 'ptrifptrinorderptr', 'implies', 'left', 'coutdata', 'inorderptr', 'implies', 'right']",void inorderptnod ptrifptrinorderptr impli left coutdata inorderptr impli right,void inorderptnode ptrifptrinorderptr implies left coutdata inorderptr implies right
"the root is in the middle. The left subtree is traversed first, then the root, and finally the right subtree.",5.0,1.0,the root is in the middle the left subtree is traversed first then the root and finally the right subtree,"['root', 'middle', 'left', 'subtree', 'traversed', 'first', 'root', 'finally', 'right', 'subtree']",root middl left subtre travers first root final right subtre,root middle left subtree traversed first root finally right subtree
"a traversal that visits the left branch first, then the parent node, then the right branch, recursively.",5.0,1.0,a traversal that visits the left branch first then the parent node then the right branch recursively,"['traversal', 'visits', 'left', 'branch', 'first', 'parent', 'node', 'right', 'branch', 'recursively']",travers visit left branch first parent node right branch recurs,traversal visit left branch first parent node right branch recursively
"Inorder traversal visits the left branch of a nodeall the way to it is deepest left-most leafbefore visiting the node itself. After visiting the entire left branch and the node, it visits the node 's right branch following the same pattern of left child, node, right child.",5.0,1.0,inorder traversal visits the left branch of a nodeall the way to it is deepest left-most leafbefore visiting the node itself after visiting the entire left branch and the node it visits the node s right branch following the same pattern of left child node right child,"['inorder', 'traversal', 'visits', 'left', 'branch', 'nodeall', 'way', 'deepest', 'left-most', 'leafbefore', 'visiting', 'node', 'visiting', 'entire', 'left', 'branch', 'node', 'visits', 'node', 'right', 'branch', 'following', 'pattern', 'left', 'child', 'node', 'right', 'child']",inord travers visit left branch nodeal way deepest left-most leafbefor visit node visit entir left branch node visit node right branch follow pattern left child node right child,inorder traversal visit left branch nodeall way deepest left-most leafbefore visiting node visiting entire left branch node visit node right branch following pattern left child node right child
left middle right,5.0,1.0,left middle right,"['left', 'middle', 'right']",left middl right,left middle right
"You traverse all the nodes to the left, then visit the root, then traverse all the nodes on the right.",5.0,1.0,you traverse all the nodes to the left then visit the root then traverse all the nodes on the right,"['traverse', 'nodes', 'left', 'visit', 'root', 'traverse', 'nodes', 'right']",travers node left visit root travers node right,traverse node left visit root traverse node right
"you would go to the furthest down left most node, then to the root then to the rightif left and right existthen you would return one node previous and do the same until you reached the root, then go to the furthest down left most node on the right side of the root and continue this process",5.0,1.0,you would go to the furthest down left most node then to the root then to the rightif left and right existthen you would return one node previous and do the same until you reached the root then go to the furthest down left most node on the right side of the root and continue this process,"['would', 'go', 'furthest', 'left', 'node', 'root', 'rightif', 'left', 'right', 'existthen', 'would', 'return', 'one', 'node', 'previous', 'reached', 'root', 'go', 'furthest', 'left', 'node', 'right', 'side', 'root', 'continue', 'process']",would go furthest left node root rightif left right existthen would return one node previou reach root go furthest left node right side root continu process,would go furthest left node root rightif left right existthen would return one node previous reached root go furthest left node right side root continue process
"it means that you traverse one subtree of a node, then look at the node itself before traversing the other subtree of the node",4.0,1.0,it means that you traverse one subtree of a node then look at the node itself before traversing the other subtree of the node,"['means', 'traverse', 'one', 'subtree', 'node', 'look', 'node', 'traversing', 'subtree', 'node']",mean travers one subtre node look node travers subtre node,mean traverse one subtree node look node traversing subtree node
"Level order traversal is a traversal method by which levels are visited successively starting with level 0the root node, and nodes are visited from left to right on each level, with Push and Pop methods.",2.0,0.0,level order traversal is a traversal method by which levels are visited successively starting with level 0the root node and nodes are visited from left to right on each level with push and pop methods,"['level', 'order', 'traversal', 'traversal', 'method', 'levels', 'visited', 'successively', 'starting', 'level', '0the', 'root', 'node', 'nodes', 'visited', 'left', 'right', 'level', 'push', 'pop', 'methods']",level order travers travers method level visit success start level 0the root node node visit left right level push pop method,level order traversal traversal method level visited successively starting level 0the root node node visited left right level push pop method
This is on the runtime order of lognwhere n is the number of nodes in the binary tree.,5.0,1.0,this is on the runtime order of lognwhere n is the number of nodes in the binary tree,"['runtime', 'order', 'lognwhere', 'n', 'number', 'nodes', 'binary', 'tree']",runtim order lognwher n number node binari tree,runtime order lognwhere n number node binary tree
In a binary search tree of size n it takes logncomparisons to find a specified element.,5.0,1.0,in a binary search tree of size n it takes logncomparisons to find a specified element,"['binary', 'search', 'tree', 'size', 'n', 'takes', 'logncomparisons', 'find', 'specified', 'element']",binari search tree size n take logncomparison find specifi element,binary search tree size n take logncomparisons find specified element
n minus 1 divided by 2 is the algorithm to compare and find an element.,2.0,0.0,n minus 1 divided by 2 is the algorithm to compare and find an element,"['n', 'minus', '1', 'divided', '2', 'algorithm', 'compare', 'find', 'element']",n minu 1 divid 2 algorithm compar find element,n minus 1 divided 2 algorithm compare find element
At most its equivalent to the height of the tree.,5.0,1.0,at most its equivalent to the height of the tree,"['equivalent', 'height', 'tree']",equival height tree,equivalent height tree
Logn,5.0,1.0,logn,['logn'],logn,logn
Olog n,5.0,1.0,olog n,"['olog', 'n']",olog n,olog n
Depends on what half of the tree and the levels you have.,3.5,0.0,depends on what half of the tree and the levels you have,"['depends', 'half', 'tree', 'levels']",depend half tree level,depends half tree level
Olog nin balanced trees,5.0,1.0,olog nin balanced trees,"['olog', 'nin', 'balanced', 'trees']",olog nin balanc tree,olog nin balanced tree
n minus 1,2.5,0.0,n minus 1,"['n', 'minus', '1']",n minu 1,n minus 1
logn,5.0,1.0,logn,['logn'],logn,logn
Onlogn,2.5,0.0,onlogn,['onlogn'],onlogn,onlogn
nLogn,2.0,0.0,nlogn,['nlogn'],nlogn,nlogn
logn,5.0,1.0,logn,['logn'],logn,logn
"at the minimum lognor log2, at the maximum N searches, where N is the number of nodes.",4.5,1.0,at the minimum lognor log2 at the maximum n searches where n is the number of nodes,"['minimum', 'lognor', 'log2', 'maximum', 'n', 'searches', 'n', 'number', 'nodes']",minimum lognor log2 maximum n search n number node,minimum lognor log2 maximum n search n number node
On,3.0,0.0,on,[],,
It takes at most 3 comparisons to find and element in a binary search tree,1.5,0.0,it takes at most 3 comparisons to find and element in a binary search tree,"['takes', '3', 'comparisons', 'find', 'element', 'binary', 'search', 'tree']",take 3 comparison find element binari search tree,take 3 comparison find element binary search tree
lognwhere n equals the number of nodes.,5.0,1.0,lognwhere n equals the number of nodes,"['lognwhere', 'n', 'equals', 'number', 'nodes']",lognwher n equal number node,lognwhere n equal number node
it takes as many comparisons as the number of levels of the binary search tree. it only compares one number at each level,5.0,1.0,it takes as many comparisons as the number of levels of the binary search tree it only compares one number at each level,"['takes', 'many', 'comparisons', 'number', 'levels', 'binary', 'search', 'tree', 'compares', 'one', 'number', 'level']",take mani comparison number level binari search tree compar one number level,take many comparison number level binary search tree compare one number level
At most it takes one less comparisons than the tree 's height. In big-O notation it takes Olog ncomparisons if the tree is balanced.,5.0,1.0,at most it takes one less comparisons than the tree s height in big-o notation it takes olog ncomparisons if the tree is balanced,"['takes', 'one', 'less', 'comparisons', 'tree', 'height', 'big-o', 'notation', 'takes', 'olog', 'ncomparisons', 'tree', 'balanced']",take one less comparison tree height big-o notat take olog ncomparison tree balanc,take one le comparison tree height big-o notation take olog ncomparisons tree balanced
Olog n,5.0,1.0,olog n,"['olog', 'n']",olog n,olog n
log n comparisons,5.0,1.0,log n comparisons,"['log', 'n', 'comparisons']",log n comparison,log n comparison
n to the power of kminus 1 where k is the height of the tree,1.5,0.0,n to the power of kminus 1 where k is the height of the tree,"['n', 'power', 'kminus', '1', 'k', 'height', 'tree']",n power kminu 1 k height tree,n power kminus 1 k height tree
"it takes h comparisons, where h is the height of the tree",5.0,1.0,it takes h comparisons where h is the height of the tree,"['takes', 'h', 'comparisons', 'h', 'height', 'tree']",take h comparison h height tree,take h comparison h height tree
2 way key comparison,1.0,0.0,2 way key comparison,"['2', 'way', 'key', 'comparison']",2 way key comparison,2 way key comparison
"The name of the class file, the parameters it must take to perform its function. Also a brief description of what the class does.",3.0,0.0,the name of the class file the parameters it must take to perform its function also a brief description of what the class does,"['name', 'class', 'file', 'parameters', 'must', 'take', 'perform', 'function', 'also', 'brief', 'description', 'class']",name class file paramet must take perform function also brief descript class,name class file parameter must take perform function also brief description class
"access specifiers and functions, oftentimes a constructor.",3.0,0.0,access specifiers and functions oftentimes a constructor,"['access', 'specifiers', 'functions', 'oftentimes', 'constructor']",access specifi function oftentim constructor,access specifier function oftentimes constructor
"The elements typically included in a class definition are the function prototypes, usually declared public, and the data members used in the class, which are usually declared private.",5.0,1.0,the elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private,"['elements', 'typically', 'included', 'class', 'definition', 'function', 'prototypes', 'usually', 'declared', 'public', 'data', 'members', 'used', 'class', 'usually', 'declared', 'private']",element typic includ class definit function prototyp usual declar public data member use class usual declar privat,element typically included class definition function prototype usually declared public data member used class usually declared private
"Class is user defined. It contains members, data and functions. The keyword class is used and includes brackets",4.0,1.0,class is user defined it contains members data and functions the keyword class is used and includes brackets,"['class', 'user', 'defined', 'contains', 'members', 'data', 'functions', 'keyword', 'class', 'used', 'includes', 'brackets']",class user defin contain member data function keyword class use includ bracket,class user defined contains member data function keyword class used includes bracket
Member functions and data members.,5.0,1.0,member functions and data members,"['member', 'functions', 'data', 'members']",member function data member,member function data member
the functions and variables used when the object is defined for the class.,4.0,1.0,the functions and variables used when the object is defined for the class,"['functions', 'variables', 'used', 'object', 'defined', 'class']",function variabl use object defin class,function variable used object defined class
"Data members, functions and function definitions, variables.",5.0,1.0,data members functions and function definitions variables,"['data', 'members', 'functions', 'function', 'definitions', 'variables']",data member function function definit variabl,data member function function definition variable
return type and input parameters,2.5,0.0,return type and input parameters,"['return', 'type', 'input', 'parameters']",return type input paramet,return type input parameter
Constructor Data members Methods,4.5,1.0,constructor data members methods,"['constructor', 'data', 'members', 'methods']",constructor data member method,constructor data member method
"Function members and member attributes, or in other words, the class variables and functions.",5.0,1.0,function members and member attributes or in other words the class variables and functions,"['function', 'members', 'member', 'attributes', 'words', 'class', 'variables', 'functions']",function member member attribut word class variabl function,function member member attribute word class variable function
"The elements that are included in a class definition is the access-modifier, data types, variables, and function signatures.",4.0,1.0,the elements that are included in a class definition is the access-modifier data types variables and function signatures,"['elements', 'included', 'class', 'definition', 'access-modifier', 'data', 'types', 'variables', 'function', 'signatures']",element includ class definit access-modifi data type variabl function signatur,element included class definition access-modifier data type variable function signature
The variables and function prototypes.,4.0,1.0,the variables and function prototypes,"['variables', 'function', 'prototypes']",variabl function prototyp,variable function prototype
public and private variables and initiations of functions included in the class.,4.0,1.0,public and private variables and initiations of functions included in the class,"['public', 'private', 'variables', 'initiations', 'functions', 'included', 'class']",public privat variabl initi function includ class,public private variable initiation function included class
The return value and the accepted value.,1.5,0.0,the return value and the accepted value,"['return', 'value', 'accepted', 'value']",return valu accept valu,return value accepted value
"A class definition typically includes the class name, the classes constructors, and any extra functions and class variables.",4.0,1.0,a class definition typically includes the class name the classes constructors and any extra functions and class variables,"['class', 'definition', 'typically', 'includes', 'class', 'name', 'classes', 'constructors', 'extra', 'functions', 'class', 'variables']",class definit typic includ class name class constructor extra function class variabl,class definition typically includes class name class constructor extra function class variable
"Parameters and their type, Class name, and return type, and the code to be executed in the class.",3.0,0.0,parameters and their type class name and return type and the code to be executed in the class,"['parameters', 'type', 'class', 'name', 'return', 'type', 'code', 'executed', 'class']",paramet type class name return type code execut class,parameter type class name return type code executed class
"data members, class variables, and functions",5.0,1.0,data members class variables and functions,"['data', 'members', 'class', 'variables', 'functions']",data member class variabl function,data member class variable function
"Constructor, functions, and variables native to the class.",4.0,1.0,constructor functions and variables native to the class,"['constructor', 'functions', 'variables', 'native', 'class']",constructor function variabl nativ class,constructor function variable native class
functions and data members,5.0,1.0,functions and data members,"['functions', 'data', 'members']",function data member,function data member
data members and function definitions,5.0,1.0,data members and function definitions,"['data', 'members', 'function', 'definitions']",data member function definit,data member function definition
member functions and data members,5.0,1.0,member functions and data members,"['member', 'functions', 'data', 'members']",member function data member,member function data member
"constructor, and function definitions.",3.5,0.0,constructor and function definitions,"['constructor', 'function', 'definitions']",constructor function definit,constructor function definition
class name data of class definition of functions and methods,4.5,1.0,class name data of class definition of functions and methods,"['class', 'name', 'data', 'class', 'definition', 'functions', 'methods']",class name data class definit function method,class name data class definition function method
"A class definition includes the definitions of the class 's constructorsand any public or private functions. Of course, it also includes the class header and any necessary C libraries",3.0,0.0,a class definition includes the definitions of the class s constructorsand any public or private functions of course it also includes the class header and any necessary c libraries,"['class', 'definition', 'includes', 'definitions', 'class', 'constructorsand', 'public', 'private', 'functions', 'course', 'also', 'includes', 'class', 'header', 'necessary', 'c', 'libraries']",class definit includ definit class constructorsand public privat function cours also includ class header necessari c librari,class definition includes definition class constructorsand public private function course also includes class header necessary c library
"Class name,, semicoln at the end of the defination, private and bublic followed by :",3.0,0.0,class name semicoln at the end of the defination private and bublic followed by,"['class', 'name', 'semicoln', 'end', 'defination', 'private', 'bublic', 'followed']",class name semicoln end defin privat bublic follow,class name semicoln end defination private bublic followed
"a constructor, private and public variables, and function prototypes",4.0,1.0,a constructor private and public variables and function prototypes,"['constructor', 'private', 'public', 'variables', 'function', 'prototypes']",constructor privat public variabl function prototyp,constructor private public variable function prototype
"Data variables and Functions, Data members",5.0,1.0,data variables and functions data members,"['data', 'variables', 'functions', 'data', 'members']",data variabl function data member,data variable function data member
class definitions include the name of the class and type of parameters,3.0,0.0,class definitions include the name of the class and type of parameters,"['class', 'definitions', 'include', 'name', 'class', 'type', 'parameters']",class definit includ name class type paramet,class definition include name class type parameter
"class variables, class function prototypes",4.5,1.0,class variables class function prototypes,"['class', 'variables', 'class', 'function', 'prototypes']",class variabl class function prototyp,class variable class function prototype
input ADDRESS return type elements,2.5,0.0,input address return type elements,"['input', 'address', 'return', 'type', 'elements']",input address return type element,input address return type element
Public and private specifiers.,5.0,1.0,public and private specifiers,"['public', 'private', 'specifiers']",public privat specifi,public private specifier
"Public, Private, Restricted",5.0,1.0,public private restricted,"['public', 'private', 'restricted']",public privat restrict,public private restricted
The access specifiers are public and private.,5.0,1.0,the access specifiers are public and private,"['access', 'specifiers', 'public', 'private']",access specifi public privat,access specifier public private
public private protected,5.0,1.0,public private protected,"['public', 'private', 'protected']",public privat protect,public private protected
Public or Private.,5.0,1.0,public or private,"['public', 'private']",public privat,public private
public: the function or variable can be used outside the class private: the function or variable can only be used with the class,5.0,1.0,public the function or variable can be used outside the class private the function or variable can only be used with the class,"['public', 'function', 'variable', 'used', 'outside', 'class', 'private', 'function', 'variable', 'used', 'class']",public function variabl use outsid class privat function variabl use class,public function variable used outside class private function variable used class
Public and Private,5.0,1.0,public and private,"['public', 'private']",public privat,public private
public private and protected,5.0,1.0,public private and protected,"['public', 'private', 'protected']",public privat protect,public private protected
Public Private,5.0,1.0,public private,"['public', 'private']",public privat,public private
"Private, public, protected",5.0,1.0,private public protected,"['private', 'public', 'protected']",privat public protect,private public protected
The access-specifiers that can be used in a C plus plus class definition is private and public.,5.0,1.0,the access-specifiers that can be used in a c plus plus class definition is private and public,"['access-specifiers', 'used', 'c', 'plus', 'plus', 'class', 'definition', 'private', 'public']",access-specifi use c plu plu class definit privat public,access-specifiers used c plus plus class definition private public
public and private.,5.0,1.0,public and private,"['public', 'private']",public privat,public private
"static, long, unsigned",0.5,0.0,static long unsigned,"['static', 'long', 'unsigned']",static long unsign,static long unsigned
"Private, Public, Protected, or Friend.",5.0,1.0,private public protected or friend,"['private', 'public', 'protected', 'friend']",privat public protect friend,private public protected friend
"A C plus plus class definition may include access-specifiers public, private, and static.",4.5,1.0,a c plus plus class definition may include access-specifiers public private and static,"['c', 'plus', 'plus', 'class', 'definition', 'may', 'include', 'access-specifiers', 'public', 'private', 'static']",c plu plu class definit may includ access-specifi public privat static,c plus plus class definition may include access-specifiers public private static
"local, global, local-variable, function specific",2.5,0.0,local global local-variable function specific,"['local', 'global', 'local-variable', 'function', 'specific']",local global local-vari function specif,local global local-variable function specific
"public, private",5.0,1.0,public private,"['public', 'private']",public privat,public private
"Public, protected, and private.",5.0,1.0,public protected and private,"['public', 'protected', 'private']",public protect privat,public protected private
"private, public",5.0,1.0,private public,"['private', 'public']",privat public,private public
public can be accessed by any of the program private can only be accessed by the class functions themselves and no outside functions or calls,5.0,1.0,public can be accessed by any of the program private can only be accessed by the class functions themselves and no outside functions or calls,"['public', 'accessed', 'program', 'private', 'accessed', 'class', 'functions', 'outside', 'functions', 'calls']",public access program privat access class function outsid function call,public accessed program private accessed class function outside function call
"public, private, protected",5.0,1.0,public private protected,"['public', 'private', 'protected']",public privat protect,public private protected
public and private,5.0,1.0,public and private,"['public', 'private']",public privat,public private
"public, private, protected",5.0,1.0,public private protected,"['public', 'private', 'protected']",public privat protect,public private protected
"functions and data members can be given access-specifications of public, private, and friend. public access is given to any functions or members not given specific access rights.",5.0,1.0,functions and data members can be given access-specifications of public private and friend public access is given to any functions or members not given specific access rights,"['functions', 'data', 'members', 'given', 'access-specifications', 'public', 'private', 'friend', 'public', 'access', 'given', 'functions', 'members', 'given', 'specific', 'access', 'rights']",function data member given access-specif public privat friend public access given function member given specif access right,function data member given access-specifications public private friend public access given function member given specific access right
data member or data functions are access specifiers,0.5,0.0,data member or data functions are access specifiers,"['data', 'member', 'data', 'functions', 'access', 'specifiers']",data member data function access specifi,data member data function access specifier
public or private,5.0,1.0,public or private,"['public', 'private']",public privat,public private
public and private,5.0,1.0,public and private,"['public', 'private']",public privat,public private
public and private,5.0,1.0,public and private,"['public', 'private']",public privat,public private
"public can be accessed from outside the class private accessible only from inside the class, not inherited protected accessible only from inside the class, inherited",5.0,1.0,public can be accessed from outside the class private accessible only from inside the class not inherited protected accessible only from inside the class inherited,"['public', 'accessed', 'outside', 'class', 'private', 'accessible', 'inside', 'class', 'inherited', 'protected', 'accessible', 'inside', 'class', 'inherited']",public access outsid class privat access insid class inherit protect access insid class inherit,public accessed outside class private accessible inside class inherited protected accessible inside class inherited
public private protected,5.0,1.0,public private protected,"['public', 'private', 'protected']",public privat protect,public private protected
ie. GradeBook myGradeBook ; call upon the class and then give it a name like shown,1.5,0.0,ie gradebook mygradebook call upon the class and then give it a name like shown,"['ie', 'gradebook', 'mygradebook', 'call', 'upon', 'class', 'give', 'name', 'like', 'shown']",ie gradebook mygradebook call upon class give name like shown,ie gradebook mygradebook call upon class give name like shown
They are initialized as a named instance of the template formed by the class. This named instance can then be modified to be different from the class that it was created from.,3.5,0.0,they are initialized as a named instance of the template formed by the class this named instance can then be modified to be different from the class that it was created from,"['initialized', 'named', 'instance', 'template', 'formed', 'class', 'named', 'instance', 'modified', 'different', 'class', 'created']",initi name instanc templat form class name instanc modifi differ class creat,initialized named instance template formed class named instance modified different class created
not answered,0.0,0.0,not answered,['answered'],answer,answered
Objects are initialized by a value given. When an object is defined for a certain task.,2.5,0.0,objects are initialized by a value given when an object is defined for a certain task,"['objects', 'initialized', 'value', 'given', 'object', 'defined', 'certain', 'task']",object initi valu given object defin certain task,object initialized value given object defined certain task
They are initialized with a . dotbetween the constructor and the object being created.,2.5,0.0,they are initialized with a dotbetween the constructor and the object being created,"['initialized', 'dotbetween', 'constructor', 'object', 'created']",initi dotbetween constructor object creat,initialized dotbetween constructor object created
objectname classname ; to call a function from the class: objectname. funciton ;,1.5,0.0,objectname classname to call a function from the class objectname funciton,"['objectname', 'classname', 'call', 'function', 'class', 'objectname', 'funciton']",objectnam classnam call function class objectnam funciton,objectname classname call function class objectname funciton
"If the object refers to a class, the constructorswill initialize the objects based on return type and parameters passed. Compiler will auto-create one if one is not provided.",5.0,1.0,if the object refers to a class the constructorswill initialize the objects based on return type and parameters passed compiler will auto-create one if one is not provided,"['object', 'refers', 'class', 'constructorswill', 'initialize', 'objects', 'based', 'return', 'type', 'parameters', 'passed', 'compiler', 'auto-create', 'one', 'one', 'provided']",object refer class constructorswil initi object base return type paramet pass compil auto-cr one one provid,object refers class constructorswill initialize object based return type parameter passed compiler auto-create one one provided
classname objectnameinput parameters;,3.0,0.0,classname objectnameinput parameters,"['classname', 'objectnameinput', 'parameters']",classnam objectnameinput paramet,classname objectnameinput parameter
When the class is called by the Constructor,3.5,0.0,when the class is called by the constructor,"['class', 'called', 'constructor']",class call constructor,class called constructor
"Constructors; default when not provided by user, or programmer specified constructors.",5.0,1.0,constructors default when not provided by user or programmer specified constructors,"['constructors', 'default', 'provided', 'user', 'programmer', 'specified', 'constructors']",constructor default provid user programm specifi constructor,constructor default provided user programmer specified constructor
Objects are usually initialized at the beginning of the program and are initialized usually in the main function. They are initialized after the class 's name.,2.5,0.0,objects are usually initialized at the beginning of the program and are initialized usually in the main function they are initialized after the class s name,"['objects', 'usually', 'initialized', 'beginning', 'program', 'initialized', 'usually', 'main', 'function', 'initialized', 'class', 'name']",object usual initi begin program initi usual main function initi class name,object usually initialized beginning program initialized usually main function initialized class name
"; or, if you want to initialize a variable to a certain value, equals;",2.5,0.0,or if you want to initialize a variable to a certain value equals,"['want', 'initialize', 'variable', 'certain', 'value', 'equals']",want initi variabl certain valu equal,want initialize variable certain value equal
"variables are set to a given value, or 0 if none is given.",1.0,0.0,variables are set to a given value or 0 if none is given,"['variables', 'set', 'given', 'value', '0', 'none', 'given']",variabl set given valu 0 none given,variable set given value 0 none given
"When the object is initialized, its constructor is calledwhether one is provided or c plus plus assigns a default constructor.",5.0,1.0,when the object is initialized its constructor is calledwhether one is provided or c plus plus assigns a default constructor,"['object', 'initialized', 'constructor', 'calledwhether', 'one', 'provided', 'c', 'plus', 'plus', 'assigns', 'default', 'constructor']",object initi constructor calledwheth one provid c plu plu assign default constructor,object initialized constructor calledwhether one provided c plus plus assigns default constructor
"Objects are initialized essentially as copies of the corresponding classes, complete with their own separate variables.",2.5,0.0,objects are initialized essentially as copies of the corresponding classes complete with their own separate variables,"['objects', 'initialized', 'essentially', 'copies', 'corresponding', 'classes', 'complete', 'separate', 'variables']",object initi essenti copi correspond class complet separ variabl,object initialized essentially copy corresponding class complete separate variable
"If you had a class Gradebook, you would initialize it in your main function by use of a constructor in the Gradebook class. If no constructor is specified or found, c plus plus will use a default one with no parameters. Gradebook myGradebook; In this bit of code, the class Gradebook has been initialized as object myGradebook.",5.0,1.0,if you had a class gradebook you would initialize it in your main function by use of a constructor in the gradebook class if no constructor is specified or found c plus plus will use a default one with no parameters gradebook mygradebook in this bit of code the class gradebook has been initialized as object mygradebook,"['class', 'gradebook', 'would', 'initialize', 'main', 'function', 'use', 'constructor', 'gradebook', 'class', 'constructor', 'specified', 'found', 'c', 'plus', 'plus', 'use', 'default', 'one', 'parameters', 'gradebook', 'mygradebook', 'bit', 'code', 'class', 'gradebook', 'initialized', 'object', 'mygradebook']",class gradebook would initi main function use constructor gradebook class constructor specifi found c plu plu use default one paramet gradebook mygradebook bit code class gradebook initi object mygradebook,class gradebook would initialize main function use constructor gradebook class constructor specified found c plus plus use default one parameter gradebook mygradebook bit code class gradebook initialized object mygradebook
objects are initialized by stating the classname first then assigning a name to the object. Within the object 's is a place where it can be initialized.,3.5,0.0,objects are initialized by stating the classname first then assigning a name to the object within the object s is a place where it can be initialized,"['objects', 'initialized', 'stating', 'classname', 'first', 'assigning', 'name', 'object', 'within', 'object', 'place', 'initialized']",object initi state classnam first assign name object within object place initi,object initialized stating classname first assigning name object within object place initialized
They are initialized with a constructor.,5.0,1.0,they are initialized with a constructor,"['initialized', 'constructor']",initi constructor,initialized constructor
"The value is specified after declaration, It can initialized anywhere between the declaration and the corresponding.",2.5,0.0,the value is specified after declaration it can initialized anywhere between the declaration and the corresponding,"['value', 'specified', 'declaration', 'initialized', 'anywhere', 'declaration', 'corresponding']",valu specifi declar initi anywher declar correspond,value specified declaration initialized anywhere declaration corresponding
"with the default constructor for that object in its class. if no constructor is specified, it uses the default system constructor.",4.5,1.0,with the default constructor for that object in its class if no constructor is specified it uses the default system constructor,"['default', 'constructor', 'object', 'class', 'constructor', 'specified', 'uses', 'default', 'system', 'constructor']",default constructor object class constructor specifi use default system constructor,default constructor object class constructor specified us default system constructor
initialized using the same name as the class,2.5,0.0,initialized using the same name as the class,"['initialized', 'using', 'name', 'class']",initi use name class,initialized using name class
they are initialized to a value dependent on the compiler,1.0,0.0,they are initialized to a value dependent on the compiler,"['initialized', 'value', 'dependent', 'compiler']",initi valu depend compil,initialized value dependent compiler
memory is allocated in accordance with their type and initialization input.,2.0,0.0,memory is allocated in accordance with their type and initialization input,"['memory', 'allocated', 'accordance', 'type', 'initialization', 'input']",memori alloc accord type initi input,memory allocated accordance type initialization input
Objects are assigned a space in memory when they are created. the name given to the object points to the memory address where the objects data resides.,1.0,0.0,objects are assigned a space in memory when they are created the name given to the object points to the memory address where the objects data resides,"['objects', 'assigned', 'space', 'memory', 'created', 'name', 'given', 'object', 'points', 'memory', 'address', 'objects', 'data', 'resides']",object assign space memori creat name given object point memori address object data resid,object assigned space memory created name given object point memory address object data resides
using constructor,5.0,1.0,using constructor,"['using', 'constructor']",use constructor,using constructor
by giving them a value,1.5,0.0,by giving them a value,"['giving', 'value']",give valu,giving value
"By declaring the class first, the name of the variable, and then any variables that need to be put in the constructor. Ex. Class myClassx, y",5.0,1.0,by declaring the class first the name of the variable and then any variables that need to be put in the constructor ex class myclassx y,"['declaring', 'class', 'first', 'name', 'variable', 'variables', 'need', 'put', 'constructor', 'ex', 'class', 'myclassx']",declar class first name variabl variabl need put constructor ex class myclassx,declaring class first name variable variable need put constructor ex class myclassx
"objects are initialized by giving the object a type, name, and initial value",2.5,0.0,objects are initialized by giving the object a type name and initial value,"['objects', 'initialized', 'giving', 'object', 'type', 'name', 'initial', 'value']",object initi give object type name initi valu,object initialized giving object type name initial value
they are initialized to 0,1.0,0.0,they are initialized to 0,"['initialized', '0']",initi 0,initialized 0
"obj. are initialized by the variables that call them, when they are created within a class. e. i. classname objectname etc.",2.5,0.0,obj are initialized by the variables that call them when they are created within a class e i classname objectname etc,"['obj', 'initialized', 'variables', 'call', 'created', 'within', 'class', 'e', 'classname', 'objectname', 'etc']",obj initi variabl call creat within class e classnam objectnam etc,obj initialized variable call created within class e classname objectname etc
"Name of the function, parameters it must receive in order to perform and a return type.",5.0,1.0,name of the function parameters it must receive in order to perform and a return type,"['name', 'function', 'parameters', 'must', 'receive', 'order', 'perform', 'return', 'type']",name function paramet must receiv order perform return type,name function parameter must receive order perform return type
a function signature is the elements that make it unique such as the variables it calls for and also I suppose this includes the program it is in.,4.0,1.0,a function signature is the elements that make it unique such as the variables it calls for and also i suppose this includes the program it is in,"['function', 'signature', 'elements', 'make', 'unique', 'variables', 'calls', 'also', 'suppose', 'includes', 'program']",function signatur element make uniqu variabl call also suppos includ program,function signature element make unique variable call also suppose includes program
"A function signature is the return type of a function, its name, and the number and type of its parameters.",5.0,1.0,a function signature is the return type of a function its name and the number and type of its parameters,"['function', 'signature', 'return', 'type', 'function', 'name', 'number', 'type', 'parameters']",function signatur return type function name number type paramet,function signature return type function name number type parameter
function prototype that contains functions and data members.,3.0,0.0,function prototype that contains functions and data members,"['function', 'prototype', 'contains', 'functions', 'data', 'members']",function prototyp contain function data member,function prototype contains function data member
A function signature is a declaration of the function that includes the parameter types and the number of parameters.,5.0,1.0,a function signature is a declaration of the function that includes the parameter types and the number of parameters,"['function', 'signature', 'declaration', 'function', 'includes', 'parameter', 'types', 'number', 'parameters']",function signatur declar function includ paramet type number paramet,function signature declaration function includes parameter type number parameter
the declaration of the function.,2.5,0.0,the declaration of the function,"['declaration', 'function']",declar function,declaration function
"Includes the name, accepted parameters, and return type.",5.0,1.0,includes the name accepted parameters and return type,"['includes', 'name', 'accepted', 'parameters', 'return', 'type']",includ name accept paramet return type,includes name accepted parameter return type
its return type and its input parameters,5.0,1.0,its return type and its input parameters,"['return', 'type', 'input', 'parameters']",return type input paramet,return type input parameter
Contains the function name and its paramaters. The return type is not included,5.0,1.0,contains the function name and its paramaters the return type is not included,"['contains', 'function', 'name', 'paramaters', 'return', 'type', 'included']",contain function name paramat return type includ,contains function name paramaters return type included
"Return type, function name, and the parameter types",5.0,1.0,return type function name and the parameter types,"['return', 'type', 'function', 'name', 'parameter', 'types']",return type function name paramet type,return type function name parameter type
The function signature tells what the function parameters and includes all the function calls,4.0,1.0,the function signature tells what the function parameters and includes all the function calls,"['function', 'signature', 'tells', 'function', 'parameters', 'includes', 'function', 'calls']",function signatur tell function paramet includ function call,function signature tell function parameter includes function call
"The function 's name, as well as what it returns and what it accepts.",5.0,1.0,the function s name as well as what it returns and what it accepts,"['function', 'name', 'well', 'returns', 'accepts']",function name well return accept,function name well return accepts
the body of the function that holds all the actual code,2.0,0.0,the body of the function that holds all the actual code,"['body', 'function', 'holds', 'actual', 'code']",bodi function hold actual code,body function hold actual code
A function signature is the return type and accepted pass value type it takes,3.5,0.0,a function signature is the return type and accepted pass value type it takes,"['function', 'signature', 'return', 'type', 'accepted', 'pass', 'value', 'type', 'takes']",function signatur return type accept pass valu type take,function signature return type accepted pas value type take
A function signature specifies the name and input variables of a function.,5.0,1.0,a function signature specifies the name and input variables of a function,"['function', 'signature', 'specifies', 'name', 'input', 'variables', 'function']",function signatur specifi name input variabl function,function signature specifies name input variable function
A function signature is the function 's parameters and their type and the name of the function. The return type is not a part of the function signature.,5.0,1.0,a function signature is the function s parameters and their type and the name of the function the return type is not a part of the function signature,"['function', 'signature', 'function', 'parameters', 'type', 'name', 'function', 'return', 'type', 'part', 'function', 'signature']",function signatur function paramet type name function return type part function signatur,function signature function parameter type name function return type part function signature
the name of the function and what it accepts or returns,5.0,1.0,the name of the function and what it accepts or returns,"['name', 'function', 'accepts', 'returns']",name function accept return,name function accepts return
"the unique identifier of a function, which includes input variables along with the function name, but excludes the output type.",4.5,1.0,the unique identifier of a function which includes input variables along with the function name but excludes the output type,"['unique', 'identifier', 'function', 'includes', 'input', 'variables', 'along', 'function', 'name', 'excludes', 'output', 'type']",uniqu identifi function includ input variabl along function name exclud output type,unique identifier function includes input variable along function name excludes output type
"The order, number, and type of data items included inside the function parameters.",5.0,1.0,the order number and type of data items included inside the function parameters,"['order', 'number', 'type', 'data', 'items', 'included', 'inside', 'function', 'parameters']",order number type data item includ insid function paramet,order number type data item included inside function parameter
"its the scope, type, and parameters of that function that give it it is properties and defines it against other functions.",5.0,1.0,its the scope type and parameters of that function that give it it is properties and defines it against other functions,"['scope', 'type', 'parameters', 'function', 'give', 'properties', 'defines', 'functions']",scope type paramet function give properti defin function,scope type parameter function give property defines function
"is the name of the fuction, return type, and parameters that are being used",5.0,1.0,is the name of the fuction return type and parameters that are being used,"['name', 'fuction', 'return', 'type', 'parameters', 'used']",name fuction return type paramet use,name fuction return type parameter used
"a function signature should include the name of the function, parameters, and a body.",4.0,1.0,a function signature should include the name of the function parameters and a body,"['function', 'signature', 'include', 'name', 'function', 'parameters', 'body']",function signatur includ name function paramet bodi,function signature include name function parameter body
the name of the function and the arguments passed to that function,5.0,1.0,the name of the function and the arguments passed to that function,"['name', 'function', 'arguments', 'passed', 'function']",name function argument pass function,name function argument passed function
"A function signature, used in a function 's prototype, is the set of object types it take in as parameters, with or without names given for the objects.",5.0,1.0,a function signature used in a function s prototype is the set of object types it take in as parameters with or without names given for the objects,"['function', 'signature', 'used', 'function', 'prototype', 'set', 'object', 'types', 'take', 'parameters', 'without', 'names', 'given', 'objects']",function signatur use function prototyp set object type take paramet without name given object,function signature used function prototype set object type take parameter without name given object
function name and parameter are called function signature.,5.0,1.0,function name and parameter are called function signature,"['function', 'name', 'parameter', 'called', 'function', 'signature']",function name paramet call function signatur,function name parameter called function signature
fuction name and parameters,5.0,1.0,fuction name and parameters,"['fuction', 'name', 'parameters']",fuction name paramet,fuction name parameter
"The parameters needed, the return type, and name of the function.",5.0,1.0,the parameters needed the return type and name of the function,"['parameters', 'needed', 'return', 'type', 'name', 'function']",paramet need return type name function,parameter needed return type name function
"the signature of a function includes the name of the function, the number and types of parameters, and the return type",5.0,1.0,the signature of a function includes the name of the function the number and types of parameters and the return type,"['signature', 'function', 'includes', 'name', 'function', 'number', 'types', 'parameters', 'return', 'type']",signatur function includ name function number type paramet return type,signature function includes name function number type parameter return type
"It is what uniquely separates overloaded functions. It includes the return type, and the parameter list of the function.",5.0,1.0,it is what uniquely separates overloaded functions it includes the return type and the parameter list of the function,"['uniquely', 'separates', 'overloaded', 'functions', 'includes', 'return', 'type', 'parameter', 'list', 'function']",uniqu separ overload function includ return type paramet list function,uniquely separate overloaded function includes return type parameter list function
"function sig is, is what is the class recognizes as the main function, or rather its specification",2.0,0.0,function sig is is what is the class recognizes as the main function or rather its specification,"['function', 'sig', 'class', 'recognizes', 'main', 'function', 'rather', 'specification']",function sig class recogn main function rather specif,function sig class recognizes main function rather specification
A function that calls upon it self to solve a problem. Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem.,5.0,1.0,a function that calls upon it self to solve a problem each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,"['function', 'calls', 'upon', 'self', 'solve', 'problem', 'time', 'calls', 'upon', 'self', 'splits', 'problem', 'simplier', 'form', 'reaches', 'base', 'case', 'simplest', 'form', 'problem']",function call upon self solv problem time call upon self split problem simplier form reach base case simplest form problem,function call upon self solve problem time call upon self split problem simplier form reach base case simplest form problem
A function that calls itself to perform an opperation such as a factorial recursive function.,5.0,1.0,a function that calls itself to perform an opperation such as a factorial recursive function,"['function', 'calls', 'perform', 'opperation', 'factorial', 'recursive', 'function']",function call perform opper factori recurs function,function call perform opperation factorial recursive function
not answered,0.0,0.0,not answered,['answered'],answer,answered
A base case that calls upon itself until the problem becomes smaller and terminates.,4.0,1.0,a base case that calls upon itself until the problem becomes smaller and terminates,"['base', 'case', 'calls', 'upon', 'problem', 'becomes', 'smaller', 'terminates']",base case call upon problem becom smaller termin,base case call upon problem becomes smaller terminates
It is a function that calls itself. It runs multiple times until the base case is reached.,5.0,1.0,it is a function that calls itself it runs multiple times until the base case is reached,"['function', 'calls', 'runs', 'multiple', 'times', 'base', 'case', 'reached']",function call run multipl time base case reach,function call run multiple time base case reached
a function that calls itself untill it reaches a base case.,5.0,1.0,a function that calls itself untill it reaches a base case,"['function', 'calls', 'untill', 'reaches', 'base', 'case']",function call until reach base case,function call untill reach base case
"A function that calls itself. Each time it does, it must get smaller, and eventually MUST converge to a base case, otherwise you can start an infinite loop.",5.0,1.0,a function that calls itself each time it does it must get smaller and eventually must converge to a base case otherwise you can start an infinite loop,"['function', 'calls', 'time', 'must', 'get', 'smaller', 'eventually', 'must', 'converge', 'base', 'case', 'otherwise', 'start', 'infinite', 'loop']",function call time must get smaller eventu must converg base case otherwis start infinit loop,function call time must get smaller eventually must converge base case otherwise start infinite loop
a function that calls itself until a base case is met,5.0,1.0,a function that calls itself until a base case is met,"['function', 'calls', 'base', 'case', 'met']",function call base case met,function call base case met
A function that calls itself. With each function call the problem is diminished.,5.0,1.0,a function that calls itself with each function call the problem is diminished,"['function', 'calls', 'function', 'call', 'problem', 'diminished']",function call function call problem diminish,function call function call problem diminished
A function that calls itself to perform a certain task,5.0,1.0,a function that calls itself to perform a certain task,"['function', 'calls', 'perform', 'certain', 'task']",function call perform certain task,function call perform certain task
A recursive function is a function that calls itself. Usually called the base case. If the base case is not correct it causes a infinite loop.,5.0,1.0,a recursive function is a function that calls itself usually called the base case if the base case is not correct it causes a infinite loop,"['recursive', 'function', 'function', 'calls', 'usually', 'called', 'base', 'case', 'base', 'case', 'correct', 'causes', 'infinite', 'loop']",recurs function function call usual call base case base case correct caus infinit loop,recursive function function call usually called base case base case correct cause infinite loop
"A function that calls itself, in order to solve a problem.",5.0,1.0,a function that calls itself in order to solve a problem,"['function', 'calls', 'order', 'solve', 'problem']",function call order solv problem,function call order solve problem
"a function that calls itself over and over until it finds the simplest form of solution, or the base case.",5.0,1.0,a function that calls itself over and over until it finds the simplest form of solution or the base case,"['function', 'calls', 'finds', 'simplest', 'form', 'solution', 'base', 'case']",function call find simplest form solut base case,function call find simplest form solution base case
"A recursive function is a function that calls itself repeatedly until a base case is achieved. The fundamental idea is to break one large problem into a series of smaller, similar problems.",5.0,1.0,a recursive function is a function that calls itself repeatedly until a base case is achieved the fundamental idea is to break one large problem into a series of smaller similar problems,"['recursive', 'function', 'function', 'calls', 'repeatedly', 'base', 'case', 'achieved', 'fundamental', 'idea', 'break', 'one', 'large', 'problem', 'series', 'smaller', 'similar', 'problems']",recurs function function call repeatedli base case achiev fundament idea break one larg problem seri smaller similar problem,recursive function function call repeatedly base case achieved fundamental idea break one large problem series smaller similar problem
"A recursive function typically simplifies a problem by calling itself, until arriving at a base case, at which it recursively returns a solution.",5.0,1.0,a recursive function typically simplifies a problem by calling itself until arriving at a base case at which it recursively returns a solution,"['recursive', 'function', 'typically', 'simplifies', 'problem', 'calling', 'arriving', 'base', 'case', 'recursively', 'returns', 'solution']",recurs function typic simplifi problem call arriv base case recurs return solut,recursive function typically simplifies problem calling arriving base case recursively return solution
"A recursive function is a function that breaks down a large problem into two or more smaller problems and calls itself to solve those smaller problems until a base case or terminating point is reached. At the base case, a definite answer is called and the function no longer recurses, but unwinds itself back through function calls to determine the answer to the original large problem.",4.5,1.0,a recursive function is a function that breaks down a large problem into two or more smaller problems and calls itself to solve those smaller problems until a base case or terminating point is reached at the base case a definite answer is called and the function no longer recurses but unwinds itself back through function calls to determine the answer to the original large problem,"['recursive', 'function', 'function', 'breaks', 'large', 'problem', 'two', 'smaller', 'problems', 'calls', 'solve', 'smaller', 'problems', 'base', 'case', 'terminating', 'point', 'reached', 'base', 'case', 'definite', 'answer', 'called', 'function', 'longer', 'recurses', 'unwinds', 'back', 'function', 'calls', 'determine', 'answer', 'original', 'large', 'problem']",recurs function function break larg problem two smaller problem call solv smaller problem base case termin point reach base case definit answer call function longer recurs unwind back function call determin answer origin larg problem,recursive function function break large problem two smaller problem call solve smaller problem base case terminating point reached base case definite answer called function longer recurses unwinds back function call determine answer original large problem
a function that calls itself into a loop with a base case for a loop exit.,4.0,1.0,a function that calls itself into a loop with a base case for a loop exit,"['function', 'calls', 'loop', 'base', 'case', 'loop', 'exit']",function call loop base case loop exit,function call loop base case loop exit
a function that calls itself until the base cases are met.,5.0,1.0,a function that calls itself until the base cases are met,"['function', 'calls', 'base', 'cases', 'met']",function call base case met,function call base case met
A recursive function only knows how to solve base cases A recursive function calls itself directly or indirectly until a base case is reached.,5.0,1.0,a recursive function only knows how to solve base cases a recursive function calls itself directly or indirectly until a base case is reached,"['recursive', 'function', 'knows', 'solve', 'base', 'cases', 'recursive', 'function', 'calls', 'directly', 'indirectly', 'base', 'case', 'reached']",recurs function know solv base case recurs function call directli indirectli base case reach,recursive function know solve base case recursive function call directly indirectly base case reached
a function that calls on itself and uses a base case to stop the recursion,5.0,1.0,a function that calls on itself and uses a base case to stop the recursion,"['function', 'calls', 'uses', 'base', 'case', 'stop', 'recursion']",function call use base case stop recurs,function call us base case stop recursion
"a function that calls itself, and which eaach calls get closer and close to the base case.",5.0,1.0,a function that calls itself and which eaach calls get closer and close to the base case,"['function', 'calls', 'eaach', 'calls', 'get', 'closer', 'close', 'base', 'case']",function call eaach call get closer close base case,function call eaach call get closer close base case
A function that divides and conquers a problem. There is a base case that will eventually be reached. The function calls itself over and over until the base case is satisfied.,5.0,1.0,a function that divides and conquers a problem there is a base case that will eventually be reached the function calls itself over and over until the base case is satisfied,"['function', 'divides', 'conquers', 'problem', 'base', 'case', 'eventually', 'reached', 'function', 'calls', 'base', 'case', 'satisfied']",function divid conquer problem base case eventu reach function call base case satisfi,function divide conquers problem base case eventually reached function call base case satisfied
a function that calls itself in the definition code,5.0,1.0,a function that calls itself in the definition code,"['function', 'calls', 'definition', 'code']",function call definit code,function call definition code
A recursive function solves a problem by repeatedly calling itself. the initial problem is broken into successively smaller parts until a much simpler base case is reached. the solutions to each piece of the problem are then returned a step at a time.,5.0,1.0,a recursive function solves a problem by repeatedly calling itself the initial problem is broken into successively smaller parts until a much simpler base case is reached the solutions to each piece of the problem are then returned a step at a time,"['recursive', 'function', 'solves', 'problem', 'repeatedly', 'calling', 'initial', 'problem', 'broken', 'successively', 'smaller', 'parts', 'much', 'simpler', 'base', 'case', 'reached', 'solutions', 'piece', 'problem', 'returned', 'step', 'time']",recurs function solv problem repeatedli call initi problem broken success smaller part much simpler base case reach solut piec problem return step time,recursive function solves problem repeatedly calling initial problem broken successively smaller part much simpler base case reached solution piece problem returned step time
"It invoke by itself again ana again, unless it reach bas case",4.5,1.0,it invoke by itself again ana again unless it reach bas case,"['invoke', 'ana', 'unless', 'reach', 'bas', 'case']",invok ana unless reach ba case,invoke ana unless reach ba case
"a function that solves a problem by dividing the problem into smaller problems, by calling its self again and again, until a base case is reached.",5.0,1.0,a function that solves a problem by dividing the problem into smaller problems by calling its self again and again until a base case is reached,"['function', 'solves', 'problem', 'dividing', 'problem', 'smaller', 'problems', 'calling', 'self', 'base', 'case', 'reached']",function solv problem divid problem smaller problem call self base case reach,function solves problem dividing problem smaller problem calling self base case reached
"A function that calls itself over and over again till a base case is reached, then it returns back to the original function.",5.0,1.0,a function that calls itself over and over again till a base case is reached then it returns back to the original function,"['function', 'calls', 'till', 'base', 'case', 'reached', 'returns', 'back', 'original', 'function']",function call till base case reach return back origin function,function call till base case reached return back original function
"a recursive function is a function that during execution, calls itself over and over until a base case is reached",5.0,1.0,a recursive function is a function that during execution calls itself over and over until a base case is reached,"['recursive', 'function', 'function', 'execution', 'calls', 'base', 'case', 'reached']",recurs function function execut call base case reach,recursive function function execution call base case reached
A function that calls itself. Usually used to split a problem into several smaller problems of the same type.,5.0,1.0,a function that calls itself usually used to split a problem into several smaller problems of the same type,"['function', 'calls', 'usually', 'used', 'split', 'problem', 'several', 'smaller', 'problems', 'type']",function call usual use split problem sever smaller problem type,function call usually used split problem several smaller problem type
function that calls it self till the base case is met,5.0,1.0,function that calls it self till the base case is met,"['function', 'calls', 'self', 'till', 'base', 'case', 'met']",function call self till base case met,function call self till base case met
"Iteration, performers a series of checks and loops.",5.0,1.0,iteration performers a series of checks and loops,"['iteration', 'performers', 'series', 'checks', 'loops']",iter perform seri check loop,iteration performer series check loop
The alternative method is to use loops in the program instead of a function which calls itself.,4.0,1.0,the alternative method is to use loops in the program instead of a function which calls itself,"['alternative', 'method', 'use', 'loops', 'program', 'instead', 'function', 'calls']",altern method use loop program instead function call,alternative method use loop program instead function call
An alternative to solving a problem using recursive functions is to solve the problem using iteration.,5.0,1.0,an alternative to solving a problem using recursive functions is to solve the problem using iteration,"['alternative', 'solving', 'problem', 'using', 'recursive', 'functions', 'solve', 'problem', 'using', 'iteration']",altern solv problem use recurs function solv problem use iter,alternative solving problem using recursive function solve problem using iteration
"Iteration, this would be more efficient and has repetition structure.",5.0,1.0,iteration this would be more efficient and has repetition structure,"['iteration', 'would', 'efficient', 'repetition', 'structure']",iter would effici repetit structur,iteration would efficient repetition structure
One can use iteration or by using a simple while or for loop.,5.0,1.0,one can use iteration or by using a simple while or for loop,"['one', 'use', 'iteration', 'using', 'simple', 'loop']",one use iter use simpl loop,one use iteration using simple loop
iteration,5.0,1.0,iteration,['iteration'],iter,iteration
"Iteration. A while loop or a for loop will be able to accomplish the same desired outcome ... It may be faster than recursion, but could also be harder to understand.",5.0,1.0,iteration a while loop or a for loop will be able to accomplish the same desired outcome it may be faster than recursion but could also be harder to understand,"['iteration', 'loop', 'loop', 'able', 'accomplish', 'desired', 'outcome', 'may', 'faster', 'recursion', 'could', 'also', 'harder', 'understand']",iter loop loop abl accomplish desir outcom may faster recurs could also harder understand,iteration loop loop able accomplish desired outcome may faster recursion could also harder understand
you can also solve the problem iteratively,5.0,1.0,you can also solve the problem iteratively,"['also', 'solve', 'problem', 'iteratively']",also solv problem iter,also solve problem iteratively
iterative,5.0,1.0,iterative,['iterative'],iter,iterative
Using iteration loops.,5.0,1.0,using iteration loops,"['using', 'iteration', 'loops']",use iter loop,using iteration loop
Another alternative way to solve a problem instead of using recursive functions is by using iteration.,5.0,1.0,another alternative way to solve a problem instead of using recursive functions is by using iteration,"['another', 'alternative', 'way', 'solve', 'problem', 'instead', 'using', 'recursive', 'functions', 'using', 'iteration']",anoth altern way solv problem instead use recurs function use iter,another alternative way solve problem instead using recursive function using iteration
"A recursive function can often be solved using an iterative function, which runs faster, but is often more complicated.",5.0,1.0,a recursive function can often be solved using an iterative function which runs faster but is often more complicated,"['recursive', 'function', 'often', 'solved', 'using', 'iterative', 'function', 'runs', 'faster', 'often', 'complicated']",recurs function often solv use iter function run faster often complic,recursive function often solved using iterative function run faster often complicated
iteration,5.0,1.0,iteration,['iteration'],iter,iteration
Any recursive function can be solved using an iterative method.,5.0,1.0,any recursive function can be solved using an iterative method,"['recursive', 'function', 'solved', 'using', 'iterative', 'method']",recurs function solv use iter method,recursive function solved using iterative method
"Many recursive solutions may also be solved with looping control statements, such as while, for, do-while, etc.",4.0,1.0,many recursive solutions may also be solved with looping control statements such as while for do-while etc,"['many', 'recursive', 'solutions', 'may', 'also', 'solved', 'looping', 'control', 'statements', 'do-while', 'etc']",mani recurs solut may also solv loop control statement do-whil etc,many recursive solution may also solved looping control statement do-while etc
"Using an iterative function, which repeats a specified operation or set of operations until a terminating point or base case is reached.",5.0,1.0,using an iterative function which repeats a specified operation or set of operations until a terminating point or base case is reached,"['using', 'iterative', 'function', 'repeats', 'specified', 'operation', 'set', 'operations', 'terminating', 'point', 'base', 'case', 'reached']",use iter function repeat specifi oper set oper termin point base case reach,using iterative function repeat specified operation set operation terminating point base case reached
iteratively,5.0,1.0,iteratively,['iteratively'],iter,iteratively
using an Iterative calls,5.0,1.0,using an iterative calls,"['using', 'iterative', 'calls']",use iter call,using iterative call
Iteration.,5.0,1.0,iteration,['iteration'],iter,iteration
iteration is the alternative way to solve a problem,5.0,1.0,iteration is the alternative way to solve a problem,"['iteration', 'alternative', 'way', 'solve', 'problem']",iter altern way solv problem,iteration alternative way solve problem
using an iterative solution instead,5.0,1.0,using an iterative solution instead,"['using', 'iterative', 'solution', 'instead']",use iter solut instead,using iterative solution instead
"Using an iterative solution. For, while, or do while loop.",5.0,1.0,using an iterative solution for while or do while loop,"['using', 'iterative', 'solution', 'loop']",use iter solut loop,using iterative solution loop
the alternative way to solve a problem that could be solved using recursion is iteration.,5.0,1.0,the alternative way to solve a problem that could be solved using recursion is iteration,"['alternative', 'way', 'solve', 'problem', 'could', 'solved', 'using', 'recursion', 'iteration']",altern way solv problem could solv use recurs iter,alternative way solve problem could solved using recursion iteration
"Any problem solved recursively could be solved with an iterative function. Iterative replacements for recursive functions may be more difficult to program, but often lead to more efficient solutions to a problem.",5.0,1.0,any problem solved recursively could be solved with an iterative function iterative replacements for recursive functions may be more difficult to program but often lead to more efficient solutions to a problem,"['problem', 'solved', 'recursively', 'could', 'solved', 'iterative', 'function', 'iterative', 'replacements', 'recursive', 'functions', 'may', 'difficult', 'program', 'often', 'lead', 'efficient', 'solutions', 'problem']",problem solv recurs could solv iter function iter replac recurs function may difficult program often lead effici solut problem,problem solved recursively could solved iterative function iterative replacement recursive function may difficult program often lead efficient solution problem
by iteration,5.0,1.0,by iteration,['iteration'],iter,iteration
"itteration, like a for loop, a while loop, or a do while loop",5.0,1.0,itteration like a for loop a while loop or a do while loop,"['itteration', 'like', 'loop', 'loop', 'loop']",itter like loop loop loop,itteration like loop loop loop
Iteration by using loops,5.0,1.0,iteration by using loops,"['iteration', 'using', 'loops']",iter use loop,iteration using loop
iterative functions,5.0,1.0,iterative functions,"['iterative', 'functions']",iter function,iterative function
iteration,5.0,1.0,iteration,['iteration'],iter,iteration
"the alt, way is to use a functions parameter in a call to function.",3.0,0.0,the alt way is to use a functions parameter in a call to function,"['alt', 'way', 'use', 'functions', 'parameter', 'call', 'function']",alt way use function paramet call function,alt way use function parameter call function
The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again. An array that is not declared static will keep its original elements.,5.0,1.0,the array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again an array that is not declared static will keep its original elements,"['array', 'declared', 'static', 'retains', 'modified', 'elements', 'called', 'upon', 'latest', 'elements', 'modified', 'array', 'declared', 'static', 'keep', 'original', 'elements']",array declar static retain modifi element call upon latest element modifi array declar static keep origin element,array declared static retains modified element called upon latest element modified array declared static keep original element
A static array only has a specific size and it cannot grow. Also static arrays cannot be accessed outside the program which created it.,3.0,0.0,a static array only has a specific size and it cannot grow also static arrays cannot be accessed outside the program which created it,"['static', 'array', 'specific', 'size', 'grow', 'also', 'static', 'arrays', 'accessed', 'outside', 'program', 'created']",static array specif size grow also static array access outsid program creat,static array specific size grow also static array accessed outside program created
Arrays declared as static are not created and initialized when a function is called and destroyed when the function terminates.,5.0,1.0,arrays declared as static are not created and initialized when a function is called and destroyed when the function terminates,"['arrays', 'declared', 'static', 'created', 'initialized', 'function', 'called', 'destroyed', 'function', 'terminates']",array declar static creat initi function call destroy function termin,array declared static created initialized function called destroyed function terminates
Static can be initialized and non-static cannot in C plus plus.,2.5,0.0,static can be initialized and non-static cannot in c plus plus,"['static', 'initialized', 'non-static', 'c', 'plus', 'plus']",static initi non-stat c plu plu,static initialized non-static c plus plus
An array declared static remains the same throughout the execution of the program.,2.5,0.0,an array declared static remains the same throughout the execution of the program,"['array', 'declared', 'static', 'remains', 'throughout', 'execution', 'program']",array declar static remain throughout execut program,array declared static remains throughout execution program
a static array will be called only once. once it has been declared the complier will ignore the static line if it comes to it again.,4.5,1.0,a static array will be called only once once it has been declared the complier will ignore the static line if it comes to it again,"['static', 'array', 'called', 'declared', 'complier', 'ignore', 'static', 'line', 'comes']",static array call declar complier ignor static line come,static array called declared complier ignore static line come
"The static array will be available to the whole of the program, whereas an array that is not static is only available within the scope in which it is declared. or or pass-by-reference???",4.0,1.0,the static array will be available to the whole of the program whereas an array that is not static is only available within the scope in which it is declared or or pass-by-reference,"['static', 'array', 'available', 'whole', 'program', 'whereas', 'array', 'static', 'available', 'within', 'scope', 'declared', 'pass-by-reference']",static array avail whole program wherea array static avail within scope declar pass-by-refer,static array available whole program whereas array static available within scope declared pass-by-reference
a static array has a predetermined size and that size cannot be altered,3.0,0.0,a static array has a predetermined size and that size cannot be altered,"['static', 'array', 'predetermined', 'size', 'size', 'altered']",static array predetermin size size alter,static array predetermined size size altered
Arrays declared static can not be changed. One not declared static can be altered.,2.5,0.0,arrays declared static can not be changed one not declared static can be altered,"['arrays', 'declared', 'static', 'changed', 'one', 'declared', 'static', 'altered']",array declar static chang one declar static alter,array declared static changed one declared static altered
"an array that is declared as static will retain the values stored in it is elements between function calls, and will not reinitialize them to default values.",4.5,1.0,an array that is declared as static will retain the values stored in it is elements between function calls and will not reinitialize them to default values,"['array', 'declared', 'static', 'retain', 'values', 'stored', 'elements', 'function', 'calls', 'reinitialize', 'default', 'values']",array declar static retain valu store element function call reiniti default valu,array declared static retain value stored element function call reinitialize default value
An array that is declared static causes anything that is not initialized to be set to 0.,2.5,0.0,an array that is declared static causes anything that is not initialized to be set to 0,"['array', 'declared', 'static', 'causes', 'anything', 'initialized', 'set', '0']",array declar static caus anyth initi set 0,array declared static cause anything initialized set 0
A static array will have a null character at the end of the array.,3.0,0.0,a static array will have a null character at the end of the array,"['static', 'array', 'null', 'character', 'end', 'array']",static array null charact end array,static array null character end array
static arrays cannot be changed while normal arrays can be changed,2.5,0.0,static arrays cannot be changed while normal arrays can be changed,"['static', 'arrays', 'changed', 'normal', 'arrays', 'changed']",static array chang normal array chang,static array changed normal array changed
An array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class.,3.0,0.0,an array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class,"['array', 'declared', 'static', 'accessed', 'outside', 'method', 'declared', 'without', 'passing', 'argument', 'functions', 'class']",array declar static access outsid method declar without pass argument function class,array declared static accessed outside method declared without passing argument function class
"A static array has class scope, allowing it to remain where other arrays might be recycled.",4.0,1.0,a static array has class scope allowing it to remain where other arrays might be recycled,"['static', 'array', 'class', 'scope', 'allowing', 'remain', 'arrays', 'might', 'recycled']",static array class scope allow remain array might recycl,static array class scope allowing remain array might recycled
An array that is static does not change or uninitialize if called later unless explicitly acted upon. It does not terminate or change across objects. An automatic local array will be cleared and uninitialized if called later outside of it is specific scope.,5.0,1.0,an array that is static does not change or uninitialize if called later unless explicitly acted upon it does not terminate or change across objects an automatic local array will be cleared and uninitialized if called later outside of it is specific scope,"['array', 'static', 'change', 'uninitialize', 'called', 'later', 'unless', 'explicitly', 'acted', 'upon', 'terminate', 'change', 'across', 'objects', 'automatic', 'local', 'array', 'cleared', 'uninitialized', 'called', 'later', 'outside', 'specific', 'scope']",array static chang uniniti call later unless explicitli act upon termin chang across object automat local array clear uniniti call later outsid specif scope,array static change uninitialize called later unless explicitly acted upon terminate change across object automatic local array cleared uninitialized called later outside specific scope
"one declared as static is one that is already defined. The program knows the length and the array from the start, whereas non-static arrays are declared or assigned later.",3.0,0.0,one declared as static is one that is already defined the program knows the length and the array from the start whereas non-static arrays are declared or assigned later,"['one', 'declared', 'static', 'one', 'already', 'defined', 'program', 'knows', 'length', 'array', 'start', 'whereas', 'non-static', 'arrays', 'declared', 'assigned', 'later']",one declar static one alreadi defin program know length array start wherea non-stat array declar assign later,one declared static one already defined program know length array start whereas non-static array declared assigned later
"a non static array must reinitialize itself every function call, while a static array will only initialize itself once, unless otherwise forced.",5.0,1.0,a non static array must reinitialize itself every function call while a static array will only initialize itself once unless otherwise forced,"['non', 'static', 'array', 'must', 'reinitialize', 'every', 'function', 'call', 'static', 'array', 'initialize', 'unless', 'otherwise', 'forced']",non static array must reiniti everi function call static array initi unless otherwis forc,non static array must reinitialize every function call static array initialize unless otherwise forced
A static array retains any modified values after a function call. Automatic arrays reset to their initial values when the function ends.,4.5,1.0,a static array retains any modified values after a function call automatic arrays reset to their initial values when the function ends,"['static', 'array', 'retains', 'modified', 'values', 'function', 'call', 'automatic', 'arrays', 'reset', 'initial', 'values', 'function', 'ends']",static array retain modifi valu function call automat array reset initi valu function end,static array retains modified value function call automatic array reset initial value function end
"a static array is one that keeps its values and is not initialized every time a class function is called, it is data is not lost at function end.",4.5,1.0,a static array is one that keeps its values and is not initialized every time a class function is called it is data is not lost at function end,"['static', 'array', 'one', 'keeps', 'values', 'initialized', 'every', 'time', 'class', 'function', 'called', 'data', 'lost', 'function', 'end']",static array one keep valu initi everi time class function call data lost function end,static array one keep value initialized every time class function called data lost function end
an array that is declared as static can only be used in the function that its being called in. Its a constant array. Static is another way of say const.,2.5,0.0,an array that is declared as static can only be used in the function that its being called in its a constant array static is another way of say const,"['array', 'declared', 'static', 'used', 'function', 'called', 'constant', 'array', 'static', 'another', 'way', 'say', 'const']",array declar static use function call constant array static anoth way say const,array declared static used function called constant array static another way say const
Values in an array that is not delcared as static will remain constant. When an array is declared const values within the array can be manipulated.,2.5,0.0,values in an array that is not delcared as static will remain constant when an array is declared const values within the array can be manipulated,"['values', 'array', 'delcared', 'static', 'remain', 'constant', 'array', 'declared', 'const', 'values', 'within', 'array', 'manipulated']",valu array delcar static remain constant array declar const valu within array manipul,value array delcared static remain constant array declared const value within array manipulated
the data of a static array cannot be changed,2.5,0.0,the data of a static array cannot be changed,"['data', 'static', 'array', 'changed']",data static array chang,data static array changed
"Standard arrays terminate when the functions that call them finish. A static array is not removed from memory when it is parent function terminates, leaving it available for other functionsor new instances of the original function.",4.0,1.0,standard arrays terminate when the functions that call them finish a static array is not removed from memory when it is parent function terminates leaving it available for other functionsor new instances of the original function,"['standard', 'arrays', 'terminate', 'functions', 'call', 'finish', 'static', 'array', 'removed', 'memory', 'parent', 'function', 'terminates', 'leaving', 'available', 'functionsor', 'new', 'instances', 'original', 'function']",standard array termin function call finish static array remov memori parent function termin leav avail functionsor new instanc origin function,standard array terminate function call finish static array removed memory parent function terminates leaving available functionsor new instance original function
by defining static array it doese not lose scope in locala function. static array makes programm more scalable. non static array lose scope inside the local function.,4.5,1.0,by defining static array it doese not lose scope in locala function static array makes programm more scalable non static array lose scope inside the local function,"['defining', 'static', 'array', 'doese', 'lose', 'scope', 'locala', 'function', 'static', 'array', 'makes', 'programm', 'scalable', 'non', 'static', 'array', 'lose', 'scope', 'inside', 'local', 'function']",defin static array does lose scope locala function static array make programm scalabl non static array lose scope insid local function,defining static array doese lose scope locala function static array make programm scalable non static array lose scope inside local function
static arrays can be called from anywhere,2.0,0.0,static arrays can be called from anywhere,"['static', 'arrays', 'called', 'anywhere']",static array call anywher,static array called anywhere
A static array cannot be changed. A regular array can be changed when it is passed to a function or manually.,2.5,0.0,a static array cannot be changed a regular array can be changed when it is passed to a function or manually,"['static', 'array', 'changed', 'regular', 'array', 'changed', 'passed', 'function', 'manually']",static array chang regular array chang pass function manual,static array changed regular array changed passed function manually
"a static array can be can be edited throughout the program, while a non-static array can only be edited within a given function",3.5,0.0,a static array can be can be edited throughout the program while a non-static array can only be edited within a given function,"['static', 'array', 'edited', 'throughout', 'program', 'non-static', 'array', 'edited', 'within', 'given', 'function']",static array edit throughout program non-stat array edit within given function,static array edited throughout program non-static array edited within given function
"An array that is declared static is allocated when the program begins to run, and is not freed until the program exits, but has limited scope. A non-static array is allocated and freed every time that it comes in and out of scope.",4.5,1.0,an array that is declared static is allocated when the program begins to run and is not freed until the program exits but has limited scope a non-static array is allocated and freed every time that it comes in and out of scope,"['array', 'declared', 'static', 'allocated', 'program', 'begins', 'run', 'freed', 'program', 'exits', 'limited', 'scope', 'non-static', 'array', 'allocated', 'freed', 'every', 'time', 'comes', 'scope']",array declar static alloc program begin run freed program exit limit scope non-stat array alloc freed everi time come scope,array declared static allocated program begin run freed program exit limited scope non-static array allocated freed every time come scope
static has a predetermined size that cannot be passed while vis versa.,3.0,0.0,static has a predetermined size that cannot be passed while vis versa,"['static', 'predetermined', 'size', 'passed', 'vis', 'versa']",static predetermin size pass vi versa,static predetermined size passed vi versa
the type char [] has a nullnelement at the very end.,5.0,1.0,the type char has a nullnelement at the very end,"['type', 'char', 'nullnelement', 'end']",type char nullnel end,type char nullnelement end
a variable char is basically any non command key on the keyboard that you can press. A string is a collection of letters or numbers that is stored together to be used later. Comonly strings are used for words. Chars can be used for less but can have opperations performed on them in a useful way.,2.0,0.0,a variable char is basically any non command key on the keyboard that you can press a string is a collection of letters or numbers that is stored together to be used later comonly strings are used for words chars can be used for less but can have opperations performed on them in a useful way,"['variable', 'char', 'basically', 'non', 'command', 'key', 'keyboard', 'press', 'string', 'collection', 'letters', 'numbers', 'stored', 'together', 'used', 'later', 'comonly', 'strings', 'used', 'words', 'chars', 'used', 'less', 'opperations', 'performed', 'useful', 'way']",variabl char basic non command key keyboard press string collect letter number store togeth use later comonli string use word char use less opper perform use way,variable char basically non command key keyboard press string collection letter number stored together used later comonly string used word char used le opperations performed useful way
The programmer must provide the null terminating character in a string of characters using type char [] and must also ensure that the array is large enough to contain the input string of characters and the null terminating character.,5.0,1.0,the programmer must provide the null terminating character in a string of characters using type char and must also ensure that the array is large enough to contain the input string of characters and the null terminating character,"['programmer', 'must', 'provide', 'null', 'terminating', 'character', 'string', 'characters', 'using', 'type', 'char', 'must', 'also', 'ensure', 'array', 'large', 'enough', 'contain', 'input', 'string', 'characters', 'null', 'terminating', 'character']",programm must provid null termin charact string charact use type char must also ensur array larg enough contain input string charact null termin charact,programmer must provide null terminating character string character using type char must also ensure array large enough contain input string character null terminating character
String of characters are followed by a null statement. type string is for example string s;,5.0,1.0,string of characters are followed by a null statement type string is for example string s,"['string', 'characters', 'followed', 'null', 'statement', 'type', 'string', 'example', 'string']",string charact follow null statement type string exampl string,string character followed null statement type string example string
String contains a word where as char can contain phrases or a string of characters.,2.0,0.0,string contains a word where as char can contain phrases or a string of characters,"['string', 'contains', 'word', 'char', 'contain', 'phrases', 'string', 'characters']",string contain word char contain phrase string charact,string contains word char contain phrase string character
a string is a variable with a single entinty of letters combined into one while in a char [] each letter is assigned a memory value and each has its own variable assigned i. e. char [0] char [1].,2.0,0.0,a string is a variable with a single entinty of letters combined into one while in a char each letter is assigned a memory value and each has its own variable assigned i e char 0 char 1,"['string', 'variable', 'single', 'entinty', 'letters', 'combined', 'one', 'char', 'letter', 'assigned', 'memory', 'value', 'variable', 'assigned', 'e', 'char', '0', 'char', '1']",string variabl singl entinti letter combin one char letter assign memori valu variabl assign e char 0 char 1,string variable single entinty letter combined one char letter assigned memory value variable assigned e char 0 char 1
"A string contains a null character at the end of the string, which makes it easily possible to get the string length. A char array can have a virtually unlimited length, therefore, its size must be declared or limited.",4.0,1.0,a string contains a null character at the end of the string which makes it easily possible to get the string length a char array can have a virtually unlimited length therefore its size must be declared or limited,"['string', 'contains', 'null', 'character', 'end', 'string', 'makes', 'easily', 'possible', 'get', 'string', 'length', 'char', 'array', 'virtually', 'unlimited', 'length', 'therefore', 'size', 'must', 'declared', 'limited']",string contain null charact end string make easili possibl get string length char array virtual unlimit length therefor size must declar limit,string contains null character end string make easily possible get string length char array virtually unlimited length therefore size must declared limited
an array of characters stores a null character at the end,5.0,1.0,an array of characters stores a null character at the end,"['array', 'characters', 'stores', 'null', 'character', 'end']",array charact store null charact end,array character store null character end
"When you read a string of characters, you also read in the white space. When you read characters declared char you only read the characters, no white space.",3.0,0.0,when you read a string of characters you also read in the white space when you read characters declared char you only read the characters no white space,"['read', 'string', 'characters', 'also', 'read', 'white', 'space', 'read', 'characters', 'declared', 'char', 'read', 'characters', 'white', 'space']",read string charact also read white space read charact declar char read charact white space,read string character also read white space read character declared char read character white space
"Character arrays will terminate at any whitespace, including spaces. Strings terminate when they encounter the new line character.",3.5,0.0,character arrays will terminate at any whitespace including spaces strings terminate when they encounter the new line character,"['character', 'arrays', 'terminate', 'whitespace', 'including', 'spaces', 'strings', 'terminate', 'encounter', 'new', 'line', 'character']",charact array termin whitespac includ space string termin encount new line charact,character array terminate whitespace including space string terminate encounter new line character
The difference is that a string that is declared a variable of type char [] is each char is included in the array versus the string of characters that is read into a variable.,2.0,0.0,the difference is that a string that is declared a variable of type char is each char is included in the array versus the string of characters that is read into a variable,"['difference', 'string', 'declared', 'variable', 'type', 'char', 'char', 'included', 'array', 'versus', 'string', 'characters', 'read', 'variable']",differ string declar variabl type char char includ array versu string charact read variabl,difference string declared variable type char char included array versus string character read variable
"An array of strings reads the string literals, meaning anything within quotes. A char array reads a string as each individual character.",2.0,0.0,an array of strings reads the string literals meaning anything within quotes a char array reads a string as each individual character,"['array', 'strings', 'reads', 'string', 'literals', 'meaning', 'anything', 'within', 'quotes', 'char', 'array', 'reads', 'string', 'individual', 'character']",array string read string liter mean anyth within quot char array read string individu charact,array string read string literal meaning anything within quote char array read string individual character
character arrays can call on individual letters were a string array can only call words.,2.0,0.0,character arrays can call on individual letters were a string array can only call words,"['character', 'arrays', 'call', 'individual', 'letters', 'string', 'array', 'call', 'words']",charact array call individu letter string array call word,character array call individual letter string array call word
The character array has an end of line character at the end of it.,5.0,1.0,the character array has an end of line character at the end of it,"['character', 'array', 'end', 'line', 'character', 'end']",charact array end line charact end,character array end line character end
"Type char [] may contain a null value as the last element, whereas type string will not.",5.0,1.0,type char may contain a null value as the last element whereas type string will not,"['type', 'char', 'may', 'contain', 'null', 'value', 'last', 'element', 'whereas', 'type', 'string']",type char may contain null valu last element wherea type string,type char may contain null value last element whereas type string
The variable of type string has a terminating character 0 at the end of it.,4.0,1.0,the variable of type string has a terminating character 0 at the end of it,"['variable', 'type', 'string', 'terminating', 'character', '0', 'end']",variabl type string termin charact 0 end,variable type string terminating character 0 end
the one that is type string has an extra string member. The or 0 at the end.,4.0,1.0,the one that is type string has an extra string member the or 0 at the end,"['one', 'type', 'string', 'extra', 'string', 'member', '0', 'end']",one type string extra string member 0 end,one type string extra string member 0 end
"a string has variable size and function calls available, while an character array usually has a static size.",3.5,0.0,a string has variable size and function calls available while an character array usually has a static size,"['string', 'variable', 'size', 'function', 'calls', 'available', 'character', 'array', 'usually', 'static', 'size']",string variabl size function call avail charact array usual static size,string variable size function call available character array usually static size
a string char [] adds a null value to the end of the string.,5.0,1.0,a string char adds a null value to the end of the string,"['string', 'char', 'adds', 'null', 'value', 'end', 'string']",string char add null valu end string,string char add null value end string
"char array needs an end character signature and is made up of characters each separate from each other, a string is an object in itself, with a value that the user enters.",5.0,1.0,char array needs an end character signature and is made up of characters each separate from each other a string is an object in itself with a value that the user enters,"['char', 'array', 'needs', 'end', 'character', 'signature', 'made', 'characters', 'separate', 'string', 'object', 'value', 'user', 'enters']",char array need end charact signatur made charact separ string object valu user enter,char array need end character signature made character separate string object value user enters
"the variable of type char [], each character is stored into a different memory address and can be accessed easly, where as in a string of character, its not easy to be able to access each character in the string.",2.0,0.0,the variable of type char each character is stored into a different memory address and can be accessed easly where as in a string of character its not easy to be able to access each character in the string,"['variable', 'type', 'char', 'character', 'stored', 'different', 'memory', 'address', 'accessed', 'easly', 'string', 'character', 'easy', 'able', 'access', 'character', 'string']",variabl type char charact store differ memori address access easli string charact easi abl access charact string,variable type char character stored different memory address accessed easly string character easy able access character string
"When the string is passed into the array char, individual characters are stored and can be manipulated. Although when a word is stored into a string variable, it is stored as one word and not as individual characters.",2.0,0.0,when the string is passed into the array char individual characters are stored and can be manipulated although when a word is stored into a string variable it is stored as one word and not as individual characters,"['string', 'passed', 'array', 'char', 'individual', 'characters', 'stored', 'manipulated', 'although', 'word', 'stored', 'string', 'variable', 'stored', 'one', 'word', 'individual', 'characters']",string pass array char individu charact store manipul although word store string variabl store one word individu charact,string passed array char individual character stored manipulated although word stored string variable stored one word individual character
"a string variable can change in size and is passed to functions by value, whereas a type char [] cannot change in size and is passed to functions by reference only",2.0,0.0,a string variable can change in size and is passed to functions by value whereas a type char cannot change in size and is passed to functions by reference only,"['string', 'variable', 'change', 'size', 'passed', 'functions', 'value', 'whereas', 'type', 'char', 'change', 'size', 'passed', 'functions', 'reference']",string variabl chang size pass function valu wherea type char chang size pass function refer,string variable change size passed function value whereas type char change size passed function reference
"A string type string acts as a single object, with individual char entities accessible only through specific string class functions. A char array is less robust, but allows direct access to specific char entities.",3.0,0.0,a string type string acts as a single object with individual char entities accessible only through specific string class functions a char array is less robust but allows direct access to specific char entities,"['string', 'type', 'string', 'acts', 'single', 'object', 'individual', 'char', 'entities', 'accessible', 'specific', 'string', 'class', 'functions', 'char', 'array', 'less', 'robust', 'allows', 'direct', 'access', 'specific', 'char', 'entities']",string type string act singl object individu char entiti access specif string class function char array less robust allow direct access specif char entiti,string type string act single object individual char entity accessible specific string class function char array le robust allows direct access specific char entity
"In arrays strings are stored as a characterschar [], each character of string will be stored in each memory location of the array, while string of characters is only one memory location.",2.0,0.0,in arrays strings are stored as a characterschar each character of string will be stored in each memory location of the array while string of characters is only one memory location,"['arrays', 'strings', 'stored', 'characterschar', 'character', 'string', 'stored', 'memory', 'location', 'array', 'string', 'characters', 'one', 'memory', 'location']",array string store characterschar charact string store memori locat array string charact one memori locat,array string stored characterschar character string stored memory location array string character one memory location
"an array of characters has one more element, its last element, the terminating element, or null, which doesnt exist in a variable of type string",5.0,1.0,an array of characters has one more element its last element the terminating element or null which doesnt exist in a variable of type string,"['array', 'characters', 'one', 'element', 'last', 'element', 'terminating', 'element', 'null', 'doesnt', 'exist', 'variable', 'type', 'string']",array charact one element last element termin element null doesnt exist variabl type string,array character one element last element terminating element null doesnt exist variable type string
A string of characters is a specific variable type that has no extra data at the end. A string of type char [] is all the characters and a null 0,5.0,1.0,a string of characters is a specific variable type that has no extra data at the end a string of type char is all the characters and a null 0,"['string', 'characters', 'specific', 'variable', 'type', 'extra', 'data', 'end', 'string', 'type', 'char', 'characters', 'null', '0']",string charact specif variabl type extra data end string type char charact null 0,string character specific variable type extra data end string type char character null 0
a string of characters will have a null character or value at the end of the string,5.0,1.0,a string of characters will have a null character or value at the end of the string,"['string', 'characters', 'null', 'character', 'value', 'end', 'string']",string charact null charact valu end string,string character null character value end string
"when the characters are put in a char array, there is also a null terminating character added to the end, 0",5.0,1.0,when the characters are put in a char array there is also a null terminating character added to the end 0,"['characters', 'put', 'char', 'array', 'also', 'null', 'terminating', 'character', 'added', 'end', '0']",charact put char array also null termin charact ad end 0,character put char array also null terminating character added end 0
"string of characters that is read into a variable of type string includes,",1.5,0.0,string of characters that is read into a variable of type string includes,"['string', 'characters', 'read', 'variable', 'type', 'string', 'includes']",string charact read variabl type string includ,string character read variable type string includes
"For example we have an array on n elements, the divide and conquer splits up the array into equal halves and repeats this process until each element is by itself",4.0,1.0,for example we have an array on n elements the divide and conquer splits up the array into equal halves and repeats this process until each element is by itself,"['example', 'array', 'n', 'elements', 'divide', 'conquer', 'splits', 'array', 'equal', 'halves', 'repeats', 'process', 'element']",exampl array n element divid conquer split array equal halv repeat process element,example array n element divide conquer split array equal half repeat process element
Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem.,5.0,1.0,divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem,"['divide', 'coquer', 'means', 'dividing', 'problem', '2', 'plus', 'problems', 'solved', 'merged', 'back', 'together', 'final', 'solution', 'whole', 'problem']",divid coquer mean divid problem 2 plu problem solv merg back togeth final solut whole problem,divide coquer mean dividing problem 2 plus problem solved merged back together final solution whole problem
The divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve.,4.5,1.0,the divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve,"['divide', 'conquer', 'paradigm', 'divides', 'problem', 'smaller', 'smaller', 'portions', 'easier', 'solve']",divid conquer paradigm divid problem smaller smaller portion easier solv,divide conquer paradigm divide problem smaller smaller portion easier solve
"Divide elements, recur then conquer, which works in merge sort and quicksort.",4.0,1.0,divide elements recur then conquer which works in merge sort and quicksort,"['divide', 'elements', 'recur', 'conquer', 'works', 'merge', 'sort', 'quicksort']",divid element recur conquer work merg sort quicksort,divide element recur conquer work merge sort quicksort
"To divide and conquer, you divide the program in half once or multiple times to the extent that the program as a whole is easier to work in groups to solve the problem.",4.5,1.0,to divide and conquer you divide the program in half once or multiple times to the extent that the program as a whole is easier to work in groups to solve the problem,"['divide', 'conquer', 'divide', 'program', 'half', 'multiple', 'times', 'extent', 'program', 'whole', 'easier', 'work', 'groups', 'solve', 'problem']",divid conquer divid program half multipl time extent program whole easier work group solv problem,divide conquer divide program half multiple time extent program whole easier work group solve problem
to divide one larger string or line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be.,3.5,0.0,to divide one larger string or line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be,"['divide', 'one', 'larger', 'string', 'line', 'values', 'sepereate', 'smallers', 'lines', 'easily', 'manipulate', 'replace', 'order']",divid one larger string line valu seper smaller line easili manipul replac order,divide one larger string line value sepereate smallers line easily manipulate replace order
"Split the problem into smaller, more manageable parts, and proceed to address the smaller problems.",4.5,1.0,split the problem into smaller more manageable parts and proceed to address the smaller problems,"['split', 'problem', 'smaller', 'manageable', 'parts', 'proceed', 'address', 'smaller', 'problems']",split problem smaller manag part proceed address smaller problem,split problem smaller manageable part proceed address smaller problem
dived and conquer is the breaking up of a large complex program into small easy to solve components.,4.5,1.0,dived and conquer is the breaking up of a large complex program into small easy to solve components,"['dived', 'conquer', 'breaking', 'large', 'complex', 'program', 'small', 'easy', 'solve', 'components']",dive conquer break larg complex program small easi solv compon,dived conquer breaking large complex program small easy solve component
Dividing a larger problem into the smallest incident of the problem and solving the smallest incident.,4.5,1.0,dividing a larger problem into the smallest incident of the problem and solving the smallest incident,"['dividing', 'larger', 'problem', 'smallest', 'incident', 'problem', 'solving', 'smallest', 'incident']",divid larger problem smallest incid problem solv smallest incid,dividing larger problem smallest incident problem solving smallest incident
"Break up very large data structures into smaller sub-units, that are easier to manipulate.",4.5,1.0,break up very large data structures into smaller sub-units that are easier to manipulate,"['break', 'large', 'data', 'structures', 'smaller', 'sub-units', 'easier', 'manipulate']",break larg data structur smaller sub-unit easier manipul,break large data structure smaller sub-units easier manipulate
The divide-and-conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm.,4.0,1.0,the divide-and-conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm,"['divide-and-conquer', 'technique', 'takes', 'sorting', 'algorithm', 'breaks', 'array', 'smaller', 'elements', 'array', 'tackle', 'problem', 'run', 'algorithm']",divide-and-conqu techniqu take sort algorithm break array smaller element array tackl problem run algorithm,divide-and-conquer technique take sorting algorithm break array smaller element array tackle problem run algorithm
"The divide-and-conquer paradigm divides the problem into two pieces and works on each piece separately, allowing for a faster approach to 2 separate smaller problems.",4.5,1.0,the divide-and-conquer paradigm divides the problem into two pieces and works on each piece separately allowing for a faster approach to 2 separate smaller problems,"['divide-and-conquer', 'paradigm', 'divides', 'problem', 'two', 'pieces', 'works', 'piece', 'separately', 'allowing', 'faster', 'approach', '2', 'separate', 'smaller', 'problems']",divide-and-conqu paradigm divid problem two piec work piec separ allow faster approach 2 separ smaller problem,divide-and-conquer paradigm divide problem two piece work piece separately allowing faster approach 2 separate smaller problem
"Take a problem and divide it into a smaller problem and solve that smaller problem, or divide it into a smaller problem and solve it, thus solving the whole problem in the process.",5.0,1.0,take a problem and divide it into a smaller problem and solve that smaller problem or divide it into a smaller problem and solve it thus solving the whole problem in the process,"['take', 'problem', 'divide', 'smaller', 'problem', 'solve', 'smaller', 'problem', 'divide', 'smaller', 'problem', 'solve', 'thus', 'solving', 'whole', 'problem', 'process']",take problem divid smaller problem solv smaller problem divid smaller problem solv thu solv whole problem process,take problem divide smaller problem solve smaller problem divide smaller problem solve thus solving whole problem process
The idea is to split the problem into half and solve for the smaller split-problems.,4.5,1.0,the idea is to split the problem into half and solve for the smaller split-problems,"['idea', 'split', 'problem', 'half', 'solve', 'smaller', 'split-problems']",idea split problem half solv smaller split-problem,idea split problem half solve smaller split-problems
"The divide and conquer paradigm, splits a large problem into simpler problems, at which point it solves the simpler problems and merges the simple solutions together to answer the large problem.",5.0,1.0,the divide and conquer paradigm splits a large problem into simpler problems at which point it solves the simpler problems and merges the simple solutions together to answer the large problem,"['divide', 'conquer', 'paradigm', 'splits', 'large', 'problem', 'simpler', 'problems', 'point', 'solves', 'simpler', 'problems', 'merges', 'simple', 'solutions', 'together', 'answer', 'large', 'problem']",divid conquer paradigm split larg problem simpler problem point solv simpler problem merg simpl solut togeth answer larg problem,divide conquer paradigm split large problem simpler problem point solves simpler problem merges simple solution together answer large problem
"Divide-and-conquer refers to abstraction, the act of separating large, complex problems into smaller, easier problems that can be solved by a relatively simple algorithm.",4.5,1.0,divide-and-conquer refers to abstraction the act of separating large complex problems into smaller easier problems that can be solved by a relatively simple algorithm,"['divide-and-conquer', 'refers', 'abstraction', 'act', 'separating', 'large', 'complex', 'problems', 'smaller', 'easier', 'problems', 'solved', 'relatively', 'simple', 'algorithm']",divide-and-conqu refer abstract act separ larg complex problem smaller easier problem solv rel simpl algorithm,divide-and-conquer refers abstraction act separating large complex problem smaller easier problem solved relatively simple algorithm
"It takes a large problem and splits it into two or more easier or faster solutions, and makes for better readability.",4.5,1.0,it takes a large problem and splits it into two or more easier or faster solutions and makes for better readability,"['takes', 'large', 'problem', 'splits', 'two', 'easier', 'faster', 'solutions', 'makes', 'better', 'readability']",take larg problem split two easier faster solut make better readabl,take large problem split two easier faster solution make better readability
it is the taking of a larger problem and splitting it into simpler smaller problems.,4.5,1.0,it is the taking of a larger problem and splitting it into simpler smaller problems,"['taking', 'larger', 'problem', 'splitting', 'simpler', 'smaller', 'problems']",take larger problem split simpler smaller problem,taking larger problem splitting simpler smaller problem
It divides the problem into singular units and works on the problem piece by piece until the problem is solved.,4.5,1.0,it divides the problem into singular units and works on the problem piece by piece until the problem is solved,"['divides', 'problem', 'singular', 'units', 'works', 'problem', 'piece', 'piece', 'problem', 'solved']",divid problem singular unit work problem piec piec problem solv,divide problem singular unit work problem piece piece problem solved
"smaller parts are easier to compare than comparing the whole, so it divides the problem down in halves until it can easily compare, then works backwards putting it back together to give the solution.",5.0,1.0,smaller parts are easier to compare than comparing the whole so it divides the problem down in halves until it can easily compare then works backwards putting it back together to give the solution,"['smaller', 'parts', 'easier', 'compare', 'comparing', 'whole', 'divides', 'problem', 'halves', 'easily', 'compare', 'works', 'backwards', 'putting', 'back', 'together', 'give', 'solution']",smaller part easier compar compar whole divid problem halv easili compar work backward put back togeth give solut,smaller part easier compare comparing whole divide problem half easily compare work backwards putting back together give solution
"a divide-and-conquer paradigm. takes some data, divides it into two parts, and works on each part indiviually until the item is found.",4.5,1.0,a divide-and-conquer paradigm takes some data divides it into two parts and works on each part indiviually until the item is found,"['divide-and-conquer', 'paradigm', 'takes', 'data', 'divides', 'two', 'parts', 'works', 'part', 'indiviually', 'item', 'found']",divide-and-conqu paradigm take data divid two part work part indiviu item found,divide-and-conquer paradigm take data divide two part work part indiviually item found
"The idea of divide and conquer is to take a large problem, split it into n smaller problems, making the program easier to read and modify.",4.5,1.0,the idea of divide and conquer is to take a large problem split it into n smaller problems making the program easier to read and modify,"['idea', 'divide', 'conquer', 'take', 'large', 'problem', 'split', 'n', 'smaller', 'problems', 'making', 'program', 'easier', 'read', 'modify']",idea divid conquer take larg problem split n smaller problem make program easier read modifi,idea divide conquer take large problem split n smaller problem making program easier read modify
the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached.,4.5,1.0,the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached,"['divide', 'conquer', 'paradigm', 'recursive', 'solution', 'keeps', 'dividing', 'problem', 'halves', 'base', 'case', 'reached']",divid conquer paradigm recurs solut keep divid problem halv base case reach,divide conquer paradigm recursive solution keep dividing problem half base case reached
"dividing and conquering means breaking a problem into two smaller problems, solving both of those, and putting the two solutions together.",5.0,1.0,dividing and conquering means breaking a problem into two smaller problems solving both of those and putting the two solutions together,"['dividing', 'conquering', 'means', 'breaking', 'problem', 'two', 'smaller', 'problems', 'solving', 'putting', 'two', 'solutions', 'together']",divid conquer mean break problem two smaller problem solv put two solut togeth,dividing conquering mean breaking problem two smaller problem solving putting two solution together
"Divide the big problem into small problem, solve small problem and join small solved elements of the problem. if there is two ore more elements in the array, divide the array into parts and compare the elements, after comperison, conquer the elements. If array have n element, first half have n divided by 2 elements",5.0,1.0,divide the big problem into small problem solve small problem and join small solved elements of the problem if there is two ore more elements in the array divide the array into parts and compare the elements after comperison conquer the elements if array have n element first half have n divided by 2 elements,"['divide', 'big', 'problem', 'small', 'problem', 'solve', 'small', 'problem', 'join', 'small', 'solved', 'elements', 'problem', 'two', 'ore', 'elements', 'array', 'divide', 'array', 'parts', 'compare', 'elements', 'comperison', 'conquer', 'elements', 'array', 'n', 'element', 'first', 'half', 'n', 'divided', '2', 'elements']",divid big problem small problem solv small problem join small solv element problem two ore element array divid array part compar element comperison conquer element array n element first half n divid 2 element,divide big problem small problem solve small problem join small solved element problem two ore element array divide array part compare element comperison conquer element array n element first half n divided 2 element
"divide the array in half, sort each half, then sort them back in one array",3.0,0.0,divide the array in half sort each half then sort them back in one array,"['divide', 'array', 'half', 'sort', 'half', 'sort', 'back', 'one', 'array']",divid array half sort half sort back one array,divide array half sort half sort back one array
You take a class and break down everything it is supposed to do into easily managed functions.,3.0,0.0,you take a class and break down everything it is supposed to do into easily managed functions,"['take', 'class', 'break', 'everything', 'supposed', 'easily', 'managed', 'functions']",take class break everyth suppos easili manag function,take class break everything supposed easily managed function
"this is shown by the use of. cpp and header files. by splitting the program up into smaller subsections of individual code, it becomes easier to write and keep up with as opposed to having all of your code in one file",3.0,0.0,this is shown by the use of cpp and header files by splitting the program up into smaller subsections of individual code it becomes easier to write and keep up with as opposed to having all of your code in one file,"['shown', 'use', 'cpp', 'header', 'files', 'splitting', 'program', 'smaller', 'subsections', 'individual', 'code', 'becomes', 'easier', 'write', 'keep', 'opposed', 'code', 'one', 'file']",shown use cpp header file split program smaller subsect individu code becom easier write keep oppos code one file,shown use cpp header file splitting program smaller subsection individual code becomes easier write keep opposed code one file
"When a problem is too big, split it into smaller problems of the same type, and solve those, then from the solutions of the smaller problem, give the solution to the larger original problem.",5.0,1.0,when a problem is too big split it into smaller problems of the same type and solve those then from the solutions of the smaller problem give the solution to the larger original problem,"['problem', 'big', 'split', 'smaller', 'problems', 'type', 'solve', 'solutions', 'smaller', 'problem', 'give', 'solution', 'larger', 'original', 'problem']",problem big split smaller problem type solv solut smaller problem give solut larger origin problem,problem big split smaller problem type solve solution smaller problem give solution larger original problem
it is the separating of large program into smaller classes then until target is reached.,3.5,0.0,it is the separating of large program into smaller classes then until target is reached,"['separating', 'large', 'program', 'smaller', 'classes', 'target', 'reached']",separ larg program smaller class target reach,separating large program smaller class target reached
"It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list, this is done by reversing the divide and conquer technique",5.0,1.0,it uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,"['uses', 'divide', 'conqure', 'technique', 'recursively', 'merging', 'back', 'together', 'compares', 'element', 'together', 'sorted', 'list', 'done', 'reversing', 'divide', 'conquer', 'technique']",use divid conqur techniqu recurs merg back togeth compar element togeth sort list done revers divid conquer techniqu,us divide conqure technique recursively merging back together compare element together sorted list done reversing divide conquer technique
A merge sort works by removing all items to sepperate memory locations and merging them back together in order.,3.5,0.0,a merge sort works by removing all items to sepperate memory locations and merging them back together in order,"['merge', 'sort', 'works', 'removing', 'items', 'sepperate', 'memory', 'locations', 'merging', 'back', 'together', 'order']",merg sort work remov item sepper memori locat merg back togeth order,merge sort work removing item sepperate memory location merging back together order
"It divides the array into two halves, sorts each half, then merges the two halves together.",5.0,1.0,it divides the array into two halves sorts each half then merges the two halves together,"['divides', 'array', 'two', 'halves', 'sorts', 'half', 'merges', 'two', 'halves', 'together']",divid array two halv sort half merg two halv togeth,divide array two half sort half merges two half together
"Divide into two sublists and then those sublists break into length 1, then merges the sublists sorted.",5.0,1.0,divide into two sublists and then those sublists break into length 1 then merges the sublists sorted,"['divide', 'two', 'sublists', 'sublists', 'break', 'length', '1', 'merges', 'sublists', 'sorted']",divid two sublist sublist break length 1 merg sublist sort,divide two sublists sublists break length 1 merges sublists sorted
Merge sort uses the divide and conquer idea where it divides the array in half multiple times and then joins each element of the array back into one sorted array. This is one of the best sorting algorithms besides Quicksort.,5.0,1.0,merge sort uses the divide and conquer idea where it divides the array in half multiple times and then joins each element of the array back into one sorted array this is one of the best sorting algorithms besides quicksort,"['merge', 'sort', 'uses', 'divide', 'conquer', 'idea', 'divides', 'array', 'half', 'multiple', 'times', 'joins', 'element', 'array', 'back', 'one', 'sorted', 'array', 'one', 'best', 'sorting', 'algorithms', 'besides', 'quicksort']",merg sort use divid conquer idea divid array half multipl time join element array back one sort array one best sort algorithm besid quicksort,merge sort us divide conquer idea divide array half multiple time join element array back one sorted array one best sorting algorithm besides quicksort
divides the line in half coninuously until you get to only a single value then recombine the values to form a sorted line.,5.0,1.0,divides the line in half coninuously until you get to only a single value then recombine the values to form a sorted line,"['divides', 'line', 'half', 'coninuously', 'get', 'single', 'value', 'recombine', 'values', 'form', 'sorted', 'line']",divid line half coninu get singl valu recombin valu form sort line,divide line half coninuously get single value recombine value form sorted line
"Continually split array in half, sort each side of the halves, then put them back together once organized.",5.0,1.0,continually split array in half sort each side of the halves then put them back together once organized,"['continually', 'split', 'array', 'half', 'sort', 'side', 'halves', 'put', 'back', 'together', 'organized']",continu split array half sort side halv put back togeth organ,continually split array half sort side half put back together organized
merge sort splits the array of elements into smaller arrays until the arrays reach size 1 and then the merge sort merges the smaller arrays into arrays of size 2 then it moves to the next step and merges the next arrays.,5.0,1.0,merge sort splits the array of elements into smaller arrays until the arrays reach size 1 and then the merge sort merges the smaller arrays into arrays of size 2 then it moves to the next step and merges the next arrays,"['merge', 'sort', 'splits', 'array', 'elements', 'smaller', 'arrays', 'arrays', 'reach', 'size', '1', 'merge', 'sort', 'merges', 'smaller', 'arrays', 'arrays', 'size', '2', 'moves', 'next', 'step', 'merges', 'next', 'arrays']",merg sort split array element smaller array array reach size 1 merg sort merg smaller array array size 2 move next step merg next array,merge sort split array element smaller array array reach size 1 merge sort merges smaller array array size 2 move next step merges next array
By divide and conquer.,3.5,0.0,by divide and conquer,"['divide', 'conquer']",divid conquer,divide conquer
"Break a single array down into many arrays with individual elements, then sort the elements as you reconstruct them back into a single array.",5.0,1.0,break a single array down into many arrays with individual elements then sort the elements as you reconstruct them back into a single array,"['break', 'single', 'array', 'many', 'arrays', 'individual', 'elements', 'sort', 'elements', 'reconstruct', 'back', 'single', 'array']",break singl array mani array individu element sort element reconstruct back singl array,break single array many array individual element sort element reconstruct back single array
"Merge sort breaks the array in half, and continues to do so until it has 2 elements to compare and sorts them, after doing so it merges back as it keeps on sorting the algorithm as it does so.",5.0,1.0,merge sort breaks the array in half and continues to do so until it has 2 elements to compare and sorts them after doing so it merges back as it keeps on sorting the algorithm as it does so,"['merge', 'sort', 'breaks', 'array', 'half', 'continues', '2', 'elements', 'compare', 'sorts', 'merges', 'back', 'keeps', 'sorting', 'algorithm']",merg sort break array half continu 2 element compar sort merg back keep sort algorithm,merge sort break array half continues 2 element compare sort merges back keep sorting algorithm
"Merge sort divides the problem in half, organizes each half, then brings the two halves together again.",5.0,1.0,merge sort divides the problem in half organizes each half then brings the two halves together again,"['merge', 'sort', 'divides', 'problem', 'half', 'organizes', 'half', 'brings', 'two', 'halves', 'together']",merg sort divid problem half organ half bring two halv togeth,merge sort divide problem half organizes half brings two half together
"Take an array and split it into two, then solve these simpler problems and merge the two answers in correct order.",5.0,1.0,take an array and split it into two then solve these simpler problems and merge the two answers in correct order,"['take', 'array', 'split', 'two', 'solve', 'simpler', 'problems', 'merge', 'two', 'answers', 'correct', 'order']",take array split two solv simpler problem merg two answer correct order,take array split two solve simpler problem merge two answer correct order
"A merge sort recursively divides the array into half until only one element remains, then it sorts the data on its way out of the recursive call by merging the cells.",5.0,1.0,a merge sort recursively divides the array into half until only one element remains then it sorts the data on its way out of the recursive call by merging the cells,"['merge', 'sort', 'recursively', 'divides', 'array', 'half', 'one', 'element', 'remains', 'sorts', 'data', 'way', 'recursive', 'call', 'merging', 'cells']",merg sort recurs divid array half one element remain sort data way recurs call merg cell,merge sort recursively divide array half one element remains sort data way recursive call merging cell
"Merge sort recursively divides an array into two arrays until all arrays have 1 element, at which point it merges the 1 element arrays into larger sorted arrays, the final returned array being the sorted version of the initial array.",5.0,1.0,merge sort recursively divides an array into two arrays until all arrays have 1 element at which point it merges the 1 element arrays into larger sorted arrays the final returned array being the sorted version of the initial array,"['merge', 'sort', 'recursively', 'divides', 'array', 'two', 'arrays', 'arrays', '1', 'element', 'point', 'merges', '1', 'element', 'arrays', 'larger', 'sorted', 'arrays', 'final', 'returned', 'array', 'sorted', 'version', 'initial', 'array']",merg sort recurs divid array two array array 1 element point merg 1 element array larger sort array final return array sort version initi array,merge sort recursively divide array two array array 1 element point merges 1 element array larger sorted array final returned array sorted version initial array
Merge sort continuously breaks an array in half then sorts the arrays as it concatenates them back together into one sorted array.,5.0,1.0,merge sort continuously breaks an array in half then sorts the arrays as it concatenates them back together into one sorted array,"['merge', 'sort', 'continuously', 'breaks', 'array', 'half', 'sorts', 'arrays', 'concatenates', 'back', 'together', 'one', 'sorted', 'array']",merg sort continu break array half sort array concaten back togeth one sort array,merge sort continuously break array half sort array concatenates back together one sorted array
"It takes an array, splits itself in half, sorts the two halveseither by recursion or iterationand compares them together giving a third array a full sorted list with both halves rejoined.",5.0,1.0,it takes an array splits itself in half sorts the two halveseither by recursion or iterationand compares them together giving a third array a full sorted list with both halves rejoined,"['takes', 'array', 'splits', 'half', 'sorts', 'two', 'halveseither', 'recursion', 'iterationand', 'compares', 'together', 'giving', 'third', 'array', 'full', 'sorted', 'list', 'halves', 'rejoined']",take array split half sort two halveseith recurs iterationand compar togeth give third array full sort list halv rejoin,take array split half sort two halveseither recursion iterationand compare together giving third array full sorted list half rejoined
"it splits a large array into small arrays and recurs until the array is a size of 1, and then merges all of the arrays back together until the source array is completely sourted.",5.0,1.0,it splits a large array into small arrays and recurs until the array is a size of 1 and then merges all of the arrays back together until the source array is completely sourted,"['splits', 'large', 'array', 'small', 'arrays', 'recurs', 'array', 'size', '1', 'merges', 'arrays', 'back', 'together', 'source', 'array', 'completely', 'sourted']",split larg array small array recur array size 1 merg array back togeth sourc array complet sourt,split large array small array recurs array size 1 merges array back together source array completely sourted
Mergesort divides the array into smaller halves and then combines the sorted subarrays into one sorted array.,5.0,1.0,mergesort divides the array into smaller halves and then combines the sorted subarrays into one sorted array,"['mergesort', 'divides', 'array', 'smaller', 'halves', 'combines', 'sorted', 'subarrays', 'one', 'sorted', 'array']",mergesort divid array smaller halv combin sort subarray one sort array,mergesort divide array smaller half combine sorted subarrays one sorted array
"merge sort breaks the array down in halves until it is comparing two values, sorts those two values, then merges that back with the other broken down parts that it sorted, each level merging more sets together till you return back to your whole array in order.",5.0,1.0,merge sort breaks the array down in halves until it is comparing two values sorts those two values then merges that back with the other broken down parts that it sorted each level merging more sets together till you return back to your whole array in order,"['merge', 'sort', 'breaks', 'array', 'halves', 'comparing', 'two', 'values', 'sorts', 'two', 'values', 'merges', 'back', 'broken', 'parts', 'sorted', 'level', 'merging', 'sets', 'together', 'till', 'return', 'back', 'whole', 'array', 'order']",merg sort break array halv compar two valu sort two valu merg back broken part sort level merg set togeth till return back whole array order,merge sort break array half comparing two value sort two value merges back broken part sorted level merging set together till return back whole array order
"Divides the data into twor separate arrays, sorts the two arrays and merges them back to back together recursively.",5.0,1.0,divides the data into twor separate arrays sorts the two arrays and merges them back to back together recursively,"['divides', 'data', 'twor', 'separate', 'arrays', 'sorts', 'two', 'arrays', 'merges', 'back', 'back', 'together', 'recursively']",divid data twor separ array sort two array merg back back togeth recurs,divide data twor separate array sort two array merges back back together recursively
"Take the initial array and split it into two, temporary, smaller arrays, sort the two smaller arrays, and merge them back into a single array.",5.0,1.0,take the initial array and split it into two temporary smaller arrays sort the two smaller arrays and merge them back into a single array,"['take', 'initial', 'array', 'split', 'two', 'temporary', 'smaller', 'arrays', 'sort', 'two', 'smaller', 'arrays', 'merge', 'back', 'single', 'array']",take initi array split two temporari smaller array sort two smaller array merg back singl array,take initial array split two temporary smaller array sort two smaller array merge back single array
merge sort divides the data into halves until data of one element is reached and then merges each element together according to its placement in comparison to the rest of the data,5.0,1.0,merge sort divides the data into halves until data of one element is reached and then merges each element together according to its placement in comparison to the rest of the data,"['merge', 'sort', 'divides', 'data', 'halves', 'data', 'one', 'element', 'reached', 'merges', 'element', 'together', 'according', 'placement', 'comparison', 'rest', 'data']",merg sort divid data halv data one element reach merg element togeth accord placement comparison rest data,merge sort divide data half data one element reached merges element together according placement comparison rest data
"merge sort uses the divide and conquer strategy, sorting an array in parts, then merging the sorted parts back together.",5.0,1.0,merge sort uses the divide and conquer strategy sorting an array in parts then merging the sorted parts back together,"['merge', 'sort', 'uses', 'divide', 'conquer', 'strategy', 'sorting', 'array', 'parts', 'merging', 'sorted', 'parts', 'back', 'together']",merg sort use divid conquer strategi sort array part merg sort part back togeth,merge sort us divide conquer strategy sorting array part merging sorted part back together
"Divide recursuivly big array into two arrays, sort two array and merge them togather recuruivly.",5.0,1.0,divide recursuivly big array into two arrays sort two array and merge them togather recuruivly,"['divide', 'recursuivly', 'big', 'array', 'two', 'arrays', 'sort', 'two', 'array', 'merge', 'togather', 'recuruivly']",divid recursuivli big array two array sort two array merg togath recuruivli,divide recursuivly big array two array sort two array merge togather recuruivly
"divides an array in half and sorts each half by calling its self, thus dividing each half again and again and sorting it until the array is sorted. then putting the elements back in the original array sorted.",5.0,1.0,divides an array in half and sorts each half by calling its self thus dividing each half again and again and sorting it until the array is sorted then putting the elements back in the original array sorted,"['divides', 'array', 'half', 'sorts', 'half', 'calling', 'self', 'thus', 'dividing', 'half', 'sorting', 'array', 'sorted', 'putting', 'elements', 'back', 'original', 'array', 'sorted']",divid array half sort half call self thu divid half sort array sort put element back origin array sort,divide array half sort half calling self thus dividing half sorting array sorted putting element back original array sorted
Merge sort takes an array and splits it in half and sends each half back to itself recursively and merges and sorts the two halves when it starts going back up.,5.0,1.0,merge sort takes an array and splits it in half and sends each half back to itself recursively and merges and sorts the two halves when it starts going back up,"['merge', 'sort', 'takes', 'array', 'splits', 'half', 'sends', 'half', 'back', 'recursively', 'merges', 'sorts', 'two', 'halves', 'starts', 'going', 'back']",merg sort take array split half send half back recurs merg sort two halv start go back,merge sort take array split half sends half back recursively merges sort two half start going back
"merge sort splits an array into two halves and then sorts the two smaller arrays, and then merges them back together to form a sorted array",5.0,1.0,merge sort splits an array into two halves and then sorts the two smaller arrays and then merges them back together to form a sorted array,"['merge', 'sort', 'splits', 'array', 'two', 'halves', 'sorts', 'two', 'smaller', 'arrays', 'merges', 'back', 'together', 'form', 'sorted', 'array']",merg sort split array two halv sort two smaller array merg back togeth form sort array,merge sort split array two half sort two smaller array merges back together form sorted array
"the merge sort continually divides the arrayor set of containersinto halves, until it reaches the point where there is just one element left, then merges each of the sets of two sorted arrayscontainers.",5.0,1.0,the merge sort continually divides the arrayor set of containersinto halves until it reaches the point where there is just one element left then merges each of the sets of two sorted arrayscontainers,"['merge', 'sort', 'continually', 'divides', 'arrayor', 'set', 'containersinto', 'halves', 'reaches', 'point', 'one', 'element', 'left', 'merges', 'sets', 'two', 'sorted', 'arrayscontainers']",merg sort continu divid arrayor set containersinto halv reach point one element left merg set two sort arrayscontain,merge sort continually divide arrayor set containersinto half reach point one element left merges set two sorted arrayscontainers
merge sort splits an array of elements into smaller and smaller array 's till the value of 1 is reached.,4.0,1.0,merge sort splits an array of elements into smaller and smaller array s till the value of 1 is reached,"['merge', 'sort', 'splits', 'array', 'elements', 'smaller', 'smaller', 'array', 'till', 'value', '1', 'reached']",merg sort split array element smaller smaller array till valu 1 reach,merge sort split array element smaller smaller array till value 1 reached
A variable in memory that hold the address of another memory location to which it points too,5.0,1.0,a variable in memory that hold the address of another memory location to which it points too,"['variable', 'memory', 'hold', 'address', 'another', 'memory', 'location', 'points']",variabl memori hold address anoth memori locat point,variable memory hold address another memory location point
A pointer is a variable that contains the memory address of a given value.,5.0,1.0,a pointer is a variable that contains the memory address of a given value,"['pointer', 'variable', 'contains', 'memory', 'address', 'given', 'value']",pointer variabl contain memori address given valu,pointer variable contains memory address given value
A pointer is a variable that stores the address of another variable.,5.0,1.0,a pointer is a variable that stores the address of another variable,"['pointer', 'variable', 'stores', 'address', 'another', 'variable']",pointer variabl store address anoth variabl,pointer variable store address another variable
A pointer is a variable that holds a memory address or location of another variable.,5.0,1.0,a pointer is a variable that holds a memory address or location of another variable,"['pointer', 'variable', 'holds', 'memory', 'address', 'location', 'another', 'variable']",pointer variabl hold memori address locat anoth variabl,pointer variable hold memory address location another variable
A data type that points to an address in memory which contains certain information. Used for pass-by-reference to save memory.,5.0,1.0,a data type that points to an address in memory which contains certain information used for pass-by-reference to save memory,"['data', 'type', 'points', 'address', 'memory', 'contains', 'certain', 'information', 'used', 'pass-by-reference', 'save', 'memory']",data type point address memori contain certain inform use pass-by-refer save memori,data type point address memory contains certain information used pass-by-reference save memory
a pointer points to a location in memory of a certain data type,5.0,1.0,a pointer points to a location in memory of a certain data type,"['pointer', 'points', 'location', 'memory', 'certain', 'data', 'type']",pointer point locat memori certain data type,pointer point location memory certain data type
A pointer is a variable that points to the address location of another variable. Represented bySTAR.,5.0,1.0,a pointer is a variable that points to the address location of another variable represented bystar,"['pointer', 'variable', 'points', 'address', 'location', 'another', 'variable', 'represented', 'bystar']",pointer variabl point address locat anoth variabl repres bystar,pointer variable point address location another variable represented bystar
A pointer is a variable that holds the address of a given variableand of a given data type,5.0,1.0,a pointer is a variable that holds the address of a given variableand of a given data type,"['pointer', 'variable', 'holds', 'address', 'given', 'variableand', 'given', 'data', 'type']",pointer variabl hold address given variableand given data type,pointer variable hold address given variableand given data type
pointer is a programming data type whose value points to another value stored in computer memory by its address.,5.0,1.0,pointer is a programming data type whose value points to another value stored in computer memory by its address,"['pointer', 'programming', 'data', 'type', 'whose', 'value', 'points', 'another', 'value', 'stored', 'computer', 'memory', 'address']",pointer program data type whose valu point anoth valu store comput memori address,pointer programming data type whose value point another value stored computer memory address
A data type that points to a specific memory address.,5.0,1.0,a data type that points to a specific memory address,"['data', 'type', 'points', 'specific', 'memory', 'address']",data type point specif memori address,data type point specific memory address
Its like a variable except it only holds the address in memory of the variable not the physical information.,5.0,1.0,its like a variable except it only holds the address in memory of the variable not the physical information,"['like', 'variable', 'except', 'holds', 'address', 'memory', 'variable', 'physical', 'information']",like variabl except hold address memori variabl physic inform,like variable except hold address memory variable physical information
a pointer is a reference to a memory location.,5.0,1.0,a pointer is a reference to a memory location,"['pointer', 'reference', 'memory', 'location']",pointer refer memori locat,pointer reference memory location
A pointer is an alias to an object in memory.,4.0,1.0,a pointer is an alias to an object in memory,"['pointer', 'alias', 'object', 'memory']",pointer alia object memori,pointer alias object memory
"A pointer is a variable that contains a memory address for something that you can use, such as a value, array, or even a function.",5.0,1.0,a pointer is a variable that contains a memory address for something that you can use such as a value array or even a function,"['pointer', 'variable', 'contains', 'memory', 'address', 'something', 'use', 'value', 'array', 'even', 'function']",pointer variabl contain memori address someth use valu array even function,pointer variable contains memory address something use value array even function
its a data type with a memory address and a value,3.5,0.0,its a data type with a memory address and a value,"['data', 'type', 'memory', 'address', 'value']",data type memori address valu,data type memory address value
a form of storing data that keeps the location in memory of an data type or object.,5.0,1.0,a form of storing data that keeps the location in memory of an data type or object,"['form', 'storing', 'data', 'keeps', 'location', 'memory', 'data', 'type', 'object']",form store data keep locat memori data type object,form storing data keep location memory data type object
it contains a object 's memory address,5.0,1.0,it contains a object s memory address,"['contains', 'object', 'memory', 'address']",contain object memori address,contains object memory address
variable that contains the memory address of a data object.,5.0,1.0,variable that contains the memory address of a data object,"['variable', 'contains', 'memory', 'address', 'data', 'object']",variabl contain memori address data object,variable contains memory address data object
A pointer is an element that references a memory location.,5.0,1.0,a pointer is an element that references a memory location,"['pointer', 'element', 'references', 'memory', 'location']",pointer element refer memori locat,pointer element reference memory location
"an object that points to a specific place in memory, where a variable or value is stored.",5.0,1.0,an object that points to a specific place in memory where a variable or value is stored,"['object', 'points', 'specific', 'place', 'memory', 'variable', 'value', 'stored']",object point specif place memori variabl valu store,object point specific place memory variable value stored
a variable that stores the address of a memory location,5.0,1.0,a variable that stores the address of a memory location,"['variable', 'stores', 'address', 'memory', 'location']",variabl store address memori locat,variable store address memory location
"A pointer is a variable that points to an address in memory, which contains some data. The pointer does not contain or point to any data, only a memory address.",5.0,1.0,a pointer is a variable that points to an address in memory which contains some data the pointer does not contain or point to any data only a memory address,"['pointer', 'variable', 'points', 'address', 'memory', 'contains', 'data', 'pointer', 'contain', 'point', 'data', 'memory', 'address']",pointer variabl point address memori contain data pointer contain point data memori address,pointer variable point address memory contains data pointer contain point data memory address
Pointer is a variable which have a memory address of a variable.,5.0,1.0,pointer is a variable which have a memory address of a variable,"['pointer', 'variable', 'memory', 'address', 'variable']",pointer variabl memori address variabl,pointer variable memory address variable
a pointer points to a location in memory where data is stored,5.0,1.0,a pointer points to a location in memory where data is stored,"['pointer', 'points', 'location', 'memory', 'data', 'stored']",pointer point locat memori data store,pointer point location memory data stored
a variable that holds the address of another variable and can access the contents of the variable.,5.0,1.0,a variable that holds the address of another variable and can access the contents of the variable,"['variable', 'holds', 'address', 'another', 'variable', 'access', 'contents', 'variable']",variabl hold address anoth variabl access content variabl,variable hold address another variable access content variable
a pointer is a memory address that points to a data member,5.0,1.0,a pointer is a memory address that points to a data member,"['pointer', 'memory', 'address', 'points', 'data', 'member']",pointer memori address point data member,pointer memory address point data member
A data type that stores the memory address of another variable.,5.0,1.0,a data type that stores the memory address of another variable,"['data', 'type', 'stores', 'memory', 'address', 'another', 'variable']",data type store memori address anoth variabl,data type store memory address another variable
its like a variable but only holds an address in meomrry not the physical address.,3.0,0.0,its like a variable but only holds an address in meomrry not the physical address,"['like', 'variable', 'holds', 'address', 'meomrry', 'physical', 'address']",like variabl hold address meomrri physic address,like variable hold address meomrry physical address
"Try several sets of data on an algorithm that includes worst case, best case, and random cases. Also try and run the same program on a different computer with the same specs",4.5,1.0,try several sets of data on an algorithm that includes worst case best case and random cases also try and run the same program on a different computer with the same specs,"['try', 'several', 'sets', 'data', 'algorithm', 'includes', 'worst', 'case', 'best', 'case', 'random', 'cases', 'also', 'try', 'run', 'program', 'different', 'computer', 'specs']",tri sever set data algorithm includ worst case best case random case also tri run program differ comput spec,try several set data algorithm includes worst case best case random case also try run program different computer spec
not answered,0.0,0.0,not answered,['answered'],answer,answered
time complexity using big O logarthmic Olog nlinear Onexponential On to the power of 2quadratic On to the power of kk is greater than or equal to 1 Polynomial Oa to the power of nn is greater than 1,2.5,0.0,time complexity using big o logarthmic olog nlinear onexponential on to the power of 2quadratic on to the power of kk is greater than or equal to 1 polynomial oa to the power of nn is greater than 1,"['time', 'complexity', 'using', 'big', 'logarthmic', 'olog', 'nlinear', 'onexponential', 'power', '2quadratic', 'power', 'kk', 'greater', 'equal', '1', 'polynomial', 'oa', 'power', 'nn', 'greater', '1']",time complex use big logarthm olog nlinear onexponenti power 2quadrat power kk greater equal 1 polynomi oa power nn greater 1,time complexity using big logarthmic olog nlinear onexponential power 2quadratic power kk greater equal 1 polynomial oa power nn greater 1
Using some sort of counting principle of the number of operations performed in an algorithm.,4.5,1.0,using some sort of counting principle of the number of operations performed in an algorithm,"['using', 'sort', 'counting', 'principle', 'number', 'operations', 'performed', 'algorithm']",use sort count principl number oper perform algorithm,using sort counting principle number operation performed algorithm
Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters.,5.0,1.0,experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters,"['experimental', 'means', 'would', 'actually', 'write', 'prototype', 'algorithm', 'measure', 'time', 'takes', 'run', 'given', 'certain', 'parameters']",experiment mean would actual write prototyp algorithm measur time take run given certain paramet,experimental mean would actually write prototype algorithm measure time take run given certain parameter
measuring the relationship of running an algorithm with different input sizes.,4.5,1.0,measuring the relationship of running an algorithm with different input sizes,"['measuring', 'relationship', 'running', 'algorithm', 'different', 'input', 'sizes']",measur relationship run algorithm differ input size,measuring relationship running algorithm different input size
"Oposite of a theoretical assessment of the algorithm to determine runtime, but to run the code first to determine the the runtime. This is not recommended because it is a limited test. It does not include all possibilities of the data, nor the hardware used to process the data.",4.5,1.0,oposite of a theoretical assessment of the algorithm to determine runtime but to run the code first to determine the the runtime this is not recommended because it is a limited test it does not include all possibilities of the data nor the hardware used to process the data,"['oposite', 'theoretical', 'assessment', 'algorithm', 'determine', 'runtime', 'run', 'code', 'first', 'determine', 'runtime', 'recommended', 'limited', 'test', 'include', 'possibilities', 'data', 'hardware', 'used', 'process', 'data']",oposit theoret assess algorithm determin runtim run code first determin runtim recommend limit test includ possibl data hardwar use process data,oposite theoretical assessment algorithm determine runtime run code first determine runtime recommended limited test include possibility data hardware used process data
not answered,0.0,0.0,not answered,['answered'],answer,answered
The experimental approach for measuring the running time is by using the Big O equation which tells you the running time.,3.0,0.0,the experimental approach for measuring the running time is by using the big o equation which tells you the running time,"['experimental', 'approach', 'measuring', 'running', 'time', 'using', 'big', 'equation', 'tells', 'running', 'time']",experiment approach measur run time use big equat tell run time,experimental approach measuring running time using big equation tell running time
"You create and run the algorithm multiple times, while measuring the amount of time it takes, you then average the results.",5.0,1.0,you create and run the algorithm multiple times while measuring the amount of time it takes you then average the results,"['create', 'run', 'algorithm', 'multiple', 'times', 'measuring', 'amount', 'time', 'takes', 'average', 'results']",creat run algorithm multipl time measur amount time take averag result,create run algorithm multiple time measuring amount time take average result
keep a value of how many operations it takes and add to this value each time a function is called.,3.5,0.0,keep a value of how many operations it takes and add to this value each time a function is called,"['keep', 'value', 'many', 'operations', 'takes', 'add', 'value', 'time', 'function', 'called']",keep valu mani oper take add valu time function call,keep value many operation take add value time function called
BIG-OH,2.5,0.0,big-oh,['big-oh'],big-oh,big-oh
Running the program with various input data and measuring the running time with system time.,5.0,1.0,running the program with various input data and measuring the running time with system time,"['running', 'program', 'various', 'input', 'data', 'measuring', 'running', 'time', 'system', 'time']",run program variou input data measur run time system time,running program various input data measuring running time system time
"You run a program with different data sizes, like 10 to the power of x. As you increase x and measure the completion speeds for the program, you can find patterns and attempt the measure the running time. It is very important to keep the same software and hardware however, which makes experimental testing inferior to theoretical in the eyes of most.",4.0,1.0,you run a program with different data sizes like 10 to the power of x as you increase x and measure the completion speeds for the program you can find patterns and attempt the measure the running time it is very important to keep the same software and hardware however which makes experimental testing inferior to theoretical in the eyes of most,"['run', 'program', 'different', 'data', 'sizes', 'like', '10', 'power', 'x', 'increase', 'x', 'measure', 'completion', 'speeds', 'program', 'find', 'patterns', 'attempt', 'measure', 'running', 'time', 'important', 'keep', 'software', 'hardware', 'however', 'makes', 'experimental', 'testing', 'inferior', 'theoretical', 'eyes']",run program differ data size like 10 power x increas x measur complet speed program find pattern attempt measur run time import keep softwar hardwar howev make experiment test inferior theoret eye,run program different data size like 10 power x increase x measure completion speed program find pattern attempt measure running time important keep software hardware however make experimental testing inferior theoretical eye
to run the program through and see how many times each thing is called and the runtime of each function is based on that.,4.5,1.0,to run the program through and see how many times each thing is called and the runtime of each function is based on that,"['run', 'program', 'see', 'many', 'times', 'thing', 'called', 'runtime', 'function', 'based']",run program see mani time thing call runtim function base,run program see many time thing called runtime function based
the number of times a specific segments get called per unit work.,3.0,0.0,the number of times a specific segments get called per unit work,"['number', 'times', 'specific', 'segments', 'get', 'called', 'per', 'unit', 'work']",number time specif segment get call per unit work,number time specific segment get called per unit work
"For every call into memory, add or multiply it into an equation of type On",2.5,0.0,for every call into memory add or multiply it into an equation of type on,"['every', 'call', 'memory', 'add', 'multiply', 'equation', 'type']",everi call memori add multipli equat type,every call memory add multiply equation type
"adding a time marker at the before the algorithm is called and another time marker immediately after so that you have the change in time, then you can calculate the efficiency by the speed of the computers cpu.",3.5,0.0,adding a time marker at the before the algorithm is called and another time marker immediately after so that you have the change in time then you can calculate the efficiency by the speed of the computers cpu,"['adding', 'time', 'marker', 'algorithm', 'called', 'another', 'time', 'marker', 'immediately', 'change', 'time', 'calculate', 'efficiency', 'speed', 'computers', 'cpu']",ad time marker algorithm call anoth time marker immedi chang time calcul effici speed comput cpu,adding time marker algorithm called another time marker immediately change time calculate efficiency speed computer cpu
Big Ohnotation,2.5,0.0,big ohnotation,"['big', 'ohnotation']",big ohnot,big ohnotation
the experimental approach measures actual running time in t. t equals seconds.,5.0,1.0,the experimental approach measures actual running time in t t equals seconds,"['experimental', 'approach', 'measures', 'actual', 'running', 'time', 'equals', 'seconds']",experiment approach measur actual run time equal second,experimental approach measure actual running time equal second
running an algorithm on a specific set of data,4.0,1.0,running an algorithm on a specific set of data,"['running', 'algorithm', 'specific', 'set', 'data']",run algorithm specif set data,running algorithm specific set data
"In experimental terms, the running time of an algorithm is measured by the number of operations required to complete the function. This number can usually be expressed in big-O notation.",3.5,0.0,in experimental terms the running time of an algorithm is measured by the number of operations required to complete the function this number can usually be expressed in big-o notation,"['experimental', 'terms', 'running', 'time', 'algorithm', 'measured', 'number', 'operations', 'required', 'complete', 'function', 'number', 'usually', 'expressed', 'big-o', 'notation']",experiment term run time algorithm measur number oper requir complet function number usual express big-o notat,experimental term running time algorithm measured number operation required complete function number usually expressed big-o notation
"run the code for n-times and get average values, drop the constant and lowest number. for example if fxequals 3n plus 1 the running time will bef fxequals On",4.0,1.0,run the code for n-times and get average values drop the constant and lowest number for example if fxequals 3n plus 1 the running time will bef fxequals on,"['run', 'code', 'n-times', 'get', 'average', 'values', 'drop', 'constant', 'lowest', 'number', 'example', 'fxequals', '3n', 'plus', '1', 'running', 'time', 'bef', 'fxequals']",run code n-time get averag valu drop constant lowest number exampl fxequal 3n plu 1 run time bef fxequal,run code n-times get average value drop constant lowest number example fxequals 3n plus 1 running time bef fxequals
to measure the actual time of the program to run. and calculate the running time using the input and operations done,5.0,1.0,to measure the actual time of the program to run and calculate the running time using the input and operations done,"['measure', 'actual', 'time', 'program', 'run', 'calculate', 'running', 'time', 'using', 'input', 'operations', 'done']",measur actual time program run calcul run time use input oper done,measure actual time program run calculate running time using input operation done
adding up the number of operations performed based on the worst case possible.,2.5,0.0,adding up the number of operations performed based on the worst case possible,"['adding', 'number', 'operations', 'performed', 'based', 'worst', 'case', 'possible']",ad number oper perform base worst case possibl,adding number operation performed based worst case possible
the experimental approach would be to run through the algorithm and see how long it takes,5.0,1.0,the experimental approach would be to run through the algorithm and see how long it takes,"['experimental', 'approach', 'would', 'run', 'algorithm', 'see', 'long', 'takes']",experiment approach would run algorithm see long take,experimental approach would run algorithm see long take
"trying it with different sets of inputs, and measuring the amount of time that the algorithm actually takes.",5.0,1.0,trying it with different sets of inputs and measuring the amount of time that the algorithm actually takes,"['trying', 'different', 'sets', 'inputs', 'measuring', 'amount', 'time', 'algorithm', 'actually', 'takes']",tri differ set input measur amount time algorithm actual take,trying different set input measuring amount time algorithm actually take
running the input with various inputs measuring the running time with system time,4.5,1.0,running the input with various inputs measuring the running time with system time,"['running', 'input', 'various', 'inputs', 'measuring', 'running', 'time', 'system', 'time']",run input variou input measur run time system time,running input various input measuring running time system time
"loglog n, 2 to the power oflog n, n to the power of 2, n to the power of 3, n!",5.0,1.0,loglog n 2 to the power oflog n n to the power of 2 n to the power of 3 n!,"['loglog', 'n', '2', 'power', 'oflog', 'n', 'n', 'power', '2', 'n', 'power', '3', 'n', '!']",loglog n 2 power oflog n n power 2 n power 3 n !,loglog n 2 power oflog n n power 2 n power 3 n !
"loglog n, n to the power of 2, n to the power of 3, 2 to the power oflog n, n!",4.0,1.0,loglog n n to the power of 2 n to the power of 3 2 to the power oflog n n!,"['loglog', 'n', 'n', 'power', '2', 'n', 'power', '3', '2', 'power', 'oflog', 'n', 'n', '!']",loglog n n power 2 n power 3 2 power oflog n n !,loglog n n power 2 n power 3 2 power oflog n n !
loglogn2 to the power oflog nn to the power of 2 n to the power of 3 n!,5.0,1.0,loglogn2 to the power oflog nn to the power of 2 n to the power of 3 n!,"['loglogn2', 'power', 'oflog', 'nn', 'power', '2', 'n', 'power', '3', 'n', '!']",loglogn2 power oflog nn power 2 n power 3 n !,loglogn2 power oflog nn power 2 n power 3 n !
"loglog n, 2 to the power oflog n, n to the power of 2, n to the power of 3, n!",5.0,1.0,loglog n 2 to the power oflog n n to the power of 2 n to the power of 3 n!,"['loglog', 'n', '2', 'power', 'oflog', 'n', 'n', 'power', '2', 'n', 'power', '3', 'n', '!']",loglog n 2 power oflog n n power 2 n power 3 n !,loglog n 2 power oflog n n power 2 n power 3 n !
"loglog n, 2 to the power oflog n, n to the power of 2, n to the power of 3, n!",5.0,1.0,loglog n 2 to the power oflog n n to the power of 2 n to the power of 3 n!,"['loglog', 'n', '2', 'power', 'oflog', 'n', 'n', 'power', '2', 'n', 'power', '3', 'n', '!']",loglog n 2 power oflog n n power 2 n power 3 n !,loglog n 2 power oflog n n power 2 n power 3 n !
"loglogn , n to the power of 2, n to the power of 3, 2 to the power of logn, n!",4.125,1.0,loglogn n to the power of 2 n to the power of 3 2 to the power of logn n!,"['loglogn', 'n', 'power', '2', 'n', 'power', '3', '2', 'power', 'logn', 'n', '!']",loglogn n power 2 n power 3 2 power logn n !,loglogn n power 2 n power 3 2 power logn n !
loglogn2 to the power oflognn! n to the power of 3 n to the power of 2,2.0,0.0,loglogn2 to the power oflognn! n to the power of 3 n to the power of 2,"['loglogn2', 'power', 'oflognn', '!', 'n', 'power', '3', 'n', 'power', '2']",loglogn2 power oflognn ! n power 3 n power 2,loglogn2 power oflognn ! n power 3 n power 2
loglog n; 2 to the power oflog n; n!; n to the power of 2; n to the power of 3;,3.75,0.0,loglog n 2 to the power oflog n n! n to the power of 2 n to the power of 3,"['loglog', 'n', '2', 'power', 'oflog', 'n', 'n', '!', 'n', 'power', '2', 'n', 'power', '3']",loglog n 2 power oflog n n ! n power 2 n power 3,loglog n 2 power oflog n n ! n power 2 n power 3
"this goes from largest to smallest: n!, n to the power of 3, n to the power of 2, 2 to the power oflog n, loglog n",5.0,1.0,this goes from largest to smallest n! n to the power of 3 n to the power of 2 2 to the power oflog n loglog n,"['goes', 'largest', 'smallest', 'n', '!', 'n', 'power', '3', 'n', 'power', '2', '2', 'power', 'oflog', 'n', 'loglog', 'n']",goe largest smallest n ! n power 3 n power 2 2 power oflog n loglog n,go largest smallest n ! n power 3 n power 2 2 power oflog n loglog n
loglog n; 2 to the power oflog n; n to the power of 2; n to the power of 3; n!,5.0,1.0,loglog n 2 to the power oflog n n to the power of 2 n to the power of 3 n!,"['loglog', 'n', '2', 'power', 'oflog', 'n', 'n', 'power', '2', 'n', 'power', '3', 'n', '!']",loglog n 2 power oflog n n power 2 n power 3 n !,loglog n 2 power oflog n n power 2 n power 3 n !
"2 to the power oflog n, loglog n, n!, n to the power of 2, n to the power of 3",1.75,0.0,2 to the power oflog n loglog n n! n to the power of 2 n to the power of 3,"['2', 'power', 'oflog', 'n', 'loglog', 'n', 'n', '!', 'n', 'power', '2', 'n', 'power', '3']",2 power oflog n loglog n n ! n power 2 n power 3,2 power oflog n loglog n n ! n power 2 n power 3
loglog n; n!; n to the power of 2; n to the power of 3; n to the power oflog n,2.25,0.0,loglog n n! n to the power of 2 n to the power of 3 n to the power oflog n,"['loglog', 'n', 'n', '!', 'n', 'power', '2', 'n', 'power', '3', 'n', 'power', 'oflog', 'n']",loglog n n ! n power 2 n power 3 n power oflog n,loglog n n ! n power 2 n power 3 n power oflog n
"From least to greatest: loglog n, 2 to the power oflog n, n to the power of 2, n to the power of 3, n!",5.0,1.0,from least to greatest loglog n 2 to the power oflog n n to the power of 2 n to the power of 3 n!,"['least', 'greatest', 'loglog', 'n', '2', 'power', 'oflog', 'n', 'n', 'power', '2', 'n', 'power', '3', 'n', '!']",least greatest loglog n 2 power oflog n n power 2 n power 3 n !,least greatest loglog n 2 power oflog n n power 2 n power 3 n !
"loglog n2 to the power oflog n, is just n n to the power of 2 n to the power of 3 n!",5.0,1.0,loglog n2 to the power oflog n is just n n to the power of 2 n to the power of 3 n!,"['loglog', 'n2', 'power', 'oflog', 'n', 'n', 'n', 'power', '2', 'n', 'power', '3', 'n', '!']",loglog n2 power oflog n n n power 2 n power 3 n !,loglog n2 power oflog n n n power 2 n power 3 n !
2 to the power oflog nloglog nn to the power of 2 n to the power of 3 n!,4.0,1.0,2 to the power oflog nloglog nn to the power of 2 n to the power of 3 n!,"['2', 'power', 'oflog', 'nloglog', 'nn', 'power', '2', 'n', 'power', '3', 'n', '!']",2 power oflog nloglog nn power 2 n power 3 n !,2 power oflog nloglog nn power 2 n power 3 n !
from lowest to longest. loglog n; 2 to the power oflog n; n!; n to the power of 2; n to the power of 3;,3.625,0.0,from lowest to longest loglog n 2 to the power oflog n n! n to the power of 2 n to the power of 3,"['lowest', 'longest', 'loglog', 'n', '2', 'power', 'oflog', 'n', 'n', '!', 'n', 'power', '2', 'n', 'power', '3']",lowest longest loglog n 2 power oflog n n ! n power 2 n power 3,lowest longest loglog n 2 power oflog n n ! n power 2 n power 3
loglogn 2 to the power of lognn to the power of 2 n to the power of 3 n!,5.0,1.0,loglogn 2 to the power of lognn to the power of 2 n to the power of 3 n!,"['loglogn', '2', 'power', 'lognn', 'power', '2', 'n', 'power', '3', 'n', '!']",loglogn 2 power lognn power 2 n power 3 n !,loglogn 2 power lognn power 2 n power 3 n !
"loglog n, 2 to the power oflog n, n to the power of 2, n to the power of 3, n!",5.0,1.0,loglog n 2 to the power oflog n n to the power of 2 n to the power of 3 n!,"['loglog', 'n', '2', 'power', 'oflog', 'n', 'n', 'power', '2', 'n', 'power', '3', 'n', '!']",loglog n 2 power oflog n n power 2 n power 3 n !,loglog n 2 power oflog n n power 2 n power 3 n !
"2 to the power oflog n, n to the power of 3, n to the power of 2, loglog n, n!",2.0,0.0,2 to the power oflog n n to the power of 3 n to the power of 2 loglog n n!,"['2', 'power', 'oflog', 'n', 'n', 'power', '3', 'n', 'power', '2', 'loglog', 'n', 'n', '!']",2 power oflog n n power 3 n power 2 loglog n n !,2 power oflog n n power 3 n power 2 loglog n n !
"linear, logarithmic, exponential, linear, linear",1.5,0.0,linear logarithmic exponential linear linear,"['linear', 'logarithmic', 'exponential', 'linear', 'linear']",linear logarithm exponenti linear linear,linear logarithmic exponential linear linear
"quickest at top, slowest at bottom loglog nn to the power of 2 n to the power of 3 2 to the power oflog nn!",4.0,1.0,quickest at top slowest at bottom loglog nn to the power of 2 n to the power of 3 2 to the power oflog nn!,"['quickest', 'top', 'slowest', 'bottom', 'loglog', 'nn', 'power', '2', 'n', 'power', '3', '2', 'power', 'oflog', 'nn', '!']",quickest top slowest bottom loglog nn power 2 n power 3 2 power oflog nn !,quickest top slowest bottom loglog nn power 2 n power 3 2 power oflog nn !
longest to shortest: n to the power of 3; n!; n to the power of 2; 2 to the power oflog n; loglog n,3.0,0.0,longest to shortest n to the power of 3 n! n to the power of 2 2 to the power oflog n loglog n,"['longest', 'shortest', 'n', 'power', '3', 'n', '!', 'n', 'power', '2', '2', 'power', 'oflog', 'n', 'loglog', 'n']",longest shortest n power 3 n ! n power 2 2 power oflog n loglog n,longest shortest n power 3 n ! n power 2 2 power oflog n loglog n
2 to the power oflog nn to the power of 2 to the power of 3 loglong nn!,3.25,0.0,2 to the power oflog nn to the power of 2 to the power of 3 loglong nn!,"['2', 'power', 'oflog', 'nn', 'power', '2', 'power', '3', 'loglong', 'nn', '!']",2 power oflog nn power 2 power 3 loglong nn !,2 power oflog nn power 2 power 3 loglong nn !
from lowest to highest 1-longlong n2 minus 2 to the power of logn3 minus n to the power of 2 4 minus N to the power of 3 5 minus n!,5.0,1.0,from lowest to highest 1-longlong n2 minus 2 to the power of logn3 minus n to the power of 2 4 minus n to the power of 3 5 minus n!,"['lowest', 'highest', '1-longlong', 'n2', 'minus', '2', 'power', 'logn3', 'minus', 'n', 'power', '2', '4', 'minus', 'n', 'power', '3', '5', 'minus', 'n', '!']",lowest highest 1-longlong n2 minu 2 power logn3 minu n power 2 4 minu n power 3 5 minu n !,lowest highest 1-longlong n2 minus 2 power logn3 minus n power 2 4 minus n power 3 5 minus n !
loglog n; n to the power of 2; n to the power of 3; n!; 2 to the power oflog n,4.125,1.0,loglog n n to the power of 2 n to the power of 3 n! 2 to the power oflog n,"['loglog', 'n', 'n', 'power', '2', 'n', 'power', '3', 'n', '!', '2', 'power', 'oflog', 'n']",loglog n n power 2 n power 3 n ! 2 power oflog n,loglog n n power 2 n power 3 n ! 2 power oflog n
n to the power of 2; n!; n to the power of 3; 2 to the power oflog n; loglog n,2.25,0.0,n to the power of 2 n! n to the power of 3 2 to the power oflog n loglog n,"['n', 'power', '2', 'n', '!', 'n', 'power', '3', '2', 'power', 'oflog', 'n', 'loglog', 'n']",n power 2 n ! n power 3 2 power oflog n loglog n,n power 2 n ! n power 3 2 power oflog n loglog n
"worst to best: n!, n to the power of 3, n to the power of 2, 2 to the power oflog n, loglog n",5.0,1.0,worst to best n! n to the power of 3 n to the power of 2 2 to the power oflog n loglog n,"['worst', 'best', 'n', '!', 'n', 'power', '3', 'n', 'power', '2', '2', 'power', 'oflog', 'n', 'loglog', 'n']",worst best n ! n power 3 n power 2 2 power oflog n loglog n,worst best n ! n power 3 n power 2 2 power oflog n loglog n
"loglong n, 2 to the power oflog n; n to the power of 2, n to the power of 3;",4.75,1.0,loglong n 2 to the power oflog n n to the power of 2 n to the power of 3,"['loglong', 'n', '2', 'power', 'oflog', 'n', 'n', 'power', '2', 'n', 'power', '3']",loglong n 2 power oflog n n power 2 n power 3,loglong n 2 power oflog n n power 2 n power 3
"it scans the list and selects the smallestlargestelement and places it in the front, increment the curPtr by one, scan the list again for the next smallestlargestelement and place it in with respect with the other sorted elements.",5.0,1.0,it scans the list and selects the smallestlargestelement and places it in the front increment the curptr by one scan the list again for the next smallestlargestelement and place it in with respect with the other sorted elements,"['scans', 'list', 'selects', 'smallestlargestelement', 'places', 'front', 'increment', 'curptr', 'one', 'scan', 'list', 'next', 'smallestlargestelement', 'place', 'respect', 'sorted', 'elements']",scan list select smallestlargestel place front increment curptr one scan list next smallestlargestel place respect sort element,scan list selects smallestlargestelement place front increment curptr one scan list next smallestlargestelement place respect sorted element
"Selection sort searches the array for the lowest value and swaps it with the first value in the array. Then searches for the next lowest value and swaps it with the second item in the array, and so on.",5.0,1.0,selection sort searches the array for the lowest value and swaps it with the first value in the array then searches for the next lowest value and swaps it with the second item in the array and so on,"['selection', 'sort', 'searches', 'array', 'lowest', 'value', 'swaps', 'first', 'value', 'array', 'searches', 'next', 'lowest', 'value', 'swaps', 'second', 'item', 'array']",select sort search array lowest valu swap first valu array search next lowest valu swap second item array,selection sort search array lowest value swap first value array search next lowest value swap second item array
Compare the largest element to the front element and swap data according to value if needed.,4.0,1.0,compare the largest element to the front element and swap data according to value if needed,"['compare', 'largest', 'element', 'front', 'element', 'swap', 'data', 'according', 'value', 'needed']",compar largest element front element swap data accord valu need,compare largest element front element swap data according value needed
"Selection sort is a sorting algorithm that divides a list in half and has two lists. It then compares the first elements in both these lists and puts these elements in another list, having the smaller element before the bigger one.",2.0,0.0,selection sort is a sorting algorithm that divides a list in half and has two lists it then compares the first elements in both these lists and puts these elements in another list having the smaller element before the bigger one,"['selection', 'sort', 'sorting', 'algorithm', 'divides', 'list', 'half', 'two', 'lists', 'compares', 'first', 'elements', 'lists', 'puts', 'elements', 'another', 'list', 'smaller', 'element', 'bigger', 'one']",select sort sort algorithm divid list half two list compar first element list put element anoth list smaller element bigger one,selection sort sorting algorithm divide list half two list compare first element list put element another list smaller element bigger one
"Iterate through the listassume list of integers, find the smallest one, and put it in a separate sorted list ... then traverse again and find the next smallest, and move it to the sorted section ... and repeat until you run out of elements to sort.",5.0,1.0,iterate through the listassume list of integers find the smallest one and put it in a separate sorted list then traverse again and find the next smallest and move it to the sorted section and repeat until you run out of elements to sort,"['iterate', 'listassume', 'list', 'integers', 'find', 'smallest', 'one', 'put', 'separate', 'sorted', 'list', 'traverse', 'find', 'next', 'smallest', 'move', 'sorted', 'section', 'repeat', 'run', 'elements', 'sort']",iter listassum list integ find smallest one put separ sort list travers find next smallest move sort section repeat run element sort,iterate listassume list integer find smallest one put separate sorted list traverse find next smallest move sorted section repeat run element sort
selection sort selects the smallest element out of the list then the second smallest ... and sorts them acordingly.,5.0,1.0,selection sort selects the smallest element out of the list then the second smallest and sorts them acordingly,"['selection', 'sort', 'selects', 'smallest', 'element', 'list', 'second', 'smallest', 'sorts', 'acordingly']",select sort select smallest element list second smallest sort acordingli,selection sort selects smallest element list second smallest sort acordingly
You select the smallest element and place it on the left. You select the smallest element and sort it with respect the the item already on the left. You continue this till the end of the collection of items.,5.0,1.0,you select the smallest element and place it on the left you select the smallest element and sort it with respect the the item already on the left you continue this till the end of the collection of items,"['select', 'smallest', 'element', 'place', 'left', 'select', 'smallest', 'element', 'sort', 'respect', 'item', 'already', 'left', 'continue', 'till', 'end', 'collection', 'items']",select smallest element place left select smallest element sort respect item alreadi left continu till end collect item,select smallest element place left select smallest element sort respect item already left continue till end collection item
"A selection sort scrolls through the data structure looking for the lowestor highestunsorted piece of data, moves it to the held spot, increments that spot by one, and starts the process over.",5.0,1.0,a selection sort scrolls through the data structure looking for the lowestor highestunsorted piece of data moves it to the held spot increments that spot by one and starts the process over,"['selection', 'sort', 'scrolls', 'data', 'structure', 'looking', 'lowestor', 'highestunsorted', 'piece', 'data', 'moves', 'held', 'spot', 'increments', 'spot', 'one', 'starts', 'process']",select sort scroll data structur look lowestor highestunsort piec data move held spot increment spot one start process,selection sort scroll data structure looking lowestor highestunsorted piece data move held spot increment spot one start process
Selection sort works by finding the smallest element and then compares it with the largest and sorts the elements.,2.0,0.0,selection sort works by finding the smallest element and then compares it with the largest and sorts the elements,"['selection', 'sort', 'works', 'finding', 'smallest', 'element', 'compares', 'largest', 'sorts', 'elements']",select sort work find smallest element compar largest sort element,selection sort work finding smallest element compare largest sort element
"Selection sort is usually a recursive sorting method where you divide the elements to be sorted in half repeatedly. You then sort the smallest case, then work your way up, sorting each until they are all sorted.",2.5,0.0,selection sort is usually a recursive sorting method where you divide the elements to be sorted in half repeatedly you then sort the smallest case then work your way up sorting each until they are all sorted,"['selection', 'sort', 'usually', 'recursive', 'sorting', 'method', 'divide', 'elements', 'sorted', 'half', 'repeatedly', 'sort', 'smallest', 'case', 'work', 'way', 'sorting', 'sorted']",select sort usual recurs sort method divid element sort half repeatedli sort smallest case work way sort sort,selection sort usually recursive sorting method divide element sorted half repeatedly sort smallest case work way sorting sorted
"goes to the middle of the list, checks to see if it is greater or less then the value given and moves through the list accordingly to add the value into the proper place.",2.0,0.0,goes to the middle of the list checks to see if it is greater or less then the value given and moves through the list accordingly to add the value into the proper place,"['goes', 'middle', 'list', 'checks', 'see', 'greater', 'less', 'value', 'given', 'moves', 'list', 'accordingly', 'add', 'value', 'proper', 'place']",goe middl list check see greater less valu given move list accordingli add valu proper place,go middle list check see greater le value given move list accordingly add value proper place
selection sort finds the lowest element in the data set and places it behind the pivot point.,4.5,1.0,selection sort finds the lowest element in the data set and places it behind the pivot point,"['selection', 'sort', 'finds', 'lowest', 'element', 'data', 'set', 'places', 'behind', 'pivot', 'point']",select sort find lowest element data set place behind pivot point,selection sort find lowest element data set place behind pivot point
"Selection sort iterates through the array one element at a time, seeking the least value from the right and replacing the current value with it.",4.5,1.0,selection sort iterates through the array one element at a time seeking the least value from the right and replacing the current value with it,"['selection', 'sort', 'iterates', 'array', 'one', 'element', 'time', 'seeking', 'least', 'value', 'right', 'replacing', 'current', 'value']",select sort iter array one element time seek least valu right replac current valu,selection sort iterates array one element time seeking least value right replacing current value
"Selection sort traverses an unsorted array looking for the smallest value, when it is found it is put at the beginning of the unsorted array. Performed several times, this will output a sorted array.",5.0,1.0,selection sort traverses an unsorted array looking for the smallest value when it is found it is put at the beginning of the unsorted array performed several times this will output a sorted array,"['selection', 'sort', 'traverses', 'unsorted', 'array', 'looking', 'smallest', 'value', 'found', 'put', 'beginning', 'unsorted', 'array', 'performed', 'several', 'times', 'output', 'sorted', 'array']",select sort travers unsort array look smallest valu found put begin unsort array perform sever time output sort array,selection sort traverse unsorted array looking smallest value found put beginning unsorted array performed several time output sorted array
it runs through the list and finds the smallestor largestvalue and puts it at the appropriate position,4.5,1.0,it runs through the list and finds the smallestor largestvalue and puts it at the appropriate position,"['runs', 'list', 'finds', 'smallestor', 'largestvalue', 'puts', 'appropriate', 'position']",run list find smallestor largestvalu put appropri posit,run list find smallestor largestvalue put appropriate position
"pick a number, and set all values less than that number to the left, while all numbers on the right of that number is larger.",3.0,0.0,pick a number and set all values less than that number to the left while all numbers on the right of that number is larger,"['pick', 'number', 'set', 'values', 'less', 'number', 'left', 'numbers', 'right', 'number', 'larger']",pick number set valu less number left number right number larger,pick number set value le number left number right number larger
It takes the largest item in the unsorted array and swaps it with last item in the unsorted array.,4.5,1.0,it takes the largest item in the unsorted array and swaps it with last item in the unsorted array,"['takes', 'largest', 'item', 'unsorted', 'array', 'swaps', 'last', 'item', 'unsorted', 'array']",take largest item unsort array swap last item unsort array,take largest item unsorted array swap last item unsorted array
"by selecting the first object and comparing it with the next objects to find one that is smaller, if it does it switches the two. then it comes back the other way and sees if the objects previous to the last one is greater, if it does it switches them. it does this while decreasing the range it looks at until it finishes in the middle.",2.5,0.0,by selecting the first object and comparing it with the next objects to find one that is smaller if it does it switches the two then it comes back the other way and sees if the objects previous to the last one is greater if it does it switches them it does this while decreasing the range it looks at until it finishes in the middle,"['selecting', 'first', 'object', 'comparing', 'next', 'objects', 'find', 'one', 'smaller', 'switches', 'two', 'comes', 'back', 'way', 'sees', 'objects', 'previous', 'last', 'one', 'greater', 'switches', 'decreasing', 'range', 'looks', 'finishes', 'middle']",select first object compar next object find one smaller switch two come back way see object previou last one greater switch decreas rang look finish middl,selecting first object comparing next object find one smaller switch two come back way see object previous last one greater switch decreasing range look finish middle
"Selection sorts works by going through a certain list. Goes through the unsorted list and selecting the largest item in the list and placing it in a sorted array. There are two arrays, unsorted and sorted. Complete these steps until the list is sorted.",4.5,1.0,selection sorts works by going through a certain list goes through the unsorted list and selecting the largest item in the list and placing it in a sorted array there are two arrays unsorted and sorted complete these steps until the list is sorted,"['selection', 'sorts', 'works', 'going', 'certain', 'list', 'goes', 'unsorted', 'list', 'selecting', 'largest', 'item', 'list', 'placing', 'sorted', 'array', 'two', 'arrays', 'unsorted', 'sorted', 'complete', 'steps', 'list', 'sorted']",select sort work go certain list goe unsort list select largest item list place sort array two array unsort sort complet step list sort,selection sort work going certain list go unsorted list selecting largest item list placing sorted array two array unsorted sorted complete step list sorted
"selection sort works by pulling all of the values off to the side, leaving one value in the list. It will then insert a value into the list. if the value is bigger it will go to the right, if smaller if will go to the left.",2.5,0.0,selection sort works by pulling all of the values off to the side leaving one value in the list it will then insert a value into the list if the value is bigger it will go to the right if smaller if will go to the left,"['selection', 'sort', 'works', 'pulling', 'values', 'side', 'leaving', 'one', 'value', 'list', 'insert', 'value', 'list', 'value', 'bigger', 'go', 'right', 'smaller', 'go', 'left']",select sort work pull valu side leav one valu list insert valu list valu bigger go right smaller go left,selection sort work pulling value side leaving one value list insert value list value bigger go right smaller go left
selection sort searches for the smallest element of the remaining data organization and places it at the largest point of the new data organization,4.5,1.0,selection sort searches for the smallest element of the remaining data organization and places it at the largest point of the new data organization,"['selection', 'sort', 'searches', 'smallest', 'element', 'remaining', 'data', 'organization', 'places', 'largest', 'point', 'new', 'data', 'organization']",select sort search smallest element remain data organ place largest point new data organ,selection sort search smallest element remaining data organization place largest point new data organization
"Selection sort sorts an array one element at at time. It first finds the element with the smallest key and puts it into the first location within its array or list, then finds the next smallest and puts it in the second location, and so on.",5.0,1.0,selection sort sorts an array one element at at time it first finds the element with the smallest key and puts it into the first location within its array or list then finds the next smallest and puts it in the second location and so on,"['selection', 'sort', 'sorts', 'array', 'one', 'element', 'time', 'first', 'finds', 'element', 'smallest', 'key', 'puts', 'first', 'location', 'within', 'array', 'list', 'finds', 'next', 'smallest', 'puts', 'second', 'location']",select sort sort array one element time first find element smallest key put first locat within array list find next smallest put second locat,selection sort sort array one element time first find element smallest key put first location within array list find next smallest put second location
"select an element compare it with 2nd element if it is greater, swap it",3.0,0.0,select an element compare it with 2nd element if it is greater swap it,"['select', 'element', 'compare', '2nd', 'element', 'greater', 'swap']",select element compar 2nd element greater swap,select element compare 2nd element greater swap
"it selects the smallest element in a list and switches it with the element in its correct position, then it selects the next smallest and does the same ...",4.5,1.0,it selects the smallest element in a list and switches it with the element in its correct position then it selects the next smallest and does the same,"['selects', 'smallest', 'element', 'list', 'switches', 'element', 'correct', 'position', 'selects', 'next', 'smallest']",select smallest element list switch element correct posit select next smallest,selects smallest element list switch element correct position selects next smallest
It starts at the first element and replaces it with the smallest element found to the right. It then repeats with the next element in the list.,4.5,1.0,it starts at the first element and replaces it with the smallest element found to the right it then repeats with the next element in the list,"['starts', 'first', 'element', 'replaces', 'smallest', 'element', 'found', 'right', 'repeats', 'next', 'element', 'list']",start first element replac smallest element found right repeat next element list,start first element replaces smallest element found right repeat next element list
"selection sort is when you pick a data member and put it in a new array, then you pick another data member and put it in order with the new array, then pick another and insert it in the correct place in the new array, etc etc",3.0,0.0,selection sort is when you pick a data member and put it in a new array then you pick another data member and put it in order with the new array then pick another and insert it in the correct place in the new array etc etc,"['selection', 'sort', 'pick', 'data', 'member', 'put', 'new', 'array', 'pick', 'another', 'data', 'member', 'put', 'order', 'new', 'array', 'pick', 'another', 'insert', 'correct', 'place', 'new', 'array', 'etc', 'etc']",select sort pick data member put new array pick anoth data member put order new array pick anoth insert correct place new array etc etc,selection sort pick data member put new array pick another data member put order new array pick another insert correct place new array etc etc
"it searches through the entire data set for the best element to go in the current position, then it moves up a position and searches through the remainder of the set for the best element for the new position.",4.0,1.0,it searches through the entire data set for the best element to go in the current position then it moves up a position and searches through the remainder of the set for the best element for the new position,"['searches', 'entire', 'data', 'set', 'best', 'element', 'go', 'current', 'position', 'moves', 'position', 'searches', 'remainder', 'set', 'best', 'element', 'new', 'position']",search entir data set best element go current posit move posit search remaind set best element new posit,search entire data set best element go current position move position search remainder set best element new position
selection sort iterates through the array one element a time searching for the right and replacing current value with it.,4.0,1.0,selection sort iterates through the array one element a time searching for the right and replacing current value with it,"['selection', 'sort', 'iterates', 'array', 'one', 'element', 'time', 'searching', 'right', 'replacing', 'current', 'value']",select sort iter array one element time search right replac current valu,selection sort iterates array one element time searching right replacing current value
A link list can grow to a infinite size as a array has a fixes size.,5.0,1.0,a link list can grow to a infinite size as a array has a fixes size,"['link', 'list', 'grow', 'infinite', 'size', 'array', 'fixes', 'size']",link list grow infinit size array fix size,link list grow infinite size array fix size
The advantage of linked lists is that they are not limited in size like arrays.,5.0,1.0,the advantage of linked lists is that they are not limited in size like arrays,"['advantage', 'linked', 'lists', 'limited', 'size', 'like', 'arrays']",advantag link list limit size like array,advantage linked list limited size like array
link lists dont have a fixed size,5.0,1.0,link lists dont have a fixed size,"['link', 'lists', 'dont', 'fixed', 'size']",link list dont fix size,link list dont fixed size
"Linked Lists can be of variable size, where arrays have fixed size.",5.0,1.0,linked lists can be of variable size where arrays have fixed size,"['linked', 'lists', 'variable', 'size', 'arrays', 'fixed', 'size']",link list variabl size array fix size,linked list variable size array fixed size
"Linked lists do not have a definite size. They can be as big or as small as needed, and they do not have to allocate extra memory for elements you do not need. Arrays size must be defined.",5.0,1.0,linked lists do not have a definite size they can be as big or as small as needed and they do not have to allocate extra memory for elements you do not need arrays size must be defined,"['linked', 'lists', 'definite', 'size', 'big', 'small', 'needed', 'allocate', 'extra', 'memory', 'elements', 'need', 'arrays', 'size', 'must', 'defined']",link list definit size big small need alloc extra memori element need array size must defin,linked list definite size big small needed allocate extra memory element need array size must defined
"a linked list has a dynamic size, but an array only has a fixed size and takes allot of extra operations to increase its size.",5.0,1.0,a linked list has a dynamic size but an array only has a fixed size and takes allot of extra operations to increase its size,"['linked', 'list', 'dynamic', 'size', 'array', 'fixed', 'size', 'takes', 'allot', 'extra', 'operations', 'increase', 'size']",link list dynam size array fix size take allot extra oper increas size,linked list dynamic size array fixed size take allot extra operation increase size
You do not have to predetermine your list size as you do with arrays. Linked list have the ability to be as large as you want them adding memory as needed.,5.0,1.0,you do not have to predetermine your list size as you do with arrays linked list have the ability to be as large as you want them adding memory as needed,"['predetermine', 'list', 'size', 'arrays', 'linked', 'list', 'ability', 'large', 'want', 'adding', 'memory', 'needed']",predetermin list size array link list abil larg want ad memori need,predetermine list size array linked list ability large want adding memory needed
The main advantage to a linked list is that it can have it is size adjusted during runtime.,5.0,1.0,the main advantage to a linked list is that it can have it is size adjusted during runtime,"['main', 'advantage', 'linked', 'list', 'size', 'adjusted', 'runtime']",main advantag link list size adjust runtim,main advantage linked list size adjusted runtime
Linked lists are able to grow in size. So elements can be added to the list.,5.0,1.0,linked lists are able to grow in size so elements can be added to the list,"['linked', 'lists', 'able', 'grow', 'size', 'elements', 'added', 'list']",link list abl grow size element ad list,linked list able grow size element added list
"Linked lists are not confined to a specific size, and can have elements added and removed far easier. They are also easier to traverse.",5.0,1.0,linked lists are not confined to a specific size and can have elements added and removed far easier they are also easier to traverse,"['linked', 'lists', 'confined', 'specific', 'size', 'elements', 'added', 'removed', 'far', 'easier', 'also', 'easier', 'traverse']",link list confin specif size element ad remov far easier also easier travers,linked list confined specific size element added removed far easier also easier traverse
There is no predetermined length,5.0,1.0,there is no predetermined length,"['predetermined', 'length']",predetermin length,predetermined length
"Inserts into a linked list are far cheaper than an insert into an array. With an array, all items after the one being inserted must me shifted, with a linked list, only the pointers are replaced.",4.5,1.0,inserts into a linked list are far cheaper than an insert into an array with an array all items after the one being inserted must me shifted with a linked list only the pointers are replaced,"['inserts', 'linked', 'list', 'far', 'cheaper', 'insert', 'array', 'array', 'items', 'one', 'inserted', 'must', 'shifted', 'linked', 'list', 'pointers', 'replaced']",insert link list far cheaper insert array array item one insert must shift link list pointer replac,insert linked list far cheaper insert array array item one inserted must shifted linked list pointer replaced
Linked lists may be dynamically grown.,5.0,1.0,linked lists may be dynamically grown,"['linked', 'lists', 'may', 'dynamically', 'grown']",link list may dynam grown,linked list may dynamically grown
"Linked lists are very dynamic in that they can change and be added or subtracted to very easily because they are not linear in memory. Arrays are pre-specified in size to be cast over a certain amount of disk space. This makes insertion into Arrays difficult because all elements must be shifted, and if you reach the end of the array, you are done even if you have more data to input. Linked Lists do not run into these problems.",5.0,1.0,linked lists are very dynamic in that they can change and be added or subtracted to very easily because they are not linear in memory arrays are pre-specified in size to be cast over a certain amount of disk space this makes insertion into arrays difficult because all elements must be shifted and if you reach the end of the array you are done even if you have more data to input linked lists do not run into these problems,"['linked', 'lists', 'dynamic', 'change', 'added', 'subtracted', 'easily', 'linear', 'memory', 'arrays', 'pre-specified', 'size', 'cast', 'certain', 'amount', 'disk', 'space', 'makes', 'insertion', 'arrays', 'difficult', 'elements', 'must', 'shifted', 'reach', 'end', 'array', 'done', 'even', 'data', 'input', 'linked', 'lists', 'run', 'problems']",link list dynam chang ad subtract easili linear memori array pre-specifi size cast certain amount disk space make insert array difficult element must shift reach end array done even data input link list run problem,linked list dynamic change added subtracted easily linear memory array pre-specified size cast certain amount disk space make insertion array difficult element must shifted reach end array done even data input linked list run problem
"linked lists have an indefinite size, whereas arrays are a specific size.",5.0,1.0,linked lists have an indefinite size whereas arrays are a specific size,"['linked', 'lists', 'indefinite', 'size', 'whereas', 'arrays', 'specific', 'size']",link list indefinit size wherea array specif size,linked list indefinite size whereas array specific size
"Linked lists have no predefined length, and thus you can have virtually unlimited items in that list.",5.0,1.0,linked lists have no predefined length and thus you can have virtually unlimited items in that list,"['linked', 'lists', 'predefined', 'length', 'thus', 'virtually', 'unlimited', 'items', 'list']",link list predefin length thu virtual unlimit item list,linked list predefined length thus virtually unlimited item list
"They grow dynamically, unlike the fixed size array",5.0,1.0,they grow dynamically unlike the fixed size array,"['grow', 'dynamically', 'unlike', 'fixed', 'size', 'array']",grow dynam unlik fix size array,grow dynamically unlike fixed size array
"you can add as many nodes as you like without having to specify a list size, if an array gets too big you have to copy its entire contents to another larger array to get more room",5.0,1.0,you can add as many nodes as you like without having to specify a list size if an array gets too big you have to copy its entire contents to another larger array to get more room,"['add', 'many', 'nodes', 'like', 'without', 'specify', 'list', 'size', 'array', 'gets', 'big', 'copy', 'entire', 'contents', 'another', 'larger', 'array', 'get', 'room']",add mani node like without specifi list size array get big copi entir content anoth larger array get room,add many node like without specify list size array get big copy entire content another larger array get room
Linkded list does not have a fixed size. Arrays have a fixed size.,5.0,1.0,linkded list does not have a fixed size arrays have a fixed size,"['linkded', 'list', 'fixed', 'size', 'arrays', 'fixed', 'size']",linkd list fix size array fix size,linkded list fixed size array fixed size
"Linked lists have a dynamic size, where as arrays have a static size.",5.0,1.0,linked lists have a dynamic size where as arrays have a static size,"['linked', 'lists', 'dynamic', 'size', 'arrays', 'static', 'size']",link list dynam size array static size,linked list dynamic size array static size
linked lists do not have a memory constraint other than total memory,5.0,1.0,linked lists do not have a memory constraint other than total memory,"['linked', 'lists', 'memory', 'constraint', 'total', 'memory']",link list memori constraint total memori,linked list memory constraint total memory
"The primary advantage of linked lists over arrays is their ability to become larger or smaller as data is added and removed from the list, whereas arrays may waste memory for small data sets, and run out of space for large data sets.",5.0,1.0,the primary advantage of linked lists over arrays is their ability to become larger or smaller as data is added and removed from the list whereas arrays may waste memory for small data sets and run out of space for large data sets,"['primary', 'advantage', 'linked', 'lists', 'arrays', 'ability', 'become', 'larger', 'smaller', 'data', 'added', 'removed', 'list', 'whereas', 'arrays', 'may', 'waste', 'memory', 'small', 'data', 'sets', 'run', 'space', 'large', 'data', 'sets']",primari advantag link list array abil becom larger smaller data ad remov list wherea array may wast memori small data set run space larg data set,primary advantage linked list array ability become larger smaller data added removed list whereas array may waste memory small data set run space large data set
"Array have fixed size, in Link List are flexible for adding or deleting an element.",5.0,1.0,array have fixed size in link list are flexible for adding or deleting an element,"['array', 'fixed', 'size', 'link', 'list', 'flexible', 'adding', 'deleting', 'element']",array fix size link list flexibl ad delet element,array fixed size link list flexible adding deleting element
they are resizeable,5.0,1.0,they are resizeable,['resizeable'],resiz,resizeable
Linked lists can be dynamically allocated and their size can change as needed.,5.0,1.0,linked lists can be dynamically allocated and their size can change as needed,"['linked', 'lists', 'dynamically', 'allocated', 'size', 'change', 'needed']",link list dynam alloc size chang need,linked list dynamically allocated size change needed
"linked lists do not have to have a specified size, they are easier to add to and remove from",5.0,1.0,linked lists do not have to have a specified size they are easier to add to and remove from,"['linked', 'lists', 'specified', 'size', 'easier', 'add', 'remove']",link list specifi size easier add remov,linked list specified size easier add remove
"they dont have a fixed size, no shiftnig needs to be done for insertion or deletion.",5.0,1.0,they dont have a fixed size no shiftnig needs to be done for insertion or deletion,"['dont', 'fixed', 'size', 'shiftnig', 'needs', 'done', 'insertion', 'deletion']",dont fix size shiftnig need done insert delet,dont fixed size shiftnig need done insertion deletion
linked list many be dynamically grown. It has not limit,5.0,1.0,linked list many be dynamically grown it has not limit,"['linked', 'list', 'many', 'dynamically', 'grown', 'limit']",link list mani dynam grown limit,linked list many dynamically grown limit
A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue.,5.0,1.0,a data structure in c plus plus where the the first element in the queue is the first element taken out of the queue,"['data', 'structure', 'c', 'plus', 'plus', 'first', 'element', 'queue', 'first', 'element', 'taken', 'queue']",data structur c plu plu first element queue first element taken queue,data structure c plus plus first element queue first element taken queue
A queue is an abstract data type that performs operations on both ends of the list and exhibits first-in first-out behavior.,5.0,1.0,a queue is an abstract data type that performs operations on both ends of the list and exhibits first-in first-out behavior,"['queue', 'abstract', 'data', 'type', 'performs', 'operations', 'ends', 'list', 'exhibits', 'first-in', 'first-out', 'behavior']",queue abstract data type perform oper end list exhibit first-in first-out behavior,queue abstract data type performs operation end list exhibit first-in first-out behavior
First in first out.,4.5,1.0,first in first out,"['first', 'first']",first first,first first
"A queue is an abstract data type that involves putting an element at the back of the list. Queues use the FIFO, first in first out, idea where the first element in the list is the first that comes out.",5.0,1.0,a queue is an abstract data type that involves putting an element at the back of the list queues use the fifo first in first out idea where the first element in the list is the first that comes out,"['queue', 'abstract', 'data', 'type', 'involves', 'putting', 'element', 'back', 'list', 'queues', 'use', 'fifo', 'first', 'first', 'idea', 'first', 'element', 'list', 'first', 'comes']",queue abstract data type involv put element back list queue use fifo first first idea first element list first come,queue abstract data type involves putting element back list queue use fifo first first idea first element list first come
"A data structure that implements first in, first out. The element that has been there the longest is the first to get served.",5.0,1.0,a data structure that implements first in first out the element that has been there the longest is the first to get served,"['data', 'structure', 'implements', 'first', 'first', 'element', 'longest', 'first', 'get', 'served']",data structur implement first first element longest first get serv,data structure implement first first element longest first get served
a data structure that inserts elements at the end of it and removes elements from the front.,5.0,1.0,a data structure that inserts elements at the end of it and removes elements from the front,"['data', 'structure', 'inserts', 'elements', 'end', 'removes', 'elements', 'front']",data structur insert element end remov element front,data structure insert element end remove element front
A queue is a collection of elements with the characteristics of first in first outFIFO. The first item in is the first item out. All additional items are added to the end of the list.,5.0,1.0,a queue is a collection of elements with the characteristics of first in first outfifo the first item in is the first item out all additional items are added to the end of the list,"['queue', 'collection', 'elements', 'characteristics', 'first', 'first', 'outfifo', 'first', 'item', 'first', 'item', 'additional', 'items', 'added', 'end', 'list']",queue collect element characterist first first outfifo first item first item addit item ad end list,queue collection element characteristic first first outfifo first item first item additional item added end list
"A queue is a data structure that inserts data into a FIFO configuration, that is, data input to the structure is always at it is end, and data taken is always from the beginning.",5.0,1.0,a queue is a data structure that inserts data into a fifo configuration that is data input to the structure is always at it is end and data taken is always from the beginning,"['queue', 'data', 'structure', 'inserts', 'data', 'fifo', 'configuration', 'data', 'input', 'structure', 'always', 'end', 'data', 'taken', 'always', 'beginning']",queue data structur insert data fifo configur data input structur alway end data taken alway begin,queue data structure insert data fifo configuration data input structure always end data taken always beginning
It is a particular set of entities that are put in to a certain order by the enqueue and the dequeue functions.,3.5,0.0,it is a particular set of entities that are put in to a certain order by the enqueue and the dequeue functions,"['particular', 'set', 'entities', 'put', 'certain', 'order', 'enqueue', 'dequeue', 'functions']",particular set entiti put certain order enqueu dequeu function,particular set entity put certain order enqueue dequeue function
A queue is a data type that operates under a FILOFirst In Last Outmethod. This means that the first element inserted into the queue is the first element removed.,4.0,1.0,a queue is a data type that operates under a filofirst in last outmethod this means that the first element inserted into the queue is the first element removed,"['queue', 'data', 'type', 'operates', 'filofirst', 'last', 'outmethod', 'means', 'first', 'element', 'inserted', 'queue', 'first', 'element', 'removed']",queue data type oper filofirst last outmethod mean first element insert queue first element remov,queue data type operates filofirst last outmethod mean first element inserted queue first element removed
like a linked list except it is first in last out,2.5,0.0,like a linked list except it is first in last out,"['like', 'linked', 'list', 'except', 'first', 'last']",like link list except first last,like linked list except first last
A queue is like a stack except it follows FIFOFirst in first out.,5.0,1.0,a queue is like a stack except it follows fifofirst in first out,"['queue', 'like', 'stack', 'except', 'follows', 'fifofirst', 'first']",queue like stack except follow fifofirst first,queue like stack except follows fifofirst first
A queue is a data structure where the first node in is the first node out.,5.0,1.0,a queue is a data structure where the first node in is the first node out,"['queue', 'data', 'structure', 'first', 'node', 'first', 'node']",queue data structur first node first node,queue data structure first node first node
A queue is a First in First out data structure much like a line for a movie theatre. The first object in line is the first object to be handled or enacted upon.,5.0,1.0,a queue is a first in first out data structure much like a line for a movie theatre the first object in line is the first object to be handled or enacted upon,"['queue', 'first', 'first', 'data', 'structure', 'much', 'like', 'line', 'movie', 'theatre', 'first', 'object', 'line', 'first', 'object', 'handled', 'enacted', 'upon']",queue first first data structur much like line movi theatr first object line first object handl enact upon,queue first first data structure much like line movie theatre first object line first object handled enacted upon
"its a lot like a stack, except that the first item put into the list is the first item to be taken from the list.",5.0,1.0,its a lot like a stack except that the first item put into the list is the first item to be taken from the list,"['lot', 'like', 'stack', 'except', 'first', 'item', 'put', 'list', 'first', 'item', 'taken', 'list']",lot like stack except first item put list first item taken list,lot like stack except first item put list first item taken list
"a first in first out list of items, like if you put 5, 4, 3, 2, and 1 in the queue it will when you dequeue items remove the items in the same order as put in, so thus it will put out, 5, 4, 3, 2, and 1 in that exact order.",5.0,1.0,a first in first out list of items like if you put 5 4 3 2 and 1 in the queue it will when you dequeue items remove the items in the same order as put in so thus it will put out 5 4 3 2 and 1 in that exact order,"['first', 'first', 'list', 'items', 'like', 'put', '5', '4', '3', '2', '1', 'queue', 'dequeue', 'items', 'remove', 'items', 'order', 'put', 'thus', 'put', '5', '4', '3', '2', '1', 'exact', 'order']",first first list item like put 5 4 3 2 1 queue dequeu item remov item order put thu put 5 4 3 2 1 exact order,first first list item like put 5 4 3 2 1 queue dequeue item remove item order put thus put 5 4 3 2 1 exact order
"A linked list with a First In, Out structure dequeue at the head of the list enqueue at the end of the list",5.0,1.0,a linked list with a first in out structure dequeue at the head of the list enqueue at the end of the list,"['linked', 'list', 'first', 'structure', 'dequeue', 'head', 'list', 'enqueue', 'end', 'list']",link list first structur dequeu head list enqueu end list,linked list first structure dequeue head list enqueue end list
"a list of objects that follow the rule first in first out, essentially a linked list that goes in order of the first object in the list is the first to be taken off.",5.0,1.0,a list of objects that follow the rule first in first out essentially a linked list that goes in order of the first object in the list is the first to be taken off,"['list', 'objects', 'follow', 'rule', 'first', 'first', 'essentially', 'linked', 'list', 'goes', 'order', 'first', 'object', 'list', 'first', 'taken']",list object follow rule first first essenti link list goe order first object list first taken,list object follow rule first first essentially linked list go order first object list first taken
A queue is an abstract data type that is based off of the priniple of first in first out. FIFO. The first item inserted into the list will the first item taken out.,5.0,1.0,a queue is an abstract data type that is based off of the priniple of first in first out fifo the first item inserted into the list will the first item taken out,"['queue', 'abstract', 'data', 'type', 'based', 'priniple', 'first', 'first', 'fifo', 'first', 'item', 'inserted', 'list', 'first', 'item', 'taken']",queue abstract data type base prinipl first first fifo first item insert list first item taken,queue abstract data type based priniple first first fifo first item inserted list first item taken
It is a first in first out data structure. It can be implemented with either a linked list or an array.,5.0,1.0,it is a first in first out data structure it can be implemented with either a linked list or an array,"['first', 'first', 'data', 'structure', 'implemented', 'either', 'linked', 'list', 'array']",first first data structur implement either link list array,first first data structure implemented either linked list array
an ordered list that performs task in the order of first in first out. adding items to the queue places items behind the rest of them. taking items off the queue takes the one that has waited the longest.,5.0,1.0,an ordered list that performs task in the order of first in first out adding items to the queue places items behind the rest of them taking items off the queue takes the one that has waited the longest,"['ordered', 'list', 'performs', 'task', 'order', 'first', 'first', 'adding', 'items', 'queue', 'places', 'items', 'behind', 'rest', 'taking', 'items', 'queue', 'takes', 'one', 'waited', 'longest']",order list perform task order first first ad item queue place item behind rest take item queue take one wait longest,ordered list performs task order first first adding item queue place item behind rest taking item queue take one waited longest
"A queue is a linear, first-in first-out data structure. Data must be accessed in the same order it was put into the queue, so only the oldest item in the queue is accessible at any time. Main functions defined are enqueue and dequeue.",5.0,1.0,a queue is a linear first-in first-out data structure data must be accessed in the same order it was put into the queue so only the oldest item in the queue is accessible at any time main functions defined are enqueue and dequeue,"['queue', 'linear', 'first-in', 'first-out', 'data', 'structure', 'data', 'must', 'accessed', 'order', 'put', 'queue', 'oldest', 'item', 'queue', 'accessible', 'time', 'main', 'functions', 'defined', 'enqueue', 'dequeue']",queue linear first-in first-out data structur data must access order put queue oldest item queue access time main function defin enqueu dequeu,queue linear first-in first-out data structure data must accessed order put queue oldest item queue accessible time main function defined enqueue dequeue
"Queue is a buffer, it follows the rule of First In and First out. Queue is very useful in computer science for scheduleing.",5.0,1.0,queue is a buffer it follows the rule of first in and first out queue is very useful in computer science for scheduleing,"['queue', 'buffer', 'follows', 'rule', 'first', 'first', 'queue', 'useful', 'computer', 'science', 'scheduleing']",queue buffer follow rule first first queue use comput scienc schedul,queue buffer follows rule first first queue useful computer science scheduleing
a queue is a set of elements where the first element inserted is the first element to be removed,5.0,1.0,a queue is a set of elements where the first element inserted is the first element to be removed,"['queue', 'set', 'elements', 'first', 'element', 'inserted', 'first', 'element', 'removed']",queue set element first element insert first element remov,queue set element first element inserted first element removed
Is a list of items where the the user only has access to the first element and each new element is added at the end.,5.0,1.0,is a list of items where the the user only has access to the first element and each new element is added at the end,"['list', 'items', 'user', 'access', 'first', 'element', 'new', 'element', 'added', 'end']",list item user access first element new element ad end,list item user access first element new element added end
"a queue is a list of data that follows the fifo principle, an example of this would be when you get into a line at a movie theater ... the first one there gets to buy a ticket first",5.0,1.0,a queue is a list of data that follows the fifo principle an example of this would be when you get into a line at a movie theater the first one there gets to buy a ticket first,"['queue', 'list', 'data', 'follows', 'fifo', 'principle', 'example', 'would', 'get', 'line', 'movie', 'theater', 'first', 'one', 'gets', 'buy', 'ticket', 'first']",queue list data follow fifo principl exampl would get line movi theater first one get buy ticket first,queue list data follows fifo principle example would get line movie theater first one get buy ticket first
"A queue is a data structure that holds a set of objects, which has a FIFOfirst in first outpriority.",5.0,1.0,a queue is a data structure that holds a set of objects which has a fifofirst in first outpriority,"['queue', 'data', 'structure', 'holds', 'set', 'objects', 'fifofirst', 'first', 'outpriority']",queue data structur hold set object fifofirst first outprior,queue data structure hold set object fifofirst first outpriority
like a linked list expect first in last out,1.5,0.0,like a linked list expect first in last out,"['like', 'linked', 'list', 'expect', 'first', 'last']",like link list expect first last,like linked list expect first last
push and pop,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
"Pop, which removes the head, or least recently inserted node from the stack. Push, which inserts a new node at the head of the stack.",5.0,1.0,pop which removes the head or least recently inserted node from the stack push which inserts a new node at the head of the stack,"['pop', 'removes', 'head', 'least', 'recently', 'inserted', 'node', 'stack', 'push', 'inserts', 'new', 'node', 'head', 'stack']",pop remov head least recent insert node stack push insert new node head stack,pop remove head least recently inserted node stack push insert new node head stack
Push and pop,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
The Push function and the Pop function.,5.0,1.0,the push function and the pop function,"['push', 'function', 'pop', 'function']",push function pop function,push function pop function
push and pop,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
push puts an element on the stack pop-takes an element off the stack,5.0,1.0,push puts an element on the stack pop-takes an element off the stack,"['push', 'puts', 'element', 'stack', 'pop-takes', 'element', 'stack']",push put element stack pop-tak element stack,push put element stack pop-takes element stack
Push and pop.,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
Push and Pop,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
push and pop.,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
"Push and Pop. Push adds an element to the stack, while Pop removes the top element from a stack.",5.0,1.0,push and pop push adds an element to the stack while pop removes the top element from a stack,"['push', 'pop', 'push', 'adds', 'element', 'stack', 'pop', 'removes', 'top', 'element', 'stack']",push pop push add element stack pop remov top element stack,push pop push add element stack pop remove top element stack
pop and push,5.0,1.0,pop and push,"['pop', 'push']",pop push,pop push
"push, pop, search, isEmpty",4.5,1.0,push pop search isempty,"['push', 'pop', 'search', 'isempty']",push pop search isempti,push pop search isempty
push and pop,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
"Push, Pop, isEmpty, isFull Maybe List to show all elements or an operation to count how many elements in the stack.",5.0,1.0,push pop isempty isfull maybe list to show all elements or an operation to count how many elements in the stack,"['push', 'pop', 'isempty', 'isfull', 'maybe', 'list', 'show', 'elements', 'operation', 'count', 'many', 'elements', 'stack']",push pop isempti isful mayb list show element oper count mani element stack,push pop isempty isfull maybe list show element operation count many element stack
"pop, push",5.0,1.0,pop push,"['pop', 'push']",pop push,pop push
"isempty, push and pop, along with usually,",5.0,1.0,isempty push and pop along with usually,"['isempty', 'push', 'pop', 'along', 'usually']",isempti push pop along usual,isempty push pop along usually
push and pop,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
push and pop. push puts objects into the stack and pop takes them out following the first in last out rule.,5.0,1.0,push and pop push puts objects into the stack and pop takes them out following the first in last out rule,"['push', 'pop', 'push', 'puts', 'objects', 'stack', 'pop', 'takes', 'following', 'first', 'last', 'rule']",push pop push put object stack pop take follow first last rule,push pop push put object stack pop take following first last rule
"The main operations in a stack are push and pop. Push adds an item to the top of the stack, pop removes the top item from the stack.",5.0,1.0,the main operations in a stack are push and pop push adds an item to the top of the stack pop removes the top item from the stack,"['main', 'operations', 'stack', 'push', 'pop', 'push', 'adds', 'item', 'top', 'stack', 'pop', 'removes', 'top', 'item', 'stack']",main oper stack push pop push add item top stack pop remov top item stack,main operation stack push pop push add item top stack pop remove top item stack
push and pop,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
"push, which adds an item to the top of the stack, and pop, which takes the first item off the top to the stack",5.0,1.0,push which adds an item to the top of the stack and pop which takes the first item off the top to the stack,"['push', 'adds', 'item', 'top', 'stack', 'pop', 'takes', 'first', 'item', 'top', 'stack']",push add item top stack pop take first item top stack,push add item top stack pop take first item top stack
"the main functions defined for a stack are push, which puts an element on the top of the stack, and pop, which removes an item from the top.",5.0,1.0,the main functions defined for a stack are push which puts an element on the top of the stack and pop which removes an item from the top,"['main', 'functions', 'defined', 'stack', 'push', 'puts', 'element', 'top', 'stack', 'pop', 'removes', 'item', 'top']",main function defin stack push put element top stack pop remov item top,main function defined stack push put element top stack pop remove item top
Push Pop Full IsEmpty,5.0,1.0,push pop full isempty,"['push', 'pop', 'full', 'isempty']",push pop full isempti,push pop full isempty
pop and push to remove an element and to insert an element,5.0,1.0,pop and push to remove an element and to insert an element,"['pop', 'push', 'remove', 'element', 'insert', 'element']",pop push remov element insert element,pop push remove element insert element
"Push, Pop",5.0,1.0,push pop,"['push', 'pop']",push pop,push pop
push and pop,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
push Add an element to the top of the stack pop remove the top element from the stack,5.0,1.0,push add an element to the top of the stack pop remove the top element from the stack,"['push', 'add', 'element', 'top', 'stack', 'pop', 'remove', 'top', 'element', 'stack']",push add element top stack pop remov top element stack,push add element top stack pop remove top element stack
push and pop,5.0,1.0,push and pop,"['push', 'pop']",push pop,push pop
When you traverse a tree of any size you will visit each node three times. Its on the order of 3n or Onrunning time.,4.0,1.0,when you traverse a tree of any size you will visit each node three times its on the order of 3n or onrunning time,"['traverse', 'tree', 'size', 'visit', 'node', 'three', 'times', 'order', '3n', 'onrunning', 'time']",travers tree size visit node three time order 3n onrun time,traverse tree size visit node three time order 3n onrunning time
"The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left, then bottom, then right sides.",5.0,1.0,the euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides,"['euler', 'tour', 'traversal', 'tree', 'begins', 'root', 'visits', 'node', 'tree', 'left', 'bottom', 'right', 'sides']",euler tour travers tree begin root visit node tree left bottom right side,euler tour traversal tree begin root visit node tree left bottom right side
Where you visit the in order according to its data value.,3.0,0.0,where you visit the in order according to its data value,"['visit', 'order', 'according', 'data', 'value']",visit order accord data valu,visit order according data value
"It is a tree that shows how it functions. It contains parents, children, siblings, ancestors and descendents. The use of tree type algorithm is also an alternative sorting algorithm.",2.0,0.0,it is a tree that shows how it functions it contains parents children siblings ancestors and descendents the use of tree type algorithm is also an alternative sorting algorithm,"['tree', 'shows', 'functions', 'contains', 'parents', 'children', 'siblings', 'ancestors', 'descendents', 'use', 'tree', 'type', 'algorithm', 'also', 'alternative', 'sorting', 'algorithm']",tree show function contain parent children sibl ancestor descend use tree type algorithm also altern sort algorithm,tree show function contains parent child sibling ancestor descendent use tree type algorithm also alternative sorting algorithm
"Start from the root, circle around the whole tree, naming each node as you see it.",4.5,1.0,start from the root circle around the whole tree naming each node as you see it,"['start', 'root', 'circle', 'around', 'whole', 'tree', 'naming', 'node', 'see']",start root circl around whole tree name node see,start root circle around whole tree naming node see
it is where you visit the parent then you vistit the children,1.5,0.0,it is where you visit the parent then you vistit the children,"['visit', 'parent', 'vistit', 'children']",visit parent vistit children,visit parent vistit child
"To start from the root, traveling left and visiting ever child along the way till you return to the root from the right.",4.0,1.0,to start from the root traveling left and visiting ever child along the way till you return to the root from the right,"['start', 'root', 'traveling', 'left', 'visiting', 'ever', 'child', 'along', 'way', 'till', 'return', 'root', 'right']",start root travel left visit ever child along way till return root right,start root traveling left visiting ever child along way till return root right
"Traversing a tree down to it is terminal child and then all of it is siblings, then it traverses up the terminal child 's parent and all of it is siblingsrepeating the first step if those siblings have childrenuntil the root node has been visited.",4.0,1.0,traversing a tree down to it is terminal child and then all of it is siblings then it traverses up the terminal child s parent and all of it is siblingsrepeating the first step if those siblings have childrenuntil the root node has been visited,"['traversing', 'tree', 'terminal', 'child', 'siblings', 'traverses', 'terminal', 'child', 'parent', 'siblingsrepeating', 'first', 'step', 'siblings', 'childrenuntil', 'root', 'node', 'visited']",travers tree termin child sibl travers termin child parent siblingsrep first step sibl childrenuntil root node visit,traversing tree terminal child sibling traverse terminal child parent siblingsrepeating first step sibling childrenuntil root node visited
The Euler tour traversal of a tree the function that iteratively keeps track of the pointer on each node.,3.0,0.0,the euler tour traversal of a tree the function that iteratively keeps track of the pointer on each node,"['euler', 'tour', 'traversal', 'tree', 'function', 'iteratively', 'keeps', 'track', 'pointer', 'node']",euler tour travers tree function iter keep track pointer node,euler tour traversal tree function iteratively keep track pointer node
"You travel the outside edge of the tree, clockwise, while naming each node.",4.0,1.0,you travel the outside edge of the tree clockwise while naming each node,"['travel', 'outside', 'edge', 'tree', 'clockwise', 'naming', 'node']",travel outsid edg tree clockwis name node,travel outside edge tree clockwise naming node
children to root,2.0,0.0,children to root,"['children', 'root']",children root,child root
go to the bottom of the left sub tree and visit the parent and then its children,3.0,0.0,go to the bottom of the left sub tree and visit the parent and then its children,"['go', 'bottom', 'left', 'sub', 'tree', 'visit', 'parent', 'children']",go bottom left sub tree visit parent children,go bottom left sub tree visit parent child
The Euler tour traverses through the tree in a rubber-band style shape.,3.5,0.0,the euler tour traverses through the tree in a rubber-band style shape,"['euler', 'tour', 'traverses', 'tree', 'rubber-band', 'style', 'shape']",euler tour travers tree rubber-band style shape,euler tour traverse tree rubber-band style shape
"The Euler tour traversal of a tree is a specific way of navigating a tree that involves following the tree starting at the very top and moving along the left side of the tree first, cupping in to visit the parents of children nodes. It allows for each node to be visited from the left, the right and the bottom. The Euler tour first progresses to a left child if there is one, then progresses to it is parent, then it is next child, then it is parent 's parent.",4.5,1.0,the euler tour traversal of a tree is a specific way of navigating a tree that involves following the tree starting at the very top and moving along the left side of the tree first cupping in to visit the parents of children nodes it allows for each node to be visited from the left the right and the bottom the euler tour first progresses to a left child if there is one then progresses to it is parent then it is next child then it is parent s parent,"['euler', 'tour', 'traversal', 'tree', 'specific', 'way', 'navigating', 'tree', 'involves', 'following', 'tree', 'starting', 'top', 'moving', 'along', 'left', 'side', 'tree', 'first', 'cupping', 'visit', 'parents', 'children', 'nodes', 'allows', 'node', 'visited', 'left', 'right', 'bottom', 'euler', 'tour', 'first', 'progresses', 'left', 'child', 'one', 'progresses', 'parent', 'next', 'child', 'parent', 'parent']",euler tour travers tree specif way navig tree involv follow tree start top move along left side tree first cup visit parent children node allow node visit left right bottom euler tour first progress left child one progress parent next child parent parent,euler tour traversal tree specific way navigating tree involves following tree starting top moving along left side tree first cupping visit parent child node allows node visited left right bottom euler tour first progress left child one progress parent next child parent parent
it runs through the parents and the children in order,3.0,0.0,it runs through the parents and the children in order,"['runs', 'parents', 'children', 'order']",run parent children order,run parent child order
"it starts node on the left of the root and then proceeds to visits each node in a left to right order, visits the root, and then proceeds to repeat the previous step on the right side of the tree.",3.5,0.0,it starts node on the left of the root and then proceeds to visits each node in a left to right order visits the root and then proceeds to repeat the previous step on the right side of the tree,"['starts', 'node', 'left', 'root', 'proceeds', 'visits', 'node', 'left', 'right', 'order', 'visits', 'root', 'proceeds', 'repeat', 'previous', 'step', 'right', 'side', 'tree']",start node left root proce visit node left right order visit root proce repeat previou step right side tree,start node left root proceeds visit node left right order visit root proceeds repeat previous step right side tree
"Travel from the root to the farthest left child Backup, travel the leftmost children in the right side repeat until reaching the rightmost child.",4.5,1.0,travel from the root to the farthest left child backup travel the leftmost children in the right side repeat until reaching the rightmost child,"['travel', 'root', 'farthest', 'left', 'child', 'backup', 'travel', 'leftmost', 'children', 'right', 'side', 'repeat', 'reaching', 'rightmost', 'child']",travel root farthest left child backup travel leftmost children right side repeat reach rightmost child,travel root farthest left child backup travel leftmost child right side repeat reaching rightmost child
"has preorder, in order, and postorder of a tree. preorder equals puts the parent node in front of the child nodes. in order equals puts the parent node between the left child and right child nodes. postorder equals puts the parent node after the child nodes.",3.5,0.0,has preorder in order and postorder of a tree preorder equals puts the parent node in front of the child nodes in order equals puts the parent node between the left child and right child nodes postorder equals puts the parent node after the child nodes,"['preorder', 'order', 'postorder', 'tree', 'preorder', 'equals', 'puts', 'parent', 'node', 'front', 'child', 'nodes', 'order', 'equals', 'puts', 'parent', 'node', 'left', 'child', 'right', 'child', 'nodes', 'postorder', 'equals', 'puts', 'parent', 'node', 'child', 'nodes']",preorder order postord tree preorder equal put parent node front child node order equal put parent node left child right child node postord equal put parent node child node,preorder order postorder tree preorder equal put parent node front child node order equal put parent node left child right child node postorder equal put parent node child node
"The Euler traveral is when you go through a tree looking for nodes to put in the order of left, root, right. Like inOrder traversal.",4.0,1.0,the euler traveral is when you go through a tree looking for nodes to put in the order of left root right like inorder traversal,"['euler', 'traveral', 'go', 'tree', 'looking', 'nodes', 'put', 'order', 'left', 'root', 'right', 'like', 'inorder', 'traversal']",euler traver go tree look node put order left root right like inord travers,euler traveral go tree looking node put order left root right like inorder traversal
"An Euler traversal is a traversal that begins with the root, and travels around the outside of the tree. Each element in the tree is visited 3 times. From the left, from the bottom and from the right.",5.0,1.0,an euler traversal is a traversal that begins with the root and travels around the outside of the tree each element in the tree is visited 3 times from the left from the bottom and from the right,"['euler', 'traversal', 'traversal', 'begins', 'root', 'travels', 'around', 'outside', 'tree', 'element', 'tree', 'visited', '3', 'times', 'left', 'bottom', 'right']",euler travers travers begin root travel around outsid tree element tree visit 3 time left bottom right,euler traversal traversal begin root travel around outside tree element tree visited 3 time left bottom right
Euler tour traversal of a tree traverses down each branch straight to one leaf then starts again at the root and repeats until all elements have been traversed.,4.0,1.0,euler tour traversal of a tree traverses down each branch straight to one leaf then starts again at the root and repeats until all elements have been traversed,"['euler', 'tour', 'traversal', 'tree', 'traverses', 'branch', 'straight', 'one', 'leaf', 'starts', 'root', 'repeats', 'elements', 'traversed']",euler tour travers tree travers branch straight one leaf start root repeat element travers,euler tour traversal tree traverse branch straight one leaf start root repeat element traversed
"The Euler tour visits every node in a tree, starting with the root and working around the tree counterclockwise. in-order, post-order, and pre-order traversals can be seen as variations of the Euler tour traversal.",4.5,1.0,the euler tour visits every node in a tree starting with the root and working around the tree counterclockwise in-order post-order and pre-order traversals can be seen as variations of the euler tour traversal,"['euler', 'tour', 'visits', 'every', 'node', 'tree', 'starting', 'root', 'working', 'around', 'tree', 'counterclockwise', 'in-order', 'post-order', 'pre-order', 'traversals', 'seen', 'variations', 'euler', 'tour', 'traversal']",euler tour visit everi node tree start root work around tree counterclockwis in-ord post-ord pre-ord travers seen variat euler tour travers,euler tour visit every node tree starting root working around tree counterclockwise in-order post-order pre-order traversal seen variation euler tour traversal
not answered,0.0,0.0,not answered,['answered'],answer,answered
to traverse going down to the left then go to the right of last children and back to the top .. kind of like going around the tree,5.0,1.0,to traverse going down to the left then go to the right of last children and back to the top kind of like going around the tree,"['traverse', 'going', 'left', 'go', 'right', 'last', 'children', 'back', 'top', 'kind', 'like', 'going', 'around', 'tree']",travers go left go right last children back top kind like go around tree,traverse going left go right last child back top kind like going around tree
"You recursively visit every node on the list. You visit the node from the left, the bottom, and from the right.",5.0,1.0,you recursively visit every node on the list you visit the node from the left the bottom and from the right,"['recursively', 'visit', 'every', 'node', 'list', 'visit', 'node', 'left', 'bottom', 'right']",recurs visit everi node list visit node left bottom right,recursively visit every node list visit node left bottom right
"the euler tour is a way to traverse a tree where you come into contact with each node three times, from the left, from the right, and from the bottom",5.0,1.0,the euler tour is a way to traverse a tree where you come into contact with each node three times from the left from the right and from the bottom,"['euler', 'tour', 'way', 'traverse', 'tree', 'come', 'contact', 'node', 'three', 'times', 'left', 'right', 'bottom']",euler tour way travers tree come contact node three time left right bottom,euler tour way traverse tree come contact node three time left right bottom
traversing a tree level by level,1.5,0.0,traversing a tree level by level,"['traversing', 'tree', 'level', 'level']",travers tree level level,traversing tree level level
The Euler traversal through the tree in a rubber band style shape.,3.5,0.0,the euler traversal through the tree in a rubber band style shape,"['euler', 'traversal', 'tree', 'rubber', 'band', 'style', 'shape']",euler travers tree rubber band style shape,euler traversal tree rubber band style shape
"if root, set root to NULL else if deleting right leaf, set rightPtr of parent node to NULL else if deleting left leaf, set leftPtr of parent node to NULL else if deleting a left or right subtree child node, set the max leaf child in the left subtree as the new child node.",4.5,1.0,if root set root to null else if deleting right leaf set rightptr of parent node to null else if deleting left leaf set leftptr of parent node to null else if deleting a left or right subtree child node set the max leaf child in the left subtree as the new child node,"['root', 'set', 'root', 'null', 'else', 'deleting', 'right', 'leaf', 'set', 'rightptr', 'parent', 'node', 'null', 'else', 'deleting', 'left', 'leaf', 'set', 'leftptr', 'parent', 'node', 'null', 'else', 'deleting', 'left', 'right', 'subtree', 'child', 'node', 'set', 'max', 'leaf', 'child', 'left', 'subtree', 'new', 'child', 'node']",root set root null els delet right leaf set rightptr parent node null els delet left leaf set leftptr parent node null els delet left right subtre child node set max leaf child left subtre new child node,root set root null else deleting right leaf set rightptr parent node null else deleting left leaf set leftptr parent node null else deleting left right subtree child node set max leaf child left subtree new child node
"Traverse the tree and find the node, if the node has no children, simply delete it; otherwise set the node 's data equal to the data of one of its children then set the pointer for that child to NULL.",3.5,0.0,traverse the tree and find the node if the node has no children simply delete it otherwise set the node s data equal to the data of one of its children then set the pointer for that child to null,"['traverse', 'tree', 'find', 'node', 'node', 'children', 'simply', 'delete', 'otherwise', 'set', 'node', 'data', 'equal', 'data', 'one', 'children', 'set', 'pointer', 'child', 'null']",travers tree find node node children simpli delet otherwis set node data equal data one children set pointer child null,traverse tree find node node child simply delete otherwise set node data equal data one child set pointer child null
first attaching the elements from the node to be deleting to alternate nodes and then deleting that node. delete node;,3.5,0.0,first attaching the elements from the node to be deleting to alternate nodes and then deleting that node delete node,"['first', 'attaching', 'elements', 'node', 'deleting', 'alternate', 'nodes', 'deleting', 'node', 'delete', 'node']",first attach element node delet altern node delet node delet node,first attaching element node deleting alternate node deleting node delete node
"If you delete a node from a tree, you have to link that nodes parents to the children of that node.",3.5,0.0,if you delete a node from a tree you have to link that nodes parents to the children of that node,"['delete', 'node', 'tree', 'link', 'nodes', 'parents', 'children', 'node']",delet node tree link node parent children node,delete node tree link node parent child node
Must delete the information that the node containsto free up memory or garbage collectand also delete the pointerin that node 's parentthat points to the node you wish to delete.,2.0,0.0,must delete the information that the node containsto free up memory or garbage collectand also delete the pointerin that node s parentthat points to the node you wish to delete,"['must', 'delete', 'information', 'node', 'containsto', 'free', 'memory', 'garbage', 'collectand', 'also', 'delete', 'pointerin', 'node', 'parentthat', 'points', 'node', 'wish', 'delete']",must delet inform node containsto free memori garbag collectand also delet pointerin node parentthat point node wish delet,must delete information node containsto free memory garbage collectand also delete pointerin node parentthat point node wish delete
you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree.,5.0,1.0,you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree,"['replace', 'node', 'largest', 'element', 'left', 'subtree', 'replace', 'smallest', 'element', 'right', 'subtree']",replac node largest element left subtre replac smallest element right subtre,replace node largest element left subtree replace smallest element right subtree
"You traverse the tree till you find the node you are wanting to delete. If the node has no children you delete it. If the node has children, before you delete, you find the left-most of its children and attach it to the root then you can delete the node.",4.0,1.0,you traverse the tree till you find the node you are wanting to delete if the node has no children you delete it if the node has children before you delete you find the left-most of its children and attach it to the root then you can delete the node,"['traverse', 'tree', 'till', 'find', 'node', 'wanting', 'delete', 'node', 'children', 'delete', 'node', 'children', 'delete', 'find', 'left-most', 'children', 'attach', 'root', 'delete', 'node']",travers tree till find node want delet node children delet node children delet find left-most children attach root delet node,traverse tree till find node wanting delete node child delete node child delete find left-most child attach root delete node
Link the to-be-deleted 's left child to the to-be-deleted 's parent 's left child pointer.,4.5,1.0,link the to-be-deleted s left child to the to-be-deleted s parent s left child pointer,"['link', 'to-be-deleted', 'left', 'child', 'to-be-deleted', 'parent', 'left', 'child', 'pointer']",link to-be-delet left child to-be-delet parent left child pointer,link to-be-deleted left child to-be-deleted parent left child pointer
The way you delete a node from a binary search tree is first you have take the root and then see the nodes that are coming from the root. And delete the nodes and set the root to NULL.,2.0,0.0,the way you delete a node from a binary search tree is first you have take the root and then see the nodes that are coming from the root and delete the nodes and set the root to null,"['way', 'delete', 'node', 'binary', 'search', 'tree', 'first', 'take', 'root', 'see', 'nodes', 'coming', 'root', 'delete', 'nodes', 'set', 'root', 'null']",way delet node binari search tree first take root see node come root delet node set root null,way delete node binary search tree first take root see node coming root delete node set root null
You remove the element from the tree and move the next highest element from the left into its place.,4.5,1.0,you remove the element from the tree and move the next highest element from the left into its place,"['remove', 'element', 'tree', 'move', 'next', 'highest', 'element', 'left', 'place']",remov element tree move next highest element left place,remove element tree move next highest element left place
delete node;,1.5,0.0,delete node,"['delete', 'node']",delet node,delete node
"the deletion of a node depends upon if it has children and if it is an AVL binary search tree. Assuming it is not an AVL tree, and the node being deleted has no children, you just set its pointer to null. If it has a left child or a right child exclusively, that child replaces the deleted node, if it has two children, the left most child of the right sub treeor right most child of the left subtreewill replace it",5.0,1.0,the deletion of a node depends upon if it has children and if it is an avl binary search tree assuming it is not an avl tree and the node being deleted has no children you just set its pointer to null if it has a left child or a right child exclusively that child replaces the deleted node if it has two children the left most child of the right sub treeor right most child of the left subtreewill replace it,"['deletion', 'node', 'depends', 'upon', 'children', 'avl', 'binary', 'search', 'tree', 'assuming', 'avl', 'tree', 'node', 'deleted', 'children', 'set', 'pointer', 'null', 'left', 'child', 'right', 'child', 'exclusively', 'child', 'replaces', 'deleted', 'node', 'two', 'children', 'left', 'child', 'right', 'sub', 'treeor', 'right', 'child', 'left', 'subtreewill', 'replace']",delet node depend upon children avl binari search tree assum avl tree node delet children set pointer null left child right child exclus child replac delet node two children left child right sub treeor right child left subtreewil replac,deletion node depends upon child avl binary search tree assuming avl tree node deleted child set pointer null left child right child exclusively child replaces deleted node two child left child right sub treeor right child left subtreewill replace
"If the node is a leaf, just set it is parent 's pointer to null and delete it, if it has a single child, set the parent 's pointer to the child and delete; if it has two children, set the node to one of the middle children and remove that child from its previous position as a leafrightmost child of the left subtree or leftmost child of the right subtree.",5.0,1.0,if the node is a leaf just set it is parent s pointer to null and delete it if it has a single child set the parent s pointer to the child and delete if it has two children set the node to one of the middle children and remove that child from its previous position as a leafrightmost child of the left subtree or leftmost child of the right subtree,"['node', 'leaf', 'set', 'parent', 'pointer', 'null', 'delete', 'single', 'child', 'set', 'parent', 'pointer', 'child', 'delete', 'two', 'children', 'set', 'node', 'one', 'middle', 'children', 'remove', 'child', 'previous', 'position', 'leafrightmost', 'child', 'left', 'subtree', 'leftmost', 'child', 'right', 'subtree']",node leaf set parent pointer null delet singl child set parent pointer child delet two children set node one middl children remov child previou posit leafrightmost child left subtre leftmost child right subtre,node leaf set parent pointer null delete single child set parent pointer child delete two child set node one middle child remove child previous position leafrightmost child left subtree leftmost child right subtree
"In a binary search tree, you must first establish a proper replacement for the node you are about to delete, usually a child from the soon to be deleted node. Once that replacement node has been found, you simply reassign it to where the node that is going to be deleted is. After the deleted node has been usurped, you remove the deleted node from memory so it may be used again.",4.0,1.0,in a binary search tree you must first establish a proper replacement for the node you are about to delete usually a child from the soon to be deleted node once that replacement node has been found you simply reassign it to where the node that is going to be deleted is after the deleted node has been usurped you remove the deleted node from memory so it may be used again,"['binary', 'search', 'tree', 'must', 'first', 'establish', 'proper', 'replacement', 'node', 'delete', 'usually', 'child', 'soon', 'deleted', 'node', 'replacement', 'node', 'found', 'simply', 'reassign', 'node', 'going', 'deleted', 'deleted', 'node', 'usurped', 'remove', 'deleted', 'node', 'memory', 'may', 'used']",binari search tree must first establish proper replac node delet usual child soon delet node replac node found simpli reassign node go delet delet node usurp remov delet node memori may use,binary search tree must first establish proper replacement node delete usually child soon deleted node replacement node found simply reassign node going deleted deleted node usurped remove deleted node memory may used
It all depends on where the node is located. If its a child it can just be deleted but for a node inside the tree it must be replaced with another node that works in its place.,3.5,0.0,it all depends on where the node is located if its a child it can just be deleted but for a node inside the tree it must be replaced with another node that works in its place,"['depends', 'node', 'located', 'child', 'deleted', 'node', 'inside', 'tree', 'must', 'replaced', 'another', 'node', 'works', 'place']",depend node locat child delet node insid tree must replac anoth node work place,depends node located child deleted node inside tree must replaced another node work place
"if the node has no children, delete it right away, otherwise, put either the furthest right node on the left side or the furthest left node on the right side in that place and perform a the above on that node to guarantee that it is children get handled properly.",5.0,1.0,if the node has no children delete it right away otherwise put either the furthest right node on the left side or the furthest left node on the right side in that place and perform a the above on that node to guarantee that it is children get handled properly,"['node', 'children', 'delete', 'right', 'away', 'otherwise', 'put', 'either', 'furthest', 'right', 'node', 'left', 'side', 'furthest', 'left', 'node', 'right', 'side', 'place', 'perform', 'node', 'guarantee', 'children', 'get', 'handled', 'properly']",node children delet right away otherwis put either furthest right node left side furthest left node right side place perform node guarante children get handl properli,node child delete right away otherwise put either furthest right node left side furthest left node right side place perform node guarantee child get handled properly
Create a temp Node Set temp 's values to the Node after head or NULL in the case of only head Node in the list. Set head equal to temp. Delete temp,2.0,0.0,create a temp node set temp s values to the node after head or null in the case of only head node in the list set head equal to temp delete temp,"['create', 'temp', 'node', 'set', 'temp', 'values', 'node', 'head', 'null', 'case', 'head', 'node', 'list', 'set', 'head', 'equal', 'temp', 'delete', 'temp']",creat temp node set temp valu node head null case head node list set head equal temp delet temp,create temp node set temp value node head null case head node list set head equal temp delete temp
"by searching down the tree until you find the node, and replacing the link to that node with the greatest child node on the left subtree or the least child node on the right subtree.",4.5,1.0,by searching down the tree until you find the node and replacing the link to that node with the greatest child node on the left subtree or the least child node on the right subtree,"['searching', 'tree', 'find', 'node', 'replacing', 'link', 'node', 'greatest', 'child', 'node', 'left', 'subtree', 'least', 'child', 'node', 'right', 'subtree']",search tree find node replac link node greatest child node left subtre least child node right subtre,searching tree find node replacing link node greatest child node left subtree least child node right subtree
"Set the nodes to NULL, where that it does not point to anything, and the use the DELETE opertator to clear space from memory.",1.5,0.0,set the nodes to null where that it does not point to anything and the use the delete opertator to clear space from memory,"['set', 'nodes', 'null', 'point', 'anything', 'use', 'delete', 'opertator', 'clear', 'space', 'memory']",set node null point anyth use delet opert clear space memori,set node null point anything use delete opertator clear space memory
"You must first traverse the tree to find the appropriate value. Then you must make sure that the node is a leaf node. If it is, then you can delete the pointer to that specific node.",3.0,0.0,you must first traverse the tree to find the appropriate value then you must make sure that the node is a leaf node if it is then you can delete the pointer to that specific node,"['must', 'first', 'traverse', 'tree', 'find', 'appropriate', 'value', 'must', 'make', 'sure', 'node', 'leaf', 'node', 'delete', 'pointer', 'specific', 'node']",must first travers tree find appropri valu must make sure node leaf node delet pointer specif node,must first traverse tree find appropriate value must make sure node leaf node delete pointer specific node
"if the node is a leaf, you set it is parent 's pointer to null. if the node is in the tree you must replace the node with one in the tree: either the largest in the left of the tree or the smallest in the right of the tree. this can be done recursively if needed.",5.0,1.0,if the node is a leaf you set it is parent s pointer to null if the node is in the tree you must replace the node with one in the tree either the largest in the left of the tree or the smallest in the right of the tree this can be done recursively if needed,"['node', 'leaf', 'set', 'parent', 'pointer', 'null', 'node', 'tree', 'must', 'replace', 'node', 'one', 'tree', 'either', 'largest', 'left', 'tree', 'smallest', 'right', 'tree', 'done', 'recursively', 'needed']",node leaf set parent pointer null node tree must replac node one tree either largest left tree smallest right tree done recurs need,node leaf set parent pointer null node tree must replace node one tree either largest left tree smallest right tree done recursively needed
"if the node is a leaf it can simply be deallocated or deleted from memory, and its parent 's reference to it changed to NULL. If the node has a single child, the pointer to it should be made to point to its child before deleting the node. Should the node have two children, the easiest solution may be to copy the node 's entire subtree to a new array or tree, delete the node and all descendants, then add the elements taken from the subtree back into the main tree.",4.5,1.0,if the node is a leaf it can simply be deallocated or deleted from memory and its parent s reference to it changed to null if the node has a single child the pointer to it should be made to point to its child before deleting the node should the node have two children the easiest solution may be to copy the node s entire subtree to a new array or tree delete the node and all descendants then add the elements taken from the subtree back into the main tree,"['node', 'leaf', 'simply', 'deallocated', 'deleted', 'memory', 'parent', 'reference', 'changed', 'null', 'node', 'single', 'child', 'pointer', 'made', 'point', 'child', 'deleting', 'node', 'node', 'two', 'children', 'easiest', 'solution', 'may', 'copy', 'node', 'entire', 'subtree', 'new', 'array', 'tree', 'delete', 'node', 'descendants', 'add', 'elements', 'taken', 'subtree', 'back', 'main', 'tree']",node leaf simpli dealloc delet memori parent refer chang null node singl child pointer made point child delet node node two children easiest solut may copi node entir subtre new array tree delet node descend add element taken subtre back main tree,node leaf simply deallocated deleted memory parent reference changed null node single child pointer made point child deleting node node two child easiest solution may copy node entire subtree new array tree delete node descendant add element taken subtree back main tree
not answered,0.0,0.0,not answered,['answered'],answer,answered
you cannot delete a node because that can cause a node to have more than 2 children,1.5,0.0,you cannot delete a node because that can cause a node to have more than 2 children,"['delete', 'node', 'cause', 'node', '2', 'children']",delet node caus node 2 children,delete node cause node 2 child
"You search the tree for the node using recursion. When you find the node, you determine whether it is a leaf or a internal node. If it is a leaf, you just delete it and set the parent pointer to that node to NULL. If it is a node, you replace the node with either of the children nodes.",4.0,1.0,you search the tree for the node using recursion when you find the node you determine whether it is a leaf or a internal node if it is a leaf you just delete it and set the parent pointer to that node to null if it is a node you replace the node with either of the children nodes,"['search', 'tree', 'node', 'using', 'recursion', 'find', 'node', 'determine', 'whether', 'leaf', 'internal', 'node', 'leaf', 'delete', 'set', 'parent', 'pointer', 'node', 'null', 'node', 'replace', 'node', 'either', 'children', 'nodes']",search tree node use recurs find node determin whether leaf intern node leaf delet set parent pointer node null node replac node either children node,search tree node using recursion find node determine whether leaf internal node leaf delete set parent pointer node null node replace node either child node
"to delete the node, you would have to link the children nodes that are connected to the node to be deleted to the remaining nodes of the tree in such a way that nodes on the right of the parent node are larger than the parent and nodes on the left of the parent node are smaller",4.0,1.0,to delete the node you would have to link the children nodes that are connected to the node to be deleted to the remaining nodes of the tree in such a way that nodes on the right of the parent node are larger than the parent and nodes on the left of the parent node are smaller,"['delete', 'node', 'would', 'link', 'children', 'nodes', 'connected', 'node', 'deleted', 'remaining', 'nodes', 'tree', 'way', 'nodes', 'right', 'parent', 'node', 'larger', 'parent', 'nodes', 'left', 'parent', 'node', 'smaller']",delet node would link children node connect node delet remain node tree way node right parent node larger parent node left parent node smaller,delete node would link child node connected node deleted remaining node tree way node right parent node larger parent node left parent node smaller
"if it has no children, you just delete it. if it only has one child, just replace the node with whichever child it has. if it has both children, replace it with one of its children, and send the other child down along the other side of the new node.",4.0,1.0,if it has no children you just delete it if it only has one child just replace the node with whichever child it has if it has both children replace it with one of its children and send the other child down along the other side of the new node,"['children', 'delete', 'one', 'child', 'replace', 'node', 'whichever', 'child', 'children', 'replace', 'one', 'children', 'send', 'child', 'along', 'side', 'new', 'node']",children delet one child replac node whichev child children replac one children send child along side new node,child delete one child replace node whichever child child replace one child send child along side new node
pointer to the child and delete it has 2 children set the node to the child and delete it. the node to th middle will then take its place,3.0,0.0,pointer to the child and delete it has 2 children set the node to the child and delete it the node to th middle will then take its place,"['pointer', 'child', 'delete', '2', 'children', 'set', 'node', 'child', 'delete', 'node', 'th', 'middle', 'take', 'place']",pointer child delet 2 children set node child delet node th middl take place,pointer child delete 2 child set node child delete node th middle take place
Lognwhere n is the number of nodes.,5.0,1.0,lognwhere n is the number of nodes,"['lognwhere', 'n', 'number', 'nodes']",lognwher n number node,lognwhere n number node
lognsteps,5.0,1.0,lognsteps,['lognsteps'],lognstep,lognsteps
The number of levels and the height of the tree,5.0,1.0,the number of levels and the height of the tree,"['number', 'levels', 'height', 'tree']",number level height tree,number level height tree
It is the same as the height of the tree.,5.0,1.0,it is the same as the height of the tree,"['height', 'tree']",height tree,height tree
"Given n elements, it would take n divided by 2 steps to find the search criteria.",1.5,0.0,given n elements it would take n divided by 2 steps to find the search criteria,"['given', 'n', 'elements', 'would', 'take', 'n', 'divided', '2', 'steps', 'find', 'search', 'criteria']",given n element would take n divid 2 step find search criteria,given n element would take n divided 2 step find search criterion
log n,5.0,1.0,log n,"['log', 'n']",log n,log n
Depends on the location of the node you are looking for. If it is the root it is one step. else If it is smaller than the current you are on node you go to the left. If it is larger than the current node you are on go to the right.,2.0,0.0,depends on the location of the node you are looking for if it is the root it is one step else if it is smaller than the current you are on node you go to the left if it is larger than the current node you are on go to the right,"['depends', 'location', 'node', 'looking', 'root', 'one', 'step', 'else', 'smaller', 'current', 'node', 'go', 'left', 'larger', 'current', 'node', 'go', 'right']",depend locat node look root one step els smaller current node go left larger current node go right,depends location node looking root one step else smaller current node go left larger current node go right
2 to the power of n where n is the of levels the binary tree has,2.0,0.0,2 to the power of n where n is the of levels the binary tree has,"['2', 'power', 'n', 'n', 'levels', 'binary', 'tree']",2 power n n level binari tree,2 power n n level binary tree
The number of steps to search a node is the function n minus 1.,3.5,0.0,the number of steps to search a node is the function n minus 1,"['number', 'steps', 'search', 'node', 'function', 'n', 'minus', '1']",number step search node function n minu 1,number step search node function n minus 1
"It would take n divided by 2 elements, given n.",1.5,0.0,it would take n divided by 2 elements given n,"['would', 'take', 'n', 'divided', '2', 'elements', 'given', 'n']",would take n divid 2 element given n,would take n divided 2 element given n
logn,5.0,1.0,logn,['logn'],logn,logn
Olog n,5.0,1.0,olog n,"['olog', 'n']",olog n,olog n
OLogn,5.0,1.0,ologn,['ologn'],ologn,ologn
"If the binary search tree is constructed efficiently, best case scenario is Olog ntime. Where n is the number of items in the tree. If the binary search tree is constructed poorly, with for instance the root of the tree being 1, and progressing downwards and to the right its children are each more than the last: you have a one-way linear linked list. That worse case scenario would be a full traversal at Ontime. Where n is the number of items in the tree.",5.0,1.0,if the binary search tree is constructed efficiently best case scenario is olog ntime where n is the number of items in the tree if the binary search tree is constructed poorly with for instance the root of the tree being 1 and progressing downwards and to the right its children are each more than the last you have a one-way linear linked list that worse case scenario would be a full traversal at ontime where n is the number of items in the tree,"['binary', 'search', 'tree', 'constructed', 'efficiently', 'best', 'case', 'scenario', 'olog', 'ntime', 'n', 'number', 'items', 'tree', 'binary', 'search', 'tree', 'constructed', 'poorly', 'instance', 'root', 'tree', '1', 'progressing', 'downwards', 'right', 'children', 'last', 'one-way', 'linear', 'linked', 'list', 'worse', 'case', 'scenario', 'would', 'full', 'traversal', 'ontime', 'n', 'number', 'items', 'tree']",binari search tree construct effici best case scenario olog ntime n number item tree binari search tree construct poorli instanc root tree 1 progress downward right children last one-way linear link list wors case scenario would full travers ontim n number item tree,binary search tree constructed efficiently best case scenario olog ntime n number item tree binary search tree constructed poorly instance root tree 1 progressing downwards right child last one-way linear linked list worse case scenario would full traversal ontime n number item tree
"N, n being the number of nodes.",4.0,1.0,n n being the number of nodes,"['n', 'n', 'number', 'nodes']",n n number node,n n number node
"depending on the way that the tree is ordered, it could be anywhere between lognand N steps.",5.0,1.0,depending on the way that the tree is ordered it could be anywhere between lognand n steps,"['depending', 'way', 'tree', 'ordered', 'could', 'anywhere', 'lognand', 'n', 'steps']",depend way tree order could anywher lognand n step,depending way tree ordered could anywhere lognand n step
logn,5.0,1.0,logn,['logn'],logn,logn
"worst case scenario equals the number of levels of the tree, ie: the node at the farthest position from the root node. best case equals 1 step if its the root node.",5.0,1.0,worst case scenario equals the number of levels of the tree ie the node at the farthest position from the root node best case equals 1 step if its the root node,"['worst', 'case', 'scenario', 'equals', 'number', 'levels', 'tree', 'ie', 'node', 'farthest', 'position', 'root', 'node', 'best', 'case', 'equals', '1', 'step', 'root', 'node']",worst case scenario equal number level tree ie node farthest posit root node best case equal 1 step root node,worst case scenario equal number level tree ie node farthest position root node best case equal 1 step root node
3 steps at most. There are 3 cases.,1.5,0.0,3 steps at most there are 3 cases,"['3', 'steps', '3', 'cases']",3 step 3 case,3 step 3 case
lognwhere n equals the total number of nodes in the tree.,5.0,1.0,lognwhere n equals the total number of nodes in the tree,"['lognwhere', 'n', 'equals', 'total', 'number', 'nodes', 'tree']",lognwher n equal total number node tree,lognwhere n equal total number node tree
the same number of steps as the number of levels or generations in the tree,5.0,1.0,the same number of steps as the number of levels or generations in the tree,"['number', 'steps', 'number', 'levels', 'generations', 'tree']",number step number level gener tree,number step number level generation tree
to find a node in a binary search tree takes at most the same number of steps as there are levels of the tree.,5.0,1.0,to find a node in a binary search tree takes at most the same number of steps as there are levels of the tree,"['find', 'node', 'binary', 'search', 'tree', 'takes', 'number', 'steps', 'levels', 'tree']",find node binari search tree take number step level tree,find node binary search tree take number step level tree
"three steps visit the root node, then go to right subtree, after visiting right subtree visit left subtree",2.5,0.0,three steps visit the root node then go to right subtree after visiting right subtree visit left subtree,"['three', 'steps', 'visit', 'root', 'node', 'go', 'right', 'subtree', 'visiting', 'right', 'subtree', 'visit', 'left', 'subtree']",three step visit root node go right subtre visit right subtre visit left subtre,three step visit root node go right subtree visiting right subtree visit left subtree
log n,5.0,1.0,log n,"['log', 'n']",log n,log n
minus 1 divided by 2,1.5,0.0,minus 1 divided by 2,"['minus', '1', 'divided', '2']",minu 1 divid 2,minus 1 divided 2
2n-1,2.5,0.0,2n-1,['2n-1'],2n-1,2n-1
"it takes at most h steps, where h is the height of the tree.",5.0,1.0,it takes at most h steps where h is the height of the tree,"['takes', 'h', 'steps', 'h', 'height', 'tree']",take h step h height tree,take h step h height tree
it depends on the install search tree then from there for whatever the case is the it repeats it back along the case of the primary node,1.5,0.0,it depends on the install search tree then from there for whatever the case is the it repeats it back along the case of the primary node,"['depends', 'install', 'search', 'tree', 'whatever', 'case', 'repeats', 'back', 'along', 'case', 'primary', 'node']",depend instal search tree whatev case repeat back along case primari node,depends install search tree whatever case repeat back along case primary node
